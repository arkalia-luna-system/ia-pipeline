#!/usr/bin/env python3
"""
Script de validation des versions Python dans les workflows GitHub Actions
V√©rifie que toutes les versions Python utilis√©es sont support√©es
"""

import re
import sys
from pathlib import Path


class PythonVersionValidator:
    """Validateur des versions Python"""

    def __init__(self):
        self.project_root = Path.cwd()
        self.supported_versions = ["3.8", "3.9", "3.10", "3.11", "3.12"]
        self.unsupported_versions = ["3.1", "3.2", "3.3", "3.4", "3.5", "3.6", "3.7"]
        self.workflow_dir = self.project_root / ".github" / "workflows"

    def find_python_versions_in_file(self, file_path: Path) -> list[tuple[str, int]]:
        """Trouve toutes les versions Python dans un fichier"""
        versions = []

        # Ignorer les fichiers Apple Double
        if file_path.name.startswith("._"):
            return versions

        try:
            with open(file_path, encoding="utf-8") as f:
                for line_num, line in enumerate(f, 1):
                    # Chercher les patterns python-version sp√©cifiques
                    matches = re.findall(
                        r'python-version:\s*["\']?([3]\.[0-9]+)["\']?', line
                    )
                    for match in matches:
                        versions.append((match, line_num))

                    # Chercher les patterns dans les matrices de versions Python
                    if "python-version" in line and "[" in line:
                        # Extraire les versions de la matrice
                        version_matches = re.findall(r"([3]\.[0-9]+)", line)
                        for version in version_matches:
                            versions.append((version, line_num))
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lecture {file_path}: {e}")

        return versions

    def validate_workflows(self) -> bool:
        """Valide tous les workflows GitHub Actions"""
        print("üîç Validation des versions Python dans les workflows...")

        if not self.workflow_dir.exists():
            print("‚ùå Dossier .github/workflows/ non trouv√©")
            return False

        all_valid = True
        workflow_files = list(self.workflow_dir.glob("*.yaml")) + list(
            self.workflow_dir.glob("*.yml")
        )

        for workflow_file in workflow_files:
            print(f"\nüìã V√©rification de {workflow_file.name}:")
            versions = self.find_python_versions_in_file(workflow_file)

            if not versions:
                print("   ‚ÑπÔ∏è  Aucune version Python trouv√©e")
                continue

            file_valid = True
            for version, line_num in versions:
                if version in self.unsupported_versions:
                    print(f"   ‚ùå Version non support√©e: {version} (ligne {line_num})")
                    file_valid = False
                    all_valid = False
                elif version in self.supported_versions:
                    print(f"   ‚úÖ Version support√©e: {version} (ligne {line_num})")
                else:
                    print(f"   ‚ö†Ô∏è  Version inconnue: {version} (ligne {line_num})")
                    file_valid = False
                    all_valid = False

            if file_valid:
                print(
                    f"   ‚úÖ {workflow_file.name}: Toutes les versions sont support√©es"
                )
            else:
                print(f"   ‚ùå {workflow_file.name}: Probl√®mes d√©tect√©s")

        return all_valid

    def validate_config_files(self) -> bool:
        """Valide les fichiers de configuration"""
        print("\nüîç Validation des fichiers de configuration...")

        config_files = [
            "config/pyproject.toml",
            "config/requirements.txt",
            "config/requirements-minimal.txt",
            "config/Dockerfile",
        ]

        all_valid = True
        for config_file in config_files:
            file_path = self.project_root / config_file
            if not file_path.exists():
                print(f"   ‚ö†Ô∏è  {config_file}: Fichier non trouv√©")
                continue

            print(f"   üìã V√©rification de {config_file}:")
            versions = self.find_python_versions_in_file(file_path)

            file_valid = True
            for version, line_num in versions:
                if version in self.unsupported_versions:
                    print(
                        f"      ‚ùå Version non support√©e: {version} (ligne {line_num})"
                    )
                    file_valid = False
                    all_valid = False
                elif version in self.supported_versions:
                    print(f"      ‚úÖ Version support√©e: {version} (ligne {line_num})")
                else:
                    print(f"      ‚ö†Ô∏è  Version inconnue: {version} (ligne {line_num})")

            if file_valid:
                print(f"      ‚úÖ {config_file}: OK")
            else:
                print(f"      ‚ùå {config_file}: Probl√®mes d√©tect√©s")

        return all_valid

    def generate_report(self) -> str:
        """G√©n√®re un rapport de validation"""
        print("\nüìä G√©n√©ration du rapport de validation...")

        report = []
        report.append("# Rapport de Validation des Versions Python")
        report.append("")
        report.append("## Versions Support√©es")
        report.append("- Python 3.8+")
        report.append("- Python 3.9+")
        report.append("- Python 3.10+ (recommand√©)")
        report.append("- Python 3.11+")
        report.append("- Python 3.12+")
        report.append("")
        report.append("## Versions Non Support√©es")
        report.append("- Python 3.1 (d√©pr√©ci√©)")
        report.append("- Python 3.2 (d√©pr√©ci√©)")
        report.append("- Python 3.3 (d√©pr√©ci√©)")
        report.append("- Python 3.4 (d√©pr√©ci√©)")
        report.append("- Python 3.5 (d√©pr√©ci√©)")
        report.append("- Python 3.6 (d√©pr√©ci√©)")
        report.append("- Python 3.7 (d√©pr√©ci√©)")
        report.append("")

        # Validation des workflows
        workflows_valid = self.validate_workflows()
        status = "‚úÖ VALIDE" if workflows_valid else "‚ùå PROBL√àMES D√âTECT√âS"
        report.append(f"## Workflows GitHub Actions: {status}")
        report.append("")

        # Validation des configs
        configs_valid = self.validate_config_files()
        status = "‚úÖ VALIDE" if configs_valid else "‚ùå PROBL√àMES D√âTECT√âS"
        report.append(f"## Fichiers de Configuration: {status}")
        report.append("")

        # Recommandations
        report.append("## Recommandations")
        report.append("1. Utiliser Python 3.10+ pour la stabilit√©")
        report.append("2. Utiliser Python 3.11+ pour les performances")
        report.append("3. Utiliser Python 3.12+ pour les derni√®res fonctionnalit√©s")
        report.append("4. √âviter les versions Python < 3.8")
        report.append("")

        overall_valid = workflows_valid and configs_valid
        status = "‚úÖ VALIDATION R√âUSSIE" if overall_valid else "‚ùå PROBL√àMES √Ä CORRIGER"
        report.append(f"## R√©sum√© Global: {status}")

        return "\n".join(report)

    def run_validation(self) -> bool:
        """Ex√©cute la validation compl√®te"""
        print("üöÄ D√©marrage de la validation des versions Python...")
        print("=" * 60)

        # Validation des workflows
        workflows_valid = self.validate_workflows()

        # Validation des configs
        configs_valid = self.validate_config_files()

        # G√©n√©ration du rapport
        report = self.generate_report()

        # Sauvegarde du rapport
        report_file = self.project_root / "python_versions_validation_report.md"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report)

        print("\n" + "=" * 60)
        print("üìã RAPPORT DE VALIDATION")
        print("=" * 60)
        print(report)
        print("=" * 60)

        overall_valid = workflows_valid and configs_valid
        if overall_valid:
            print("‚úÖ Validation r√©ussie ! Toutes les versions Python sont support√©es.")
            print(f"üìÑ Rapport sauvegard√©: {report_file}")
        else:
            print(
                "‚ùå Probl√®mes d√©tect√©s ! Veuillez corriger les versions non support√©es."
            )
            print(f"üìÑ Rapport d√©taill√©: {report_file}")

        return overall_valid


def main():
    """Fonction principale"""
    validator = PythonVersionValidator()

    try:
        success = validator.run_validation()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Validation interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la validation: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

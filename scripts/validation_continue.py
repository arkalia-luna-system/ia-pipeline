#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Validation Continue d'Athalia/Arkalia
Surveillance automatique et d√©tection de r√©gressions
"""

import time
import json
import os
import subprocess
from datetime import datetime, timedelta
from pathlib import Path
import threading
import logging

class ValidationContinue:
    def __init__(self, intervalle_minutes=60):
        self.intervalle = intervalle_minutes * 60  # Conversion en secondes
        self.historique = []
        self.seuils_alerte = {
            'taux_succes_min': 80,
            'temps_max': 120,
            'memoire_max': 1000,
            'erreurs_critiques_max': 2
        }
        self.actif = False
        
        # Configuration du logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('validation_continue.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)
    
    def test_rapide(self):
        """Test rapide pour validation continue (5-10 secondes)"""
        start = time.time()
        
        tests_rapides = {
            'demarrage': self.test_demarrage,
            'imports': self.test_imports,
            'generation_mini': self.test_generation_mini,
            'correction_basique': self.test_correction_basique
        }
        
        resultats = {}
        erreurs_critiques = 0
        
        for nom, test_func in tests_rapides.items():
            try:
                resultat = test_func()
                resultats[nom] = resultat
                if not resultat.get('succes'):
                    erreurs_critiques += 1
            except Exception as e:
                resultats[nom] = {'succes': False, 'erreur': str(e)}
                erreurs_critiques += 1
        
        temps_total = time.time() - start
        tests_succes = sum(1 for r in resultats.values() if r.get('succes'))
        taux_succes = (tests_succes / len(resultats)) * 100
        
        validation = {
            'timestamp': datetime.now().isoformat(),
            'temps_total': temps_total,
            'taux_succes': taux_succes,
            'erreurs_critiques': erreurs_critiques,
            'tests_detail': resultats,
            'statut': 'OK' if taux_succes >= self.seuils_alerte['taux_succes_min'] else 'ALERTE'
        }
        
        return validation
    
    def test_demarrage(self):
        """Test: Athalia d√©marre-t-il ?"""
        try:
            result = subprocess.run(
                ["python", "athalia_unified.py", "--version"],
                capture_output=True, text=True, timeout=10
            )
            return {
                'succes': result.returncode == 0,
                'temps': 0,
                'details': f"Exit code: {result.returncode}"
            }
        except Exception as e:
            return {'succes': False, 'erreur': str(e)}
    
    def test_imports(self):
        """Test: Les imports fonctionnent-ils ?"""
        try:
            code_test = """
import sys
sys.path.insert(0, '.')
try:
    from athalia_core.main import *
    from athalia_core.ai_robust import *
    print('OK')
except Exception as e:
    print(f'ERREUR: {e}')
    sys.exit(1)
"""
            result = subprocess.run(
                ["python", "-c", code_test],
                capture_output=True, text=True, timeout=10
            )
            return {
                'succes': result.returncode == 0,
                'temps': 0,
                'details': result.stdout.strip()
            }
        except Exception as e:
            return {'succes': False, 'erreur': str(e)}
    
    def test_generation_mini(self):
        """Test: G√©n√©ration d'un mini-projet"""
        start = time.time()
        projet_test = f"/tmp/validation_continue_{int(time.time())}"
        
        try:
            cmd = f"python athalia_unified.py --generate --project-name MiniTest --output {projet_test}"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=30)
            
            temps = time.time() - start
            succes = result.returncode == 0 and os.path.exists(projet_test)
            
            # Nettoyage
            if os.path.exists(projet_test):
                import shutil
                shutil.rmtree(projet_test)
            
            return {
                'succes': succes,
                'temps': temps,
                'details': f"Projet cr√©√©: {succes}"
            }
        except Exception as e:
            return {'succes': False, 'erreur': str(e)}
    
    def test_correction_basique(self):
        """Test: Correction basique"""
        start = time.time()
        
        # Cr√©e un fichier avec une erreur simple
        fichier_test = "/tmp/test_correction_basique.py"
        with open(fichier_test, 'w') as f:
            f.write("def test():\n    x = 1\n    return x + y  # y n'existe pas\n")
        
        try:
            cmd = f"python athalia_unified.py --fix {fichier_test}"
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=20)
            
            temps = time.time() - start
            
            # V√©rifie si le fichier a √©t√© modifi√©
            with open(fichier_test, 'r') as f:
                contenu = f.read()
            
            # Nettoyage
            os.remove(fichier_test)
            
            return {
                'succes': result.returncode == 0,
                'temps': temps,
                'details': f"Fichier modifi√©: {len(contenu)} caract√®res"
            }
        except Exception as e:
            return {'succes': False, 'erreur': str(e)}
    
    def detecter_regression(self, validation_actuelle):
        """D√©tecte les r√©gressions par rapport √† l'historique"""
        if len(self.historique) < 3:
            return None
        
        # Compare avec les 3 derni√®res validations
        recentes = self.historique[-3:]
        taux_moyen = sum(v['taux_succes'] for v in recentes) / len(recentes)
        
        regression = {
            'detectee': False,
            'type': None,
            'details': None
        }
        
        # D√©tection de r√©gression de performance
        if validation_actuelle['taux_succes'] < taux_moyen - 10:
            regression['detectee'] = True
            regression['type'] = 'PERFORMANCE'
            regression['details'] = f"Taux de succ√®s chut√© de {taux_moyen:.1f}% √† {validation_actuelle['taux_succes']:.1f}%"
        
        # D√©tection d'augmentation des erreurs critiques
        erreurs_moyennes = sum(v['erreurs_critiques'] for v in recentes) / len(recentes)
        if validation_actuelle['erreurs_critiques'] > erreurs_moyennes + 1:
            regression['detectee'] = True
            regression['type'] = 'STABILITE'
            regression['details'] = f"Erreurs critiques augment√©es de {erreurs_moyennes:.1f} √† {validation_actuelle['erreurs_critiques']}"
        
        # D√©tection de ralentissement
        temps_moyen = sum(v['temps_total'] for v in recentes) / len(recentes)
        if validation_actuelle['temps_total'] > temps_moyen * 1.5:
            regression['detectee'] = True
            regression['type'] = 'VITESSE'
            regression['details'] = f"Temps d'ex√©cution augment√© de {temps_moyen:.1f}s √† {validation_actuelle['temps_total']:.1f}s"
        
        return regression
    
    def demarrer_surveillance(self):
        """D√©marre la surveillance continue"""
        if self.actif:
            self.logger.warning("‚ö†Ô∏è Surveillance d√©j√† active")
            return None
        
        self.actif = True
        self.logger.info("üöÄ D√©marrage de la surveillance continue")
        
        def boucle_surveillance():
            """Boucle de surveillance avec arr√™t propre"""
            while self.actif:
                try:
                    # Test rapide de validation
                    validation = self.test_rapide()
                    
                    # D√©tection de r√©gression
                    regression = self.detecter_regression(validation)
                    if regression and regression['detectee']:
                        self.logger.warning(f"‚ö†Ô∏è R√âGRESSION D√âTECT√âE: {regression['type']} - {regression['details']}")
                        self.alerter_regression(validation, regression)
                    
                    # Ajout √† l'historique
                    self.historique.append(validation)
                    
                    # Limite l'historique √† 50 entr√©es (r√©duit de 100 √† 50)
                    if len(self.historique) > 50:
                        self.historique = self.historique[-50:]
                    
                    # Log du statut
                    statut_emoji = "‚úÖ" if validation['statut'] == 'OK' else "‚ö†Ô∏è"
                    self.logger.info(f"{statut_emoji} Validation: {validation['taux_succes']:.1f}% de succ√®s en {validation['temps_total']:.1f}s")
                    
                    # Sauvegarde de l'historique
                    self.sauvegarder_historique()
                    
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur dans la surveillance: {str(e)}")
                
                # Attente avant le prochain test
                if self.actif:
                    time.sleep(self.intervalle)
        
        # Lance la surveillance dans un thread s√©par√©
        thread_surveillance = threading.Thread(target=boucle_surveillance, daemon=True)
        thread_surveillance.start()
        
        return thread_surveillance
    
    def arreter_surveillance(self):
        """Arr√™te la surveillance continue"""
        self.actif = False
        self.logger.info("üõë Arr√™t de la surveillance continue")
    
    def alerter_regression(self, validation, regression):
        """G√©n√®re une alerte de r√©gression"""
        alerte = {
            'timestamp': datetime.now().isoformat(),
            'type': regression['type'],
            'details': regression['details'],
            'validation': validation,
            'gravite': 'HAUTE' if validation['taux_succes'] < 50 else 'MOYENNE'
        }
        
        # Sauvegarde de l'alerte
        alertes_file = 'alertes_regression.json'
        alertes = []
        
        if os.path.exists(alertes_file):
            try:
                with open(alertes_file, 'r') as f:
                    alertes = json.load(f)
            except:
                alertes = []
        
        alertes.append(alerte)
        
        with open(alertes_file, 'w') as f:
            json.dump(alertes, f, indent=2)
        
        # Log de l'alerte
        self.logger.error(f"üö® ALERTE R√âGRESSION: {regression['type']} - {regression['details']}")
        
        # G√©n√©ration d'un rapport d'alerte
        self.generer_rapport_alerte(alerte)
    
    def generer_rapport_alerte(self, alerte):
        """G√©n√®re un rapport d'alerte d√©taill√©"""
        rapport = f"""# üö® Alerte de R√©gression - Athalia/Arkalia

**Date:** {datetime.fromisoformat(alerte['timestamp']).strftime("%d/%m/%Y %H:%M:%S")}  
**Type:** {alerte['type']}  
**Gravit√©:** {alerte['gravite']}

## üìä D√©tails de la R√©gression
{alerte['details']}

## üìà M√©triques Actuelles
- **Taux de succ√®s:** {alerte['validation']['taux_succes']:.1f}%
- **Temps d'ex√©cution:** {alerte['validation']['temps_total']:.1f}s
- **Erreurs critiques:** {alerte['validation']['erreurs_critiques']}

## üîç Tests D√©taill√©s
"""
        
        for nom, resultat in alerte['validation']['tests_detail'].items():
            status = "‚úÖ" if resultat.get('succes') else "‚ùå"
            rapport += f"- {status} **{nom}**: {resultat.get('details', 'N/A')}\n"
        
        rapport += f"""
## üéØ Actions Recommand√©es

1. **V√©rifier les derniers changements** dans le code
2. **Analyser les logs** pour identifier la cause
3. **Tester manuellement** les fonctionnalit√©s affect√©es
4. **Revert si n√©cessaire** vers une version stable

## üìã Historique R√©cent
"""
        
        # Ajoute les 5 derni√®res validations
        for i, validation in enumerate(self.historique[-5:]):
            date = datetime.fromisoformat(validation['timestamp']).strftime("%H:%M:%S")
            rapport += f"- {date}: {validation['taux_succes']:.1f}% de succ√®s\n"
        
        # Sauvegarde du rapport
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        rapport_file = f"alerte_regression_{timestamp}.md"
        
        with open(rapport_file, 'w', encoding='utf-8') as f:
            f.write(rapport)
        
        self.logger.info(f"üìÑ Rapport d'alerte g√©n√©r√©: {rapport_file}")
    
    def sauvegarder_historique(self):
        """Sauvegarde l'historique des validations"""
        try:
            with open('historique_validation.json', 'w') as f:
                json.dump(self.historique, f, indent=2)
        except Exception as e:
            self.logger.error(f"Erreur sauvegarde historique: {str(e)}")
    
    def charger_historique(self):
        """Charge l'historique des validations"""
        try:
            if os.path.exists('historique_validation.json'):
                with open('historique_validation.json', 'r') as f:
                    self.historique = json.load(f)
        except Exception as e:
            self.logger.error(f"Erreur chargement historique: {str(e)}")
    
    def generer_rapport_tendance(self):
        """G√©n√®re un rapport de tendance bas√© sur l'historique"""
        if len(self.historique) < 5:
            return "Pas assez de donn√©es pour analyser les tendances"
        
        # Calcul des tendances
        recentes = self.historique[-10:]  # 10 derni√®res validations
        anciennes = self.historique[:10]  # 10 premi√®res validations
        
        if len(anciennes) < 10:
            anciennes = self.historique[:len(self.historique)//2]
        
        taux_recent = sum(v['taux_succes'] for v in recentes) / len(recentes)
        taux_ancien = sum(v['taux_succes'] for v in anciennes) / len(anciennes)
        
        evolution = taux_recent - taux_ancien
        
        rapport = f"""# üìä Rapport de Tendance - Athalia/Arkalia

**P√©riode analys√©e:** {len(self.historique)} validations  
**Tendance:** {'üìà AM√âLIORATION' if evolution > 0 else 'üìâ R√âGRESSION' if evolution < 0 else '‚û°Ô∏è STABLE'}

## üìà M√©triques de Tendance

| M√©trique | Ancien | R√©cent | √âvolution |
|----------|--------|--------|-----------|
| Taux de succ√®s | {taux_ancien:.1f}% | {taux_recent:.1f}% | {evolution:+.1f}% |
| Temps moyen | {sum(v['temps_total'] for v in anciennes)/len(anciennes):.1f}s | {sum(v['temps_total'] for v in recentes)/len(recentes):.1f}s | - |
| Erreurs critiques | {sum(v['erreurs_critiques'] for v in anciennes)/len(anciennes):.1f} | {sum(v['erreurs_critiques'] for v in recentes)/len(recentes):.1f} | - |

## üéØ Recommandations

"""
        
        if evolution > 5:
            rapport += "üéâ **Excellent !** Athalia s'am√©liore. Continue dans cette direction."
        elif evolution > 0:
            rapport += "‚úÖ **Bien !** L√©g√®re am√©lioration d√©tect√©e."
        elif evolution > -5:
            rapport += "‚ö†Ô∏è **Attention !** L√©g√®re r√©gression d√©tect√©e. Surveille les prochains changements."
        else:
            rapport += "üö® **Probl√®me !** R√©gression significative d√©tect√©e. Action corrective n√©cessaire."
        
        return rapport

if __name__ == "__main__":
    # Exemple d'utilisation
    validator = ValidationContinue(intervalle_minutes=30)  # Test toutes les 30 minutes
    
    # Charge l'historique existant
    validator.charger_historique()
    
    # Test unique
    print("üîç Test de validation continue...")
    validation = validator.test_rapide()
    print(f"R√©sultat: {validation['taux_succes']:.1f}% de succ√®s")
    
    # D√©marre la surveillance continue
    print("üöÄ D√©marrage de la surveillance continue...")
    thread = validator.demarrer_surveillance()
    
    try:
        # Garde le programme actif avec timeout
        timeout_seconds = 300  # 5 minutes max
        start_time = time.time()
        while time.time() - start_time < timeout_seconds:
            time.sleep(10)  # Check toutes les 10 secondes
        print(f"\n‚è∞ Timeout atteint ({timeout_seconds}s) - Arr√™t automatique")
    except KeyboardInterrupt:
        print("\nüõë Arr√™t de la surveillance...")
    finally:
        validator.arreter_surveillance() 
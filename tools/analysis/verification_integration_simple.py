#!/usr/bin/env python3
"""
üîç V√âRIFICATION SIMPLE D'INT√âGRATION ORCHESTRATEUR
==================================================
Script simple pour v√©rifier l'int√©gration actuelle de l'orchestrateur unifi√©.
"""

import re
from pathlib import Path


def main():
    """Fonction principale"""
    print("üîç V√âRIFICATION SIMPLE D'INT√âGRATION")
    print("=" * 40)

    # Chemin vers l'orchestrateur
    orchestrator_path = Path("athalia_core/unified_orchestrator.py")

    if not orchestrator_path.exists():
        print("‚ùå Orchestrateur unifi√© non trouv√©")
        return

    # Lire le contenu
    with open(orchestrator_path, "r", encoding="utf-8") as f:
        content = f.read()

    # Chercher les imports relatifs
    imports = re.findall(r"from \.(\w+) import (\w+)", content)

    print(f"üì¶ Imports trouv√©s: {len(imports)}")

    # Afficher les imports
    print("\n‚úÖ MODULES INT√âGR√âS:")
    for module, class_name in imports:
        print(f"  - {module} -> {class_name}")

    # Chercher les modules athalia_core
    core_modules = []
    core_path = Path("athalia_core")
    for py_file in core_path.glob("*.py"):
        if py_file.name != "__init__.py" and not py_file.name.startswith("._"):
            module_name = py_file.stem
            core_modules.append(module_name)

    print(f"\nüì¶ Modules athalia_core totaux: {len(core_modules)}")

    # Identifier les modules non int√©gr√©s
    integrated_modules = [module for module, _ in imports]
    non_integrated = [m for m in core_modules if m not in integrated_modules]

    print(f"\n‚ùå MODULES NON INT√âGR√âS ({len(non_integrated)}):")
    for module in non_integrated:
        print(f"  - {module}")

    # Calculer le score
    integration_score = len(integrated_modules) / len(core_modules) * 10
    print(f"\nüìà SCORE D'INT√âGRATION: {integration_score:.2f}/10")

    # Recommandations
    print("\nüéØ RECOMMANDATIONS:")
    if integration_score < 5.0:
        print("  ‚ö†Ô∏è Score faible - N√©cessite une am√©lioration urgente")

    if non_integrated:
        print(f"  üì¶ {len(non_integrated)} modules √† int√©grer")
        print("  üéØ Priorit√© (top 5):")
        for module in non_integrated[:5]:
            print(f"    - {module}")

    # V√©rifier les tests
    print("\nüß™ V√âRIFICATION DES TESTS:")
    test_files = list(Path("tests").glob("*orchestrator*"))
    test_files.extend(Path("tests").glob("*unified*"))

    if test_files:
        print(f"  ‚úÖ Tests trouv√©s: {len(test_files)}")
        for test_file in test_files:
            print(f"    - {test_file.name}")
    else:
        print("  ‚ùå Aucun test trouv√© pour l'orchestrateur")


if __name__ == "__main__":
    main()

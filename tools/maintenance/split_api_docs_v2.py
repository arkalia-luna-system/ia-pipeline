#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script am√©lior√© pour diviser le fichier API.md volumineux en sections logiques
"""

import os
import re
from pathlib import Path

def split_api_documentation():
    """Divise le fichier API.md en sections logiques"""
    
    api_file = Path("docs/API.md")
    api_dir = Path("docs/API")
    
    if not api_file.exists():
        print("‚ùå Fichier API.md non trouv√©")
        return False
    
    print(f"üìñ Lecture du fichier API.md ({api_file.stat().st_size / (1024*1024):.1f}MB)")
    
    # Lire le fichier par chunks pour √©viter la m√©moire
    sections = split_file_by_modules(api_file, api_dir)
    
    # Cr√©er l'index API
    create_api_index(sections, api_dir)
    
    print("‚úÖ Division de l'API termin√©e")
    return True

def split_file_by_modules(api_file, api_dir):
    """Divise le fichier par modules d√©tect√©s"""
    
    sections = {}
    current_module = None
    current_content = []
    
    with open(api_file, 'r', encoding='utf-8') as f:
        for line_num, line in enumerate(f):
            # D√©tecter les modules principaux
            if line.startswith('### ') and 'athalia_core' in line:
                # Sauvegarder le module pr√©c√©dent
                if current_module and current_content:
                    sections[current_module] = '\n'.join(current_content)
                
                # Nouveau module
                module_name = extract_module_name(line)
                current_module = module_name
                current_content = [line]
                
            elif line.startswith('### ') and any(keyword in line.lower() for keyword in ['orchestrator', 'unified', 'main']):
                # Sauvegarder le module pr√©c√©dent
                if current_module and current_content:
                    sections[current_module] = '\n'.join(current_content)
                
                # Nouveau module
                module_name = 'orchestrator'
                current_module = module_name
                current_content = [line]
                
            elif line.startswith('### ') and 'plugin' in line.lower():
                # Sauvegarder le module pr√©c√©dent
                if current_module and current_content:
                    sections[current_module] = '\n'.join(current_content)
                
                # Nouveau module
                module_name = 'plugins'
                current_module = module_name
                current_content = [line]
                
            elif line.startswith('### ') and 'template' in line.lower():
                # Sauvegarder le module pr√©c√©dent
                if current_module and current_content:
                    sections[current_module] = '\n'.join(current_content)
                
                # Nouveau module
                module_name = 'templates'
                current_module = module_name
                current_content = [line]
                
            elif line.startswith('# ') and 'overview' in line.lower():
                # Vue d'ensemble
                if current_module and current_content:
                    sections[current_module] = '\n'.join(current_content)
                
                current_module = 'overview'
                current_content = [line]
                
            else:
                # Ajouter √† la section courante
                if current_module:
                    current_content.append(line)
            
            # Afficher le progr√®s
            if line_num % 10000 == 0:
                print(f"üìñ Trait√© {line_num} lignes...")
    
    # Sauvegarder la derni√®re section
    if current_module and current_content:
        sections[current_module] = '\n'.join(current_content)
    
    # Cr√©er les fichiers
    create_api_files(sections, api_dir)
    
    return sections

def extract_module_name(line):
    """Extrait le nom du module depuis une ligne"""
    # Exemple: "### athalia_core.analytics" -> "analytics"
    match = re.search(r'athalia_core\.(\w+)', line)
    if match:
        return match.group(1)
    return 'unknown'

def create_api_files(sections, api_dir):
    """Cr√©e les fichiers de documentation API"""
    
    file_mapping = {
        'overview': 'README.md',
        'orchestrator': 'orchestrator.md',
        'plugins': 'plugins.md',
        'templates': 'templates.md'
    }
    
    for module, content in sections.items():
        if content.strip():
            # D√©terminer le nom du fichier
            if module in file_mapping:
                filename = file_mapping[module]
            else:
                filename = f'{module}.md'
            
            filepath = api_dir / filename
            
            # Cr√©er l'en-t√™te du fichier
            header = f"""# Documentation API - {module.replace('_', ' ').title()}

**Date :** 26 juillet 2025  
**Module :** {module}  
**Source :** API.md divis√©

---

"""
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(header + content)
            
            size_mb = len(content) / (1024*1024)
            print(f"‚úÖ Cr√©√© : {filepath} ({size_mb:.1f}MB)")

def create_api_index(sections, api_dir):
    """Cr√©e l'index de la documentation API"""
    
    index_content = """# üìö Documentation API - Index

**Date :** 26 juillet 2025  
**Statut :** API divis√©e en sections logiques

## üéØ Vue d'ensemble

Cette documentation API a √©t√© divis√©e en sections logiques pour am√©liorer la lisibilit√© et la maintenance.

## üìÅ Sections disponibles

"""
    
    for module in sorted(sections.keys()):
        if module == 'overview':
            description = 'Vue d\'ensemble et introduction'
            filename = 'README.md'
        elif module == 'orchestrator':
            description = 'Orchestrateur unifi√© et pipeline'
            filename = 'orchestrator.md'
        elif module == 'plugins':
            description = 'Syst√®me de plugins'
            filename = 'plugins.md'
        elif module == 'templates':
            description = 'Syst√®me de templates'
            filename = 'templates.md'
        else:
            description = f'Module {module}'
            filename = f'{module}.md'
        
        index_content += f"- [{description}]({filename})\n"
    
    index_content += f"""
## üîó Navigation

- [Documentation principale](../README.md)
- [Guide d'utilisation](../USAGE.md)
- [Guide d'installation](../INSTALLATION.md)

## üìä Statistiques

- **Sections cr√©√©es :** {len(sections)}
- **Fichier original :** API.md (16MB, 844k lignes)
- **Fichiers cr√©√©s :** Sections logiques et lisibles

---

**G√©n√©r√© automatiquement** - 26/07/2025
"""
    
    index_file = api_dir / 'INDEX.md'
    with open(index_file, 'w', encoding='utf-8') as f:
        f.write(index_content)
    
    print(f"‚úÖ Index cr√©√© : {index_file}")

if __name__ == "__main__":
    split_api_documentation() 
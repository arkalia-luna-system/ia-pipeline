#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
{{ project_name }} - API {{ api_framework | title }}
"""

import logging
from typing import Dict, Any, List
{% if api_framework == "flask" %}
from flask import Flask, request, jsonify
{% elif api_framework == "fastapi" %}
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
{% endif %}

logger = logging.getLogger(__name__)

{% if api_framework == "flask" %}
app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health_check():
    """Point de terminaison de santé"""
    return jsonify({"status": "healthy", "service": "{{ project_name }}"})

{% for endpoint in endpoints %}
@app.route('/{{ endpoint }}', methods=['GET'])
def get_{{ endpoint }}():
    """Récupérer la liste des {{ endpoint }}"""
    return jsonify({"{{ endpoint }}": []})

@app.route('/{{ endpoint }}', methods=['POST'])
def create_{{ endpoint }}():
    """Créer un nouveau {{ endpoint }}"""
    data = request.get_json()
    return jsonify({"message": "{{ endpoint }} créé", "data": data}), 201

@app.route('/{{ endpoint }}/<int:id>', methods=['GET'])
def get_{{ endpoint }}_by_id(id):
    """Récupérer un {{ endpoint }} par ID"""
    return jsonify({"id": id, "{{ endpoint }}": {}})

@app.route('/{{ endpoint }}/<int:id>', methods=['PUT'])
def update_{{ endpoint }}(id):
    """Mettre à jour un {{ endpoint }}"""
    data = request.get_json()
    return jsonify({"message": "{{ endpoint }} mis à jour", "id": id, "data": data})

@app.route('/{{ endpoint }}/<int:id>', methods=['DELETE'])
def delete_{{ endpoint }}(id):
    """Supprimer un {{ endpoint }}"""
    return jsonify({"message": "{{ endpoint }} supprimé", "id": id}), 204

{% endfor %}

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port={{ port | default(8000) }})

{% elif api_framework == "fastapi" %}
app = FastAPI(title="{{ project_name }}", version="1.0.0")

@app.get("/health")
async def health_check():
    """Point de terminaison de santé"""
    return {"status": "healthy", "service": "{{ project_name }}"}

{% for endpoint in endpoints %}
@app.get("/{{ endpoint }}")
async def get_{{ endpoint }}():
    """Récupérer la liste des {{ endpoint }}"""
    return {"{{ endpoint }}": []}

@app.post("/{{ endpoint }}")
async def create_{{ endpoint }}():
    """Créer un nouveau {{ endpoint }}"""
    return {"message": "{{ endpoint }} créé"}

@app.get("/{{ endpoint }}/{id}")
async def get_{{ endpoint }}_by_id(id: int):
    """Récupérer un {{ endpoint }} par ID"""
    return {"id": id, "{{ endpoint }}": {}}

@app.put("/{{ endpoint }}/{id}")
async def update_{{ endpoint }}(id: int):
    """Mettre à jour un {{ endpoint }}"""
    return {"message": "{{ endpoint }} mis à jour", "id": id}

@app.delete("/{{ endpoint }}/{id}")
async def delete_{{ endpoint }}(id: int):
    """Supprimer un {{ endpoint }}"""
    return {"message": "{{ endpoint }} supprimé", "id": id}

{% endfor %}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port={{ port | default(8000) }})
{% endif %} 
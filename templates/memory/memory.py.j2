"""
Module de gestion de mémoire pour {{ project_name }}
Auteur: {{ author }}
Version: {{ version }}
"""

import json
import os
from typing import Dict, Any, Optional
from datetime import datetime

class MemoryManager:
    """Gestionnaire de mémoire pour {{ project_name }}"""
    
    def __init__(self, memory_file: str = "memory.json"):
        self.memory_file = memory_file
        self.memory = self._load_memory()
    
    def _load_memory(self) -> Dict[str, Any]:
        """Charge la mémoire depuis le fichier"""
        if os.path.exists(self.memory_file):
            try:
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                pass
        return {"data": {}, "metadata": {"created": datetime.now().isoformat()}}
    
    def save_memory(self) -> None:
        """Sauvegarde la mémoire dans le fichier"""
        try:
            with open(self.memory_file, 'w', encoding='utf-8') as f:
                json.dump(self.memory, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"Erreur lors de la sauvegarde: {e}")
    
    def get(self, key: str, default: Any = None) -> Any:
        """Récupère une valeur de la mémoire"""
        return self.memory["data"].get(key, default)
    
    def set(self, key: str, value: Any) -> None:
        """Définit une valeur dans la mémoire"""
        self.memory["data"][key] = value
        self.memory["metadata"]["last_updated"] = datetime.now().isoformat()
    
    def delete(self, key: str) -> bool:
        """Supprime une clé de la mémoire"""
        if key in self.memory["data"]:
            del self.memory["data"][key]
            return True
        return False
    
    def clear(self) -> None:
        """Vide toute la mémoire"""
        self.memory["data"] = {}
        self.memory["metadata"]["cleared"] = datetime.now().isoformat()
    
    def get_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de la mémoire"""
        return {
            "total_keys": len(self.memory["data"]),
            "memory_size": len(json.dumps(self.memory["data"])),
            "created": self.memory["metadata"].get("created"),
            "last_updated": self.memory["metadata"].get("last_updated")
        } 
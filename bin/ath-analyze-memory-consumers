#!/bin/bash
# ath-analyze-memory-consumers
# Script d'analyse compl√®te des consommateurs de RAM
# Auteur : Athalia
# Version : 1.0

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üîç Analyse Compl√®te des Consommateurs de RAM${NC}"
echo "=============================================="
echo "Date: $(date)"
echo ""

# Fonction d'analyse des processus gourmands
analyze_heavy_processes() {
    echo -e "${CYAN}üìä Processus Gourmands en RAM${NC}"
    echo "--------------------------------"
    
    echo "Top 15 processus par utilisation m√©moire:"
    ps aux | sort -k6 -nr | head -16 | tail -15 | awk '{printf "%-8s %-20s %s\n", $6/1024 "MB", $11, $2}'
    
    echo ""
    echo "Processus Python actifs:"
    ps aux | grep python | grep -v grep | awk '{printf "%-8s %-20s %s\n", $6/1024 "MB", $11, $2}' | head -10
    
    echo ""
    echo "Processus Node.js actifs:"
    ps aux | grep node | grep -v grep | awk '{printf "%-8s %-20s %s\n", $6/1024 "MB", $11, $2}' | head -10
}

# Fonction d'analyse des services syst√®me
analyze_system_services() {
    echo ""
    echo -e "${CYAN}‚öôÔ∏è  Services Syst√®me Gourmands${NC}"
    echo "--------------------------------"
    
    # Services gourmands connus
    local heavy_services=(
        "mds_stores"
        "mdsync"
        "XprotectService"
        "WindowServer"
        "supervisord"
        "redis-server"
        "fail2ban-server"
    )
    
    for service in "${heavy_services[@]}"; do
        local memory=$(ps aux | grep "$service" | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
        local cpu=$(ps aux | grep "$service" | grep -v grep | awk '{sum+=$3} END {print sum}')
        
        if [ ! -z "$memory" ] && [ "$memory" != "0" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  $service: ${memory%.*} MB RAM, ${cpu%.*}% CPU${NC}"
        fi
    done
}

# Fonction d'analyse des processus de d√©veloppement
analyze_dev_processes() {
    echo ""
    echo -e "${CYAN}üíª Processus de D√©veloppement${NC}"
    echo "--------------------------------"
    
    # Processus de d√©veloppement
    local dev_processes=(
        "cursor"
        "code"
        "pytest"
        "mypy"
        "ruff"
        "black"
        "isort"
        "eslint"
        "typescript"
        "node"
        "npm"
        "yarn"
        "docker"
        "java"
        "ruby"
        "php"
    )
    
    for proc in "${dev_processes[@]}"; do
        local count=$(ps aux | grep -i "$proc" | grep -v grep | wc -l)
        local memory=$(ps aux | grep -i "$proc" | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
        
        if [ $count -gt 0 ]; then
            echo -e "${BLUE}üìù $proc: $count processus, ${memory%.*} MB RAM${NC}"
        fi
    done
}

# Fonction d'analyse des processus en arri√®re-plan
analyze_background_processes() {
    echo ""
    echo -e "${CYAN}üîÑ Processus en Arri√®re-plan${NC}"
    echo "--------------------------------"
    
    # Processus avec beaucoup de threads
    echo "Processus avec beaucoup de threads:"
    ps aux | awk '$7 > 20 {printf "%-8s %-20s %s threads\n", $7, $11, $2}' | head -10
    
    echo ""
    echo "Processus avec beaucoup de ports ouverts:"
    lsof | awk '{print $1}' | sort | uniq -c | sort -nr | head -10 | awk '{printf "%-8s %s\n", $1, $2}'
}

# Fonction d'analyse des processus automatiques
analyze_automatic_processes() {
    echo ""
    echo -e "${CYAN}ü§ñ Processus Automatiques${NC}"
    echo "--------------------------------"
    
    # Services launchd
    echo "Services launchd actifs:"
    launchctl list | grep -E "(athalia|test|python|node)" | head -10
    
    echo ""
    echo "Processus avec 'daemon' ou 'server' dans le nom:"
    ps aux | grep -E "(daemon|server)" | grep -v grep | awk '{printf "%-8s %-20s %s\n", $6/1024 "MB", $11, $2}' | head -10
}

# Fonction d'analyse des fichiers de test gourmands
analyze_test_files() {
    echo ""
    echo -e "${CYAN}üß™ Fichiers de Test Gourmands${NC}"
    echo "--------------------------------"
    
    # Fichiers avec des boucles infinies ou des processus
    echo "Fichiers Python avec des boucles ou processus:"
    find . -name "*.py" -exec grep -l "while.*True\|daemon.*True\|threading\|multiprocessing" {} \; | head -10
    
    echo ""
    echo "Fichiers avec des serveurs ou autocomplete:"
    find . -name "*.py" -exec grep -l "autocomplete\|server\|uvicorn\|fastapi" {} \; | head -10
    
    echo ""
    echo "Scripts shell avec des boucles:"
    find . -name "*.sh" -exec grep -l "while\|sleep\|watch\|monitor" {} \; | head -10
}

# Fonction d'analyse des processus Cursor sp√©cifiques
analyze_cursor_processes() {
    echo ""
    echo -e "${CYAN}üéØ Processus Cursor D√©taill√©s${NC}"
    echo "--------------------------------"
    
    echo "Processus Cursor par type:"
    ps aux | grep -i cursor | grep -v grep | awk '{print $6/1024 " MB - " $11}' | sort -nr | head -10
    
    echo ""
    echo "Extensions Cursor gourmandes:"
    local heavy_extensions=(
        "continue.continue"
        "anysphere.cursorpyright"
        "github.vscode-github-actions"
        "eamodio.gitlens"
        "streetsidesoftware.code-spell-checker"
        "dbaeumer.vscode-eslint"
    )
    
    for ext in "${heavy_extensions[@]}"; do
        local memory=$(ps aux | grep "$ext" | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
        if [ ! -z "$memory" ] && [ "$memory" != "0" ]; then
            echo -e "${RED}‚ö†Ô∏è  $ext: ${memory%.*} MB RAM${NC}"
        fi
    done
}

# Fonction d'analyse des processus de cache
analyze_cache_processes() {
    echo ""
    echo -e "${CYAN}üíæ Processus de Cache${NC}"
    echo "--------------------------------"
    
    # Processus de cache connus
    local cache_processes=(
        "redis"
        "memcached"
        "cache"
        "supervisor"
        "fail2ban"
    )
    
    for proc in "${cache_processes[@]}"; do
        local memory=$(ps aux | grep "$proc" | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
        local cpu=$(ps aux | grep "$proc" | grep -v grep | awk '{sum+=$3} END {print sum}')
        
        if [ ! -z "$memory" ] && [ "$memory" != "0" ]; then
            echo -e "${PURPLE}üíæ $proc: ${memory%.*} MB RAM, ${cpu%.*}% CPU${NC}"
        fi
    done
}

# Fonction de recommandations
generate_recommendations() {
    echo ""
    echo -e "${PURPLE}üí° Recommandations d'Optimisation${NC}"
    echo "=================================="
    
    # Analyser les processus les plus gourmands
    local top_process=$(ps aux | sort -k6 -nr | head -2 | tail -1 | awk '{print $11}')
    local top_memory=$(ps aux | sort -k6 -nr | head -2 | tail -1 | awk '{print $6/1024}')
    
    echo "Processus le plus gourmand: $top_process (${top_memory%.*} MB)"
    
    echo ""
    echo "üî¥ Actions imm√©diates recommand√©es:"
    
    # Cursor
    local cursor_memory=$(ps aux | grep -i cursor | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
    if [ ! -z "$cursor_memory" ] && (( $(echo "$cursor_memory > 1000" | bc -l) )); then
        echo "  1. Nettoyer Cursor: ./bin/ath-clean-cursor-memory"
        echo "  2. D√©sactiver les extensions gourmandes"
        echo "  3. Red√©marrer Cursor"
    fi
    
    # Services syst√®me
    local mds_memory=$(ps aux | grep mds_stores | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
    if [ ! -z "$mds_memory" ] && (( $(echo "$mds_memory > 100" | bc -l) )); then
        echo "  4. Attendre la fin de l'indexation Spotlight"
        echo "  5. Exclure les dossiers de d√©veloppement de Spotlight"
    fi
    
    # Processus de d√©veloppement
    local python_count=$(ps aux | grep python | grep -v grep | wc -l)
    if [ $python_count -gt 10 ]; then
        echo "  6. Fermer les processus Python inutilis√©s"
        echo "  7. Arr√™ter les tests en cours"
    fi
    
    echo ""
    echo "üõ†Ô∏è  Commandes utiles:"
    echo "  ./bin/ath-clean-cursor-memory     # Nettoyer Cursor"
    echo "  ./bin/ark-process-check.sh        # Analyser et tuer des processus"
    echo "  pkill -f 'python.*test'           # Tuer les tests Python"
    echo "  sudo purge                        # Vider le cache syst√®me"
    echo "  top -o mem                        # Voir l'utilisation m√©moire"
}

# Fonction de g√©n√©ration du rapport
generate_report() {
    local report_file="$HOME/memory_consumers_analysis_$(date +%Y%m%d_%H%M%S).md"
    
    echo ""
    echo -e "${BLUE}üìä G√©n√©ration du rapport...${NC}"
    
    {
        echo "# Analyse des Consommateurs de RAM"
        echo "Date: $(date)"
        echo ""
        echo "## R√©sum√©"
        echo ""
        echo "### Processus les plus gourmands:"
        ps aux | sort -k6 -nr | head -10 | awk '{print "- " $6/1024 " MB: " $11 " (PID: " $2 ")"}'
        echo ""
        echo "### Services syst√®me actifs:"
        ps aux | grep -E "(mds_stores|mdsync|XprotectService)" | grep -v grep | awk '{print "- " $6/1024 " MB: " $11}'
        echo ""
        echo "### Processus de d√©veloppement:"
        ps aux | grep -E "(python|node|cursor)" | grep -v grep | awk '{print "- " $6/1024 " MB: " $11}' | head -10
        echo ""
        echo "## Recommandations"
        echo "1. Nettoyer Cursor r√©guli√®rement"
        echo "2. Fermer les processus de test inutilis√©s"
        echo "3. Surveiller les services syst√®me"
        echo "4. Optimiser les extensions Cursor"
    } > "$report_file"
    
    echo -e "${GREEN}‚úÖ Rapport g√©n√©r√©: $report_file${NC}"
}

# Fonction principale
main() {
    case "${1:-}" in
        --help|-h)
            echo "Usage: ath-analyze-memory-consumers [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help, -h     Afficher cette aide"
            echo "  --quick        Analyse rapide"
            echo ""
            echo "Description:"
            echo "  Analyse compl√®te des consommateurs de RAM"
            exit 0
            ;;
    esac
    
    analyze_heavy_processes
    analyze_system_services
    analyze_dev_processes
    analyze_background_processes
    analyze_automatic_processes
    analyze_test_files
    analyze_cursor_processes
    analyze_cache_processes
    generate_recommendations
    generate_report
    
    echo ""
    echo -e "${GREEN}üéØ Analyse termin√©e !${NC}"
    echo "Consultez le rapport g√©n√©r√© pour plus de d√©tails."
}

# Ex√©cution
main "$@" 
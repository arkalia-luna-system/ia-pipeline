#!/bin/bash
# Script de commit intelligent Athalia
# Formate automatiquement, ajoute les fichiers et committe

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables
COMMIT_MESSAGE=""
DRY_RUN=false
VERBOSE=false
AUTO_PUSH=false

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üöÄ Commit intelligent Athalia${NC}"
    echo -e "${BLUE}üìã Formatage automatique + commit + push${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -m|--message)
            COMMIT_MESSAGE="$2"
            shift 2
            ;;
        --dry-run|-d)
            DRY_RUN=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --push|-p)
            AUTO_PUSH=true
            shift
            ;;
        --help|-h)
            echo "Usage: ./bin/ath-smart-commit [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  -m, --message TEXT  Message de commit (obligatoire)"
            echo "  --dry-run, -d       Mode simulation (ne fait rien)"
            echo "  --verbose, -v       Affichage d√©taill√©"
            echo "  --push, -p          Push automatique apr√®s commit"
            echo "  --help, -h          Affiche cette aide"
            echo ""
            echo "Exemples:"
            echo "  ./bin/ath-smart-commit -m \"feat: nouvelle fonctionnalit√©\""
            echo "  ./bin/ath-smart-commit -m \"fix: correction bug\" --push"
            echo "  ./bin/ath-smart-commit -m \"docs: mise √† jour\" --dry-run"
            exit 0
            ;;
        *)
            print_error "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# V√©rification du message de commit
if [ -z "$COMMIT_MESSAGE" ]; then
    print_error "Message de commit obligatoire. Utilisez -m ou --message"
    exit 1
fi

# Fonction principale
main() {
    print_header

    # √âtape 1: V√©rification de l'√©tat Git
    print_section "V√©rification de l'√©tat Git"
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Pas dans un d√©p√¥t Git"
        exit 1
    fi

    # V√©rifier s'il y a des changements
    if [ -z "$(git status --porcelain)" ]; then
        print_warning "Aucun changement d√©tect√©"
        exit 0
    fi

    print_success "√âtat Git OK"

    if [ "$DRY_RUN" = true ]; then
        print_warning "Mode simulation - aucune modification effectu√©e"
        print_info "Changements d√©tect√©s:"
        git status --short
        exit 0
    fi

    # √âtape 2: Formatage automatique
    print_section "Formatage automatique"
    if [ -f "./bin/ath-auto-format" ]; then
        if [ "$VERBOSE" = true ]; then
            ./bin/ath-auto-format --verbose
        else
            ./bin/ath-auto-format
        fi
        print_success "Formatage termin√©"
    else
        print_warning "Script ath-auto-format non trouv√©, formatage ignor√©"
    fi

    # √âtape 3: Ajout de tous les fichiers modifi√©s
    print_section "Ajout des fichiers modifi√©s"
    git add .
    print_success "Fichiers ajout√©s au staging"

    # √âtape 4: V√©rification finale
    print_section "V√©rification finale"
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM || true)
    if [ -z "$STAGED_FILES" ]; then
        print_warning "Aucun fichier en staging apr√®s formatage"
        exit 0
    fi

    print_info "Fichiers en staging:"
    for file in $STAGED_FILES; do
        echo "  - $file"
    done
    echo

    # √âtape 5: Commit
    print_section "Commit"
    if git commit -m "$COMMIT_MESSAGE"; then
        print_success "Commit cr√©√© avec succ√®s"
    else
        print_error "Erreur lors du commit"
        exit 1
    fi

    # √âtape 6: Push automatique (si demand√©)
    if [ "$AUTO_PUSH" = true ]; then
        print_section "Push automatique"
        CURRENT_BRANCH=$(git branch --show-current)
        print_info "Push vers la branche: $CURRENT_BRANCH"

        if git push origin "$CURRENT_BRANCH"; then
            print_success "Push r√©ussi"
        else
            print_error "Erreur lors du push"
            exit 1
        fi
    fi

    # √âtape 7: R√©sum√©
    echo
    print_success "üéâ Commit intelligent termin√© !"
    echo
    print_info "üìã R√©sum√©:"
    print_info "  - Formatage automatique: ‚úÖ"
    print_info "  - Fichiers ajout√©s: ‚úÖ"
    print_info "  - Commit cr√©√©: ‚úÖ"
    if [ "$AUTO_PUSH" = true ]; then
        print_info "  - Push effectu√©: ‚úÖ"
    else
        print_info "  - Push: ‚è≠Ô∏è  (utilisez --push pour automatiser)"
    fi
    echo
    print_info "üí° Prochaines √©tapes:"
    if [ "$AUTO_PUSH" = false ]; then
        print_info "  - git push origin $(git branch --show-current)"
    fi
    print_info "  - ./bin/ath-test.py                    # Tests complets"
    print_info "  - ./bin/ath-clean                      # Nettoyage complet"
    echo
}

# Ex√©cution
main "$@"

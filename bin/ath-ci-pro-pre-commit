#!/bin/bash
# Script de pr√©-commit CI/CD professionnel Athalia
# Int√®gre les standards CI/CD pro dans les v√©rifications pr√©-commit

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Variables
CI_PRO_LEVEL=1
AUTO_FIX=false
SKIP_SECURITY=false
SKIP_PERFORMANCE=false
VERBOSE=false
STRICT_MODE=false

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üîí PR√â-COMMIT CI/CD PROFESSIONNEL ATHALIA${NC}"
    echo -e "${CYAN}üìã Niveau $CI_PRO_LEVEL - Standards professionnels${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_ci_pro() {
    echo -e "${PURPLE}üîí CI/CD Pro: $1${NC}"
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --level|-l)
            CI_PRO_LEVEL="$2"
            shift 2
            ;;
        --auto-fix|-a)
            AUTO_FIX=true
            shift
            ;;
        --skip-security)
            SKIP_SECURITY=true
            shift
            ;;
        --skip-performance)
            SKIP_PERFORMANCE=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --strict|-s)
            STRICT_MODE=true
            shift
            ;;
        --help|-h)
            echo "Usage: ./bin/ath-ci-pro-pre-commit [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --level, -l <1-5>     Niveau CI/CD pro (d√©faut: 1)"
            echo "  --auto-fix, -a        Correction automatique"
            echo "  --skip-security       Ignore les v√©rifications de s√©curit√©"
            echo "  --skip-performance    Ignore les v√©rifications de performance"
            echo "  --verbose, -v         Affichage d√©taill√©"
            echo "  --strict, -s          Mode strict (bloque tout)"
            echo "  --help, -h            Affiche cette aide"
            echo ""
            echo "Niveaux CI/CD Pro:"
            echo "  1: Tests de base (obligatoire)"
            echo "  2: Tests de s√©curit√© (obligatoire)"
            echo "  3: Tests de performance (optionnel)"
            echo "  4: Tests avanc√©s (optionnel)"
            echo "  5: Tests complets (optionnel)"
            exit 0
            ;;
        *)
            print_error "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# Validation du niveau
if ! [[ "$CI_PRO_LEVEL" =~ ^[1-5]$ ]]; then
    print_error "Niveau invalide: $CI_PRO_LEVEL (doit √™tre 1-5)"
    exit 1
fi

# Fonction de v√©rification de base (Niveau 1)
check_level1_basic() {
    print_section "Niveau 1 - Tests de Base (Obligatoire)"
    
    # V√©rification Git
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Pas dans un d√©p√¥t Git"
        return 1
    fi
    
    # Fichiers modifi√©s
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
    if [ -z "$STAGED_FILES" ]; then
        print_info "Aucun fichier Python modifi√©"
        return 0
    fi
    
    # Linting basique
    print_ci_pro "V√©rification du linting..."
    if echo "$STAGED_FILES" | xargs -r flake8 --config=config/.flake8 --max-line-length=88 --extend-ignore=E203,W503,E501,W291,W293,F401,F541,F841,E712,E731,E402,F601,E302,W292,E722 2>/dev/null; then
        print_success "Linting OK"
    else
        print_error "Erreurs de linting d√©tect√©es"
        if [ "$AUTO_FIX" = true ]; then
            print_info "Correction automatique..."
            echo "$STAGED_FILES" | xargs -r black --line-length=88 --preview
            print_success "Linting corrig√©"
        else
            return 1
        fi
    fi
    
    # Syntaxe Python
    print_ci_pro "V√©rification de la syntaxe Python..."
    for file in $STAGED_FILES; do
        if [ -f "$file" ]; then
            python -m py_compile "$file" || {
                print_error "Erreur de syntaxe dans $file"
                return 1
            }
        fi
    done
    print_success "Syntaxe Python OK"
    
    # Imports essentiels
    print_ci_pro "V√©rification des imports essentiels..."
    python -c "
import sys
sys.path.insert(0, '.')
errors = []
modules = ['athalia_core.audit', 'athalia_core.cleanup', 'athalia_core.analytics']
for module in modules:
    try:
        __import__(module)
    except ImportError as e:
        errors.append(f'{module}: {e}')
if len(errors) > 1:
    print('‚ùå Erreurs d\'imports:', errors)
    sys.exit(1)
print('‚úÖ Imports essentiels OK')
" || return 1
    
    print_success "Niveau 1 - Tests de base valid√©s"
    return 0
}

# Fonction de v√©rification de s√©curit√© (Niveau 2)
check_level2_security() {
    if [ "$SKIP_SECURITY" = true ]; then
        print_info "V√©rifications de s√©curit√© ignor√©es"
        return 0
    fi
    
    print_section "Niveau 2 - Tests de S√©curit√© (Obligatoire)"
    
    # Scan Bandit basique
    print_ci_pro "Scan de s√©curit√© avec Bandit..."
    if command -v bandit >/dev/null 2>&1; then
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
        if [ -n "$STAGED_FILES" ]; then
            if echo "$STAGED_FILES" | xargs -r bandit -r . -f json -o /tmp/bandit_report.json 2>/dev/null; then
                print_success "Scan Bandit OK"
            else
                print_warning "Vuln√©rabilit√©s de s√©curit√© d√©tect√©es"
                if [ "$STRICT_MODE" = true ]; then
                    print_error "Mode strict activ√© - commit bloqu√©"
                    return 1
                fi
            fi
        fi
    else
        print_warning "Bandit non install√© - scan de s√©curit√© ignor√©"
    fi
    
    # Tests de s√©curit√© sp√©cifiques
    print_ci_pro "Tests de s√©curit√© sp√©cifiques..."
    if python -m pytest tests/test_security_patterns.py -q >/dev/null 2>&1; then
        print_success "Tests de s√©curit√© OK"
    else
        print_warning "Probl√®mes de s√©curit√© d√©tect√©s"
        if [ "$STRICT_MODE" = true ]; then
            print_error "Mode strict activ√© - commit bloqu√©"
            return 1
        fi
    fi
    
    print_success "Niveau 2 - Tests de s√©curit√© valid√©s"
    return 0
}

# Fonction de v√©rification de performance (Niveau 3)
check_level3_performance() {
    if [ "$SKIP_PERFORMANCE" = true ]; then
        print_info "V√©rifications de performance ignor√©es"
        return 0
    fi
    
    if [ "$CI_PRO_LEVEL" -lt 3 ]; then
        return 0
    fi
    
    print_section "Niveau 3 - Tests de Performance (Optionnel)"
    
    # Tests de performance basiques
    print_ci_pro "Tests de performance basiques..."
    if python -m pytest tests/test_performance_optimization.py -q >/dev/null 2>&1; then
        print_success "Tests de performance OK"
    else
        print_warning "Probl√®mes de performance d√©tect√©s"
        if [ "$STRICT_MODE" = true ]; then
            print_error "Mode strict activ√© - commit bloqu√©"
            return 1
        fi
    fi
    
    print_success "Niveau 3 - Tests de performance valid√©s"
    return 0
}

# Fonction de v√©rification avanc√©e (Niveau 4)
check_level4_advanced() {
    if [ "$CI_PRO_LEVEL" -lt 4 ]; then
        return 0
    fi
    
    print_section "Niveau 4 - Tests Avanc√©s (Optionnel)"
    
    # Couverture de code basique
    print_ci_pro "V√©rification de la couverture de code..."
    if command -v coverage >/dev/null 2>&1; then
        STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
        if [ -n "$STAGED_FILES" ]; then
            # Test de couverture basique
            if python -m pytest tests/test_coverage_threshold.py -q >/dev/null 2>&1; then
                print_success "Couverture de code OK"
            else
                print_warning "Couverture de code insuffisante"
            fi
        fi
    else
        print_info "Coverage non install√© - v√©rification ignor√©e"
    fi
    
    print_success "Niveau 4 - Tests avanc√©s valid√©s"
    return 0
}

# Fonction de v√©rification compl√®te (Niveau 5)
check_level5_complete() {
    if [ "$CI_PRO_LEVEL" -lt 5 ]; then
        return 0
    fi
    
    print_section "Niveau 5 - Tests Complets (Optionnel)"
    
    # Tests d'int√©gration
    print_ci_pro "Tests d'int√©gration..."
    if python -m pytest tests/test_integration/ -q >/dev/null 2>&1; then
        print_success "Tests d'int√©gration OK"
    else
        print_warning "Tests d'int√©gration √©chou√©s"
    fi
    
    print_success "Niveau 5 - Tests complets valid√©s"
    return 0
}

# Fonction principale
main() {
    print_header
    
    # V√©rifications par niveau
    local exit_code=0
    
    # Niveau 1 - Obligatoire
    if ! check_level1_basic; then
        exit_code=1
    fi
    
    # Niveau 2 - Obligatoire
    if [ $exit_code -eq 0 ] && ! check_level2_security; then
        exit_code=1
    fi
    
    # Niveau 3 - Optionnel
    if [ $exit_code -eq 0 ] && ! check_level3_performance; then
        exit_code=1
    fi
    
    # Niveau 4 - Optionnel
    if [ $exit_code -eq 0 ] && ! check_level4_advanced; then
        exit_code=1
    fi
    
    # Niveau 5 - Optionnel
    if [ $exit_code -eq 0 ] && ! check_level5_complete; then
        exit_code=1
    fi
    
    # R√©sum√© final
    echo
    if [ $exit_code -eq 0 ]; then
        print_success "üéâ PR√â-COMMIT CI/CD PRO R√âUSSI !"
        print_info "üìä Niveau $CI_PRO_LEVEL valid√©"
        print_info "üöÄ Commit autoris√©"
    else
        print_error "‚ùå PR√â-COMMIT CI/CD PRO √âCHOU√â"
        print_info "üîß Corrections n√©cessaires avant commit"
        print_info "üí° Utilisez --auto-fix pour correction automatique"
        print_info "üí° Utilisez --strict pour mode strict"
    fi
    
    echo
    print_info "üìã Commandes utiles:"
    print_info "  - ./bin/ath-ci-pro-pre-commit --auto-fix"
    print_info "  - ./bin/ath-ci-pro-pre-commit --level 2"
    print_info "  - ./bin/ath-ci-pro-pre-commit --strict"
    echo
    
    exit $exit_code
}

# Ex√©cution
main "$@" 
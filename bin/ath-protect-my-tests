#!/bin/bash
# Script de protection des tests l√©gitimes
# Emp√™che la suppression des tests cr√©√©s manuellement

set -e

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TESTS_DIR="$PROJECT_ROOT/tests"

echo "üõ°Ô∏è Protection des tests l√©gitimes activ√©e..."

# Liste des tests √† prot√©ger (ajoutez vos tests ici)
PROTECTED_TESTS=(
    "test_ai_robust.py"
    "test_ai_robust_unit.py"
    "test_ai_robust_integration.py"
    "test_cache_simple.py"
    "test_performance_optimization.py"
    "test_benchmark_critical.py"
    "integration/test_cli_robustesse.py"
    "integration/test_end_to_end.py"
    "integration/test_yaml_validity.py"
    "test_cleanup.py"
    "test_audit.py"
    "test_i18n.py"
    "audit_complet_dossiers.py"
    "debug_correction.py"
    "correction_cha√Ænes.py"
    "correction_finale.py"
    "test_plugin_complet.py"
    "test_plugins.py"
    "test_adaptive_distillation.py"
    "optimize_performance.py"
)

# Fonction pour v√©rifier si un test est prot√©g√©
is_protected_test() {
    local test_file="$1"
    for protected in "${PROTECTED_TESTS[@]}"; do
        if [[ "$test_file" == "$protected" ]]; then
            return 0  # Test prot√©g√©
        fi
    done
    return 1  # Test non prot√©g√©
}

# Fonction pour surveiller les suppressions
monitor_deletions() {
    echo "üëÄ Surveillance des suppressions de tests..."

    # Utiliser fswatch si disponible
    if command -v fswatch >/dev/null 2>&1; then
        fswatch -o "$TESTS_DIR" | while read num; do
            # V√©rifier les fichiers supprim√©s
            for test_file in "${PROTECTED_TESTS[@]}"; do
                if [[ ! -f "$TESTS_DIR/$test_file" ]]; then
                    echo "üö® ALERTE: Test prot√©g√© supprim√©: $test_file"
                    echo "‚ö†Ô∏è V√©rifiez les scripts de nettoyage automatique"
                fi
            done
        done
    else
        echo "‚ö†Ô∏è fswatch non disponible. Surveillance manuelle recommand√©e."
        echo "üí° Installez fswatch: brew install fswatch"
    fi
}

# Fonction pour lister les tests prot√©g√©s
list_protected_tests() {
    echo "üìã Tests prot√©g√©s:"
    for test_file in "${PROTECTED_TESTS[@]}"; do
        if [[ -f "$TESTS_DIR/$test_file" ]]; then
            echo "  ‚úÖ $test_file"
        else
            echo "  ‚ùå $test_file (MANQUANT)"
        fi
    done
}

# Fonction pour ajouter un test √† la protection
add_protected_test() {
    local test_file="$1"
    if [[ -z "$test_file" ]]; then
        echo "‚ùå Usage: $0 add <nom_du_test.py>"
        exit 1
    fi

    # V√©rifier si le test existe
    if [[ ! -f "$TESTS_DIR/$test_file" ]]; then
        echo "‚ùå Test non trouv√©: $test_file"
        exit 1
    fi

    # Ajouter √† la liste (n√©cessite modification manuelle du script)
    echo "üìù Pour ajouter $test_file √† la protection:"
    echo "   1. √âditez ce script"
    echo "   2. Ajoutez \"$test_file\" √† la liste PROTECTED_TESTS"
    echo "   3. Relancez la protection"
}

# Menu principal
case "${1:-}" in
    "monitor")
        monitor_deletions
        ;;
    "list")
        list_protected_tests
        ;;
    "add")
        add_protected_test "$2"
        ;;
    *)
        echo "üõ°Ô∏è Protection des tests l√©gitimes"
        echo ""
        echo "Usage:"
        echo "  $0 monitor    - Surveiller les suppressions"
        echo "  $0 list       - Lister les tests prot√©g√©s"
        echo "  $0 add <test> - Ajouter un test √† la protection"
        echo ""
        list_protected_tests
        ;;
esac

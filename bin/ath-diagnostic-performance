#!/bin/bash
# ath-diagnostic-performance
# Script de diagnostic complet des performances du Mac
# Auteur : Athalia
# Version : 1.0

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üîç Diagnostic Performance Mac${NC}"
echo "=================================="
echo "Date: $(date)"
echo ""

# Fonction d'analyse CPU
analyze_cpu() {
    echo -e "${CYAN}üìä Analyse CPU${NC}"
    echo "----------------"
    
    # CPU total utilis√©
    local cpu_total=$(ps aux | awk '{print $3}' | tail -n +2 | awk '{sum+=$1} END {print sum}')
    echo "CPU total utilis√©: ${cpu_total}%"
    
    # Top 5 processus CPU
    echo ""
    echo "Top 5 processus CPU:"
    ps aux | sort -k3 -nr | head -6 | tail -5 | awk '{printf "%-8s %-20s %s\n", $3"%", $11, $2}'
    
    # Load average
    local load_avg=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
    echo ""
    echo "Load average: $load_avg"
    
    # √âvaluation
    if (( $(echo "$cpu_total > 200" | bc -l) )); then
        echo -e "${RED}üî¥ CPU tr√®s sollicit√© !${NC}"
    elif (( $(echo "$cpu_total > 100" | bc -l) )); then
        echo -e "${YELLOW}‚ö†Ô∏è  CPU mod√©r√©ment sollicit√©${NC}"
    else
        echo -e "${GREEN}‚úÖ CPU dans les limites normales${NC}"
    fi
}

# Fonction d'analyse m√©moire
analyze_memory() {
    echo ""
    echo -e "${CYAN}üíæ Analyse M√©moire${NC}"
    echo "-------------------"
    
    # Statistiques m√©moire
    local vm_stats=$(vm_stat | grep -E "(Pages free|Pages active|Pages inactive|Pages wired down|Pages stored in compressor)")
    
    # Calculer la m√©moire libre
    local pages_free=$(echo "$vm_stats" | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
    local pages_active=$(echo "$vm_stats" | grep "Pages active" | awk '{print $3}' | sed 's/\.//')
    local pages_inactive=$(echo "$vm_stats" | grep "Pages inactive" | awk '{print $3}' | sed 's/\.//')
    local pages_wired=$(echo "$vm_stats" | grep "Pages wired down" | awk '{print $4}' | sed 's/\.//')
    local pages_compressed=$(echo "$vm_stats" | grep "Pages stored in compressor" | awk '{print $5}' | sed 's/\.//')
    
    # Convertir en MB (page size = 16384 bytes)
    local mem_free=$((pages_free * 16384 / 1024 / 1024))
    local mem_active=$((pages_active * 16384 / 1024 / 1024))
    local mem_inactive=$((pages_inactive * 16384 / 1024 / 1024))
    local mem_wired=$((pages_wired * 16384 / 1024 / 1024))
    local mem_compressed=$((pages_compressed * 16384 / 1024 / 1024))
    
    echo "M√©moire libre: ${mem_free} MB"
    echo "M√©moire active: ${mem_active} MB"
    echo "M√©moire inactive: ${mem_inactive} MB"
    echo "M√©moire wired: ${mem_wired} MB"
    echo "M√©moire compress√©e: ${mem_compressed} MB"
    
    # Top 5 processus m√©moire
    echo ""
    echo "Top 5 processus m√©moire:"
    ps aux | sort -k6 -nr | head -6 | tail -5 | awk '{printf "%-8s %-20s %s\n", $6/1024 "MB", $11, $2}'
    
    # √âvaluation
    if [ $mem_free -lt 1000 ]; then
        echo -e "${RED}üî¥ M√©moire libre tr√®s faible !${NC}"
    elif [ $mem_free -lt 2000 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  M√©moire libre faible${NC}"
    else
        echo -e "${GREEN}‚úÖ M√©moire libre suffisante${NC}"
    fi
}

# Fonction d'analyse disque
analyze_disk() {
    echo ""
    echo -e "${CYAN}üíø Analyse Disque${NC}"
    echo "------------------"
    
    # I/O disque
    local iostat_output=$(iostat -d 1 1 | tail -1)
    local disk0_tps=$(echo "$iostat_output" | awk '{print $3}')
    local disk0_mbps=$(echo "$iostat_output" | awk '{print $4}')
    
    echo "Disk0 - Transactions/sec: $disk0_tps"
    echo "Disk0 - MB/s: $disk0_mbps"
    
    # Espace disque
    echo ""
    echo "Espace disque:"
    df -h / | tail -1 | awk '{print "Utilis√©: " $3 " / " $2 " (" $5 ")"}'
    
    # √âvaluation
    if (( $(echo "$disk0_tps > 1000" | bc -l) )); then
        echo -e "${RED}üî¥ Activit√© disque tr√®s √©lev√©e !${NC}"
    elif (( $(echo "$disk0_tps > 500" | bc -l) )); then
        echo -e "${YELLOW}‚ö†Ô∏è  Activit√© disque √©lev√©e${NC}"
    else
        echo -e "${GREEN}‚úÖ Activit√© disque normale${NC}"
    fi
}

# Fonction d'analyse des processus probl√©matiques
analyze_problematic_processes() {
    echo ""
    echo -e "${CYAN}üö® Processus Probl√©matiques${NC}"
    echo "---------------------------"
    
    # Spotlight (mds_stores)
    local mds_cpu=$(ps aux | grep mds_stores | grep -v grep | awk '{print $3}' | head -1)
    if [ ! -z "$mds_cpu" ] && (( $(echo "$mds_cpu > 10" | bc -l) )); then
        echo -e "${RED}üî¥ Spotlight (mds_stores) utilise $mds_cpu% CPU${NC}"
        echo "   Solution: sudo mdutil -a -i off"
    fi
    
    # Cursor
    local cursor_memory=$(ps aux | grep -i cursor | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
    if [ ! -z "$cursor_memory" ] && (( $(echo "$cursor_memory > 1000" | bc -l) )); then
        echo -e "${RED}üî¥ Cursor utilise ${cursor_memory%.*} MB de RAM${NC}"
        echo "   Solution: ./bin/ath-clean-cursor-memory"
    fi
    
    # Chrome
    local chrome_memory=$(ps aux | grep -i chrome | grep -v grep | awk '{sum+=$6} END {print sum/1024}')
    if [ ! -z "$chrome_memory" ] && (( $(echo "$chrome_memory > 2000" | bc -l) )); then
        echo -e "${YELLOW}‚ö†Ô∏è  Chrome utilise ${chrome_memory%.*} MB de RAM${NC}"
        echo "   Solution: Fermer les onglets inutilis√©s"
    fi
    
    # Processus avec beaucoup de threads
    echo ""
    echo "Processus avec beaucoup de threads:"
    ps aux | awk '$7 > 50 {printf "%-8s %-20s %s threads\n", $7, $11, $2}' | head -5
}

# Fonction d'analyse r√©seau
analyze_network() {
    echo ""
    echo -e "${CYAN}üåê Analyse R√©seau${NC}"
    echo "-------------------"
    
    # Connexions r√©seau
    local tcp_connections=$(netstat -an | grep ESTABLISHED | wc -l)
    echo "Connexions TCP √©tablies: $tcp_connections"
    
    # Processus r√©seau
    echo ""
    echo "Processus avec le plus de connexions:"
    lsof -i | awk '{print $1}' | sort | uniq -c | sort -nr | head -5 | awk '{printf "%-8s %s\n", $1, $2}'
}

# Fonction de recommandations
generate_recommendations() {
    echo ""
    echo -e "${PURPLE}üí° Recommandations d'Optimisation${NC}"
    echo "=================================="
    
    # CPU √©lev√©
    local cpu_total=$(ps aux | awk '{print $3}' | tail -n +2 | awk '{sum+=$1} END {print sum}')
    if (( $(echo "$cpu_total > 200" | bc -l) )); then
        echo "üî¥ Actions imm√©diates pour CPU:"
        echo "  1. Fermer les applications inutilis√©es"
        echo "  2. Red√©marrer Spotlight: sudo mdutil -a -i off"
        echo "  3. V√©rifier les processus en arri√®re-plan"
    fi
    
    # M√©moire faible
    local mem_free=$(vm_stat | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
    local mem_free_mb=$((mem_free * 16384 / 1024 / 1024))
    if [ $mem_free_mb -lt 1000 ]; then
        echo ""
        echo "üî¥ Actions imm√©diates pour m√©moire:"
        echo "  1. Fermer les applications gourmandes"
        echo "  2. Nettoyer Cursor: ./bin/ath-clean-cursor-memory"
        echo "  3. Red√©marrer les applications"
        echo "  4. Vider le cache: sudo purge"
    fi
    
    # Disque lent
    local disk_tps=$(iostat -d 1 1 | tail -1 | awk '{print $3}')
    if (( $(echo "$disk_tps > 1000" | bc -l) )); then
        echo ""
        echo "üî¥ Actions imm√©diates pour disque:"
        echo "  1. Attendre la fin des op√©rations Spotlight"
        echo "  2. Fermer les applications qui √©crivent beaucoup"
        echo "  3. V√©rifier l'espace disque disponible"
    fi
    
    echo ""
    echo "üõ†Ô∏è  Commandes utiles:"
    echo "  ./bin/ath-clean-cursor-memory     # Nettoyer Cursor"
    echo "  sudo purge                        # Vider le cache syst√®me"
    echo "  sudo mdutil -a -i off             # D√©sactiver Spotlight"
    echo "  sudo mdutil -a -i on              # R√©activer Spotlight"
    echo "  top -o cpu                        # Voir les processus CPU"
    echo "  top -o mem                        # Voir les processus m√©moire"
}

# Fonction de g√©n√©ration du rapport
generate_report() {
    local report_file="$HOME/performance_diagnostic_$(date +%Y%m%d_%H%M%S).md"
    
    echo ""
    echo -e "${BLUE}üìä G√©n√©ration du rapport...${NC}"
    
    {
        echo "# Rapport Diagnostic Performance Mac"
        echo "Date: $(date)"
        echo ""
        echo "## R√©sum√©"
        echo ""
        echo "### CPU"
        local cpu_total=$(ps aux | awk '{print $3}' | tail -n +2 | awk '{sum+=$1} END {print sum}')
        echo "- Utilisation totale: ${cpu_total}%"
        echo ""
        echo "### M√©moire"
        local mem_free=$(vm_stat | grep "Pages free" | awk '{print $3}' | sed 's/\.//')
        local mem_free_mb=$((mem_free * 16384 / 1024 / 1024))
        echo "- M√©moire libre: ${mem_free_mb} MB"
        echo ""
        echo "### Disque"
        local disk_tps=$(iostat -d 1 1 | tail -1 | awk '{print $3}')
        echo "- Transactions/sec: $disk_tps"
        echo ""
        echo "## Processus Probl√©matiques"
        ps aux | sort -k3 -nr | head -10 | awk '{print "- " $3 "% CPU, " $6/1024 " MB RAM: " $11}'
        echo ""
        echo "## Recommandations"
        echo "1. Surveiller l'utilisation des ressources"
        echo "2. Fermer les applications inutilis√©es"
        echo "3. Nettoyer r√©guli√®rement le cache"
        echo "4. Optimiser Cursor avec les scripts fournis"
    } > "$report_file"
    
    echo -e "${GREEN}‚úÖ Rapport g√©n√©r√©: $report_file${NC}"
}

# Fonction principale
main() {
    case "${1:-}" in
        --help|-h)
            echo "Usage: ath-diagnostic-performance [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help, -h     Afficher cette aide"
            echo "  --quick        Diagnostic rapide"
            echo ""
            echo "Description:"
            echo "  Diagnostique les probl√®mes de performance du Mac"
            exit 0
            ;;
    esac
    
    analyze_cpu
    analyze_memory
    analyze_disk
    analyze_problematic_processes
    analyze_network
    generate_recommendations
    generate_report
    
    echo ""
    echo -e "${GREEN}üéØ Diagnostic termin√© !${NC}"
    echo "Consultez le rapport g√©n√©r√© pour plus de d√©tails."
}

# Ex√©cution
main "$@" 
#!/bin/bash
# üçé Nettoyage et Pr√©vention des Fichiers AppleDouble
# Version 1.0 - Nettoyage complet des fichiers macOS

set -euo pipefail

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_header() {
    echo -e "${BLUE}üçé Nettoyage et Pr√©vention des Fichiers AppleDouble${NC}"
    echo
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour nettoyer les fichiers AppleDouble
clean_apple_double_files() {
    print_info "Recherche et suppression des fichiers AppleDouble..."
    
    # Compter les fichiers avant suppression
    local count_before=$(find . -name "._*" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./archive/*" -not -path "./node_modules/*" 2>/dev/null | wc -l)
    
    if [ $count_before -gt 0 ]; then
        print_info "Trouv√© $count_before fichiers AppleDouble √† supprimer"
        
        # Supprimer les fichiers AppleDouble
        find . -name "._*" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./archive/*" -not -path "./node_modules/*" -delete 2>/dev/null
        
        # Compter apr√®s suppression
        local count_after=$(find . -name "._*" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./archive/*" -not -path "./node_modules/*" 2>/dev/null | wc -l)
        
        local deleted=$((count_before - count_after))
        print_success "$deleted fichiers AppleDouble supprim√©s"
        
        if [ $count_after -gt 0 ]; then
            print_warning "$count_after fichiers AppleDouble restent (peuvent se recr√©er automatiquement)"
        fi
    else
        print_info "Aucun fichier AppleDouble trouv√©"
    fi
}

# Fonction pour nettoyer les fichiers .DS_Store
clean_ds_store_files() {
    print_info "Recherche et suppression des fichiers .DS_Store..."
    
    local count_before=$(find . -name ".DS_Store" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./archive/*" -not -path "./node_modules/*" 2>/dev/null | wc -l)
    
    if [ $count_before -gt 0 ]; then
        print_info "Trouv√© $count_before fichiers .DS_Store √† supprimer"
        
        find . -name ".DS_Store" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./archive/*" -not -path "./node_modules/*" -delete 2>/dev/null
        
        local count_after=$(find . -name ".DS_Store" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./archive/*" -not -path "./node_modules/*" 2>/dev/null | wc -l)
        
        local deleted=$((count_before - count_after))
        print_success "$deleted fichiers .DS_Store supprim√©s"
    else
        print_info "Aucun fichier .DS_Store trouv√©"
    fi
}

# Fonction pour configurer la pr√©vention
setup_prevention() {
    print_info "Configuration de la pr√©vention des fichiers AppleDouble..."
    
    # Cr√©er un fichier .gitignore global si il n'existe pas
    if [ ! -f ~/.gitignore_global ]; then
        echo "# Fichiers AppleDouble et macOS" > ~/.gitignore_global
        echo "._*" >> ~/.gitignore_global
        echo ".DS_Store" >> ~/.gitignore_global
        echo ".AppleDouble" >> ~/.gitignore_global
        echo ".LSOverride" >> ~/.gitignore_global
        echo "Icon?" >> ~/.gitignore_global
        echo "Thumbs.db" >> ~/.gitignore_global
        echo "ehthumbs.db" >> ~/.gitignore_global
        echo "Desktop.ini" >> ~/.gitignore_global
        print_success "Fichier ~/.gitignore_global cr√©√©"
    else
        print_info "Fichier ~/.gitignore_global existe d√©j√†"
    fi
    
    # Configurer Git pour utiliser le gitignore global
    if ! git config --global core.excludesfile ~/.gitignore_global >/dev/null 2>&1; then
        git config --global core.excludesfile ~/.gitignore_global
        print_success "Git configur√© pour ignorer les fichiers AppleDouble"
    else
        print_info "Git d√©j√† configur√© pour ignorer les fichiers AppleDouble"
    fi
    
    # Ajouter au .gitignore du projet si pas d√©j√† pr√©sent
    if [ -f .gitignore ]; then
        if ! grep -q "^\._*$" .gitignore; then
            echo "" >> .gitignore
            echo "# Fichiers AppleDouble et macOS" >> .gitignore
            echo "._*" >> .gitignore
            echo ".DS_Store" >> .gitignore
            print_success "Ajout√© les patterns au .gitignore du projet"
        else
            print_info "Patterns d√©j√† pr√©sents dans le .gitignore du projet"
        fi
    else
        echo "# Fichiers AppleDouble et macOS" > .gitignore
        echo "._*" >> .gitignore
        echo ".DS_Store" >> .gitignore
        print_success "Cr√©√© .gitignore avec les patterns AppleDouble"
    fi
}

# Fonction pour afficher les commandes de pr√©vention
show_prevention_commands() {
    print_info "Commandes pour pr√©venir la cr√©ation de fichiers AppleDouble :"
    echo
    echo "1. D√©sactiver la cr√©ation automatique :"
    echo "   defaults write com.apple.desktopservices DSDontWriteNetworkStores true"
    echo
    echo "2. Pour un volume sp√©cifique :"
    echo "   defaults write com.apple.desktopservices DSDontWriteUSBStores true"
    echo
    echo "3. Red√©marrer Finder :"
    echo "   killall Finder"
    echo
    echo "4. Pour v√©rifier les param√®tres :"
    echo "   defaults read com.apple.desktopservices"
    echo
}

# Fonction principale
main() {
    print_header
    
    case "${1:-clean}" in
        "clean")
            clean_apple_double_files
            clean_ds_store_files
            ;;
        "prevent")
            setup_prevention
            show_prevention_commands
            ;;
        "all")
            clean_apple_double_files
            clean_ds_store_files
            setup_prevention
            show_prevention_commands
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [COMMANDE]"
            echo
            echo "Commandes :"
            echo "  clean     - Nettoyer les fichiers AppleDouble existants"
            echo "  prevent   - Configurer la pr√©vention"
            echo "  all       - Nettoyer ET configurer la pr√©vention"
            echo "  help      - Afficher cette aide"
            echo
            echo "Exemples :"
            echo "  $0 clean      # Nettoyer seulement"
            echo "  $0 prevent    # Configurer la pr√©vention"
            echo "  $0 all        # Nettoyer et configurer"
            ;;
        *)
            print_error "Commande inconnue: $1"
            echo "Utilisez '$0 help' pour voir les options disponibles"
            exit 1
            ;;
    esac
    
    echo
    print_success "Op√©ration termin√©e !"
}

# Ex√©cution
main "$@" 
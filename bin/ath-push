#!/bin/bash
# Script de push intelligent Athalia
# Ex√©cute toutes les v√©rifications avant de pousser vers GitHub

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables
DRY_RUN=false
FORCE=false
SKIP_CHECKS=false
BRANCH=""
REMOTE="origin"

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üöÄ Push intelligent Athalia${NC}"
    echo -e "${BLUE}üìã V√©rifications compl√®tes avant push${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run|-d)
            DRY_RUN=true
            shift
            ;;
        --force|-f)
            FORCE=true
            shift
            ;;
        --skip-checks|-s)
            SKIP_CHECKS=true
            shift
            ;;
        --branch|-b)
            BRANCH="$2"
            shift 2
            ;;
        --remote|-r)
            REMOTE="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: ./bin/ath-push [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --dry-run, -d        Mode simulation (ne fait rien)"
            echo "  --force, -f          Force le push m√™me avec des erreurs"
            echo "  --skip-checks, -s    Ignore les v√©rifications (plus rapide)"
            echo "  --branch, -b BRANCH  Sp√©cifie la branche (d√©faut: branche actuelle)"
            echo "  --remote, -r REMOTE  Sp√©cifie le remote (d√©faut: origin)"
            echo "  --help, -h           Affiche cette aide"
            echo ""
            echo "Ce script pousse votre code vers GitHub apr√®s v√©rifications:"
            echo "  - V√©rification de l'√©tat Git"
            echo "  - Tests essentiels"
            echo "  - V√©rification de la qualit√©"
            echo "  - Push s√©curis√©"
            exit 0
            ;;
        *)
            print_error "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# Fonction de v√©rification de l'√©tat Git
check_git_status() {
    print_section "V√©rification de l'√©tat Git"

    # V√©rifier si on est dans un d√©p√¥t Git
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Pas dans un d√©p√¥t Git"
        exit 1
    fi

    # V√©rifier s'il y a des changements non commit√©s
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "Changements non commit√©s d√©tect√©s"
        if [ "$FORCE" = false ]; then
            print_info "Utilisez: ./bin/ath-prepare-commit --auto-fix"
            print_info "Puis: git add . && git commit -m \"votre message\""
            exit 1
        else
            print_warning "Mode force - continuation..."
        fi
    fi

    # D√©terminer la branche
    if [ -z "$BRANCH" ]; then
        BRANCH=$(git branch --show-current)
    fi

    print_success "Branche: $BRANCH"
    print_success "Remote: $REMOTE"

    # V√©rifier si la branche existe sur le remote
    if ! git ls-remote --heads "$REMOTE" "$BRANCH" | grep -q "$BRANCH"; then
        print_warning "Branche $BRANCH n'existe pas sur $REMOTE"
        print_info "Premier push - cr√©ation de la branche"
    fi
}

# Fonction de v√©rification des tests
run_tests() {
    if [ "$SKIP_CHECKS" = true ]; then
        print_info "V√©rifications ignor√©es (--skip-checks)"
        return 0
    fi

    print_section "Ex√©cution des tests essentiels"

    # Tests critiques
    print_info "Tests de base..."
    if python -m pytest tests/test_imports_all.py -q >/dev/null 2>&1; then
        print_success "Tests d'imports OK"
    else
        print_error "√âchec des tests d'imports"
        if [ "$FORCE" = false ]; then
            exit 1
        fi
    fi

    if python -m pytest tests/test_encoding_utf8.py -q >/dev/null 2>&1; then
        print_success "Tests d'encodage OK"
    else
        print_error "√âchec des tests d'encodage"
        if [ "$FORCE" = false ]; then
            exit 1
        fi
    fi

    # Tests de qualit√©
    print_info "Tests de qualit√©..."
    if python -m pytest tests/test_no_polluting_files.py::TestNoPollutingFiles::test_no_macos_hidden_files -q >/dev/null 2>&1; then
        print_success "Tests de fichiers polluants OK"
    else
        print_warning "Fichiers polluants d√©tect√©s"
        if [ "$FORCE" = false ]; then
            print_info "Utilisez: ./bin/ath-clean"
            exit 1
        fi
    fi

    # Tests de s√©curit√© (mode adaptatif)
    print_info "Tests de s√©curit√©..."
    if python -m pytest tests/test_security_patterns.py -q >/dev/null 2>&1; then
        print_success "Tests de s√©curit√© OK"
    else
        print_warning "Probl√®mes de s√©curit√© d√©tect√©s (mode adaptatif)"
    fi
}

# Fonction de v√©rification de la qualit√©
check_quality() {
    if [ "$SKIP_CHECKS" = true ]; then
        return 0
    fi

    print_section "V√©rification de la qualit√©"

    # Linting
    print_info "V√©rification du linting..."
    if flake8 --config=config/.flake8 athalia_core/ tests/ 2>/dev/null; then
        print_success "Linting OK"
    else
        print_warning "Probl√®mes de linting d√©tect√©s"
        if [ "$FORCE" = false ]; then
            print_info "Utilisez: ./bin/ath-lint.py"
            exit 1
        fi
    fi

    # Formatage
    print_info "V√©rification du formatage..."
    if black --check --diff --line-length=88 athalia_core/ tests/ 2>/dev/null; then
        print_success "Formatage OK"
    else
        print_warning "Probl√®mes de formatage d√©tect√©s"
        if [ "$FORCE" = false ]; then
            print_info "Utilisez: black --line-length=88 athalia_core/ tests/"
            exit 1
        fi
    fi
}

# Fonction de push
do_push() {
    print_section "Push vers GitHub"

    if [ "$DRY_RUN" = true ]; then
        print_info "Mode simulation - push ignor√©"
        print_info "Commande qui serait ex√©cut√©e:"
        print_info "  git push $REMOTE $BRANCH"
        return 0
    fi

    # V√©rifier la connectivit√©
    print_info "V√©rification de la connectivit√©..."
    if ! git ls-remote "$REMOTE" > /dev/null 2>&1; then
        print_error "Impossible de se connecter au remote $REMOTE"
        exit 1
    fi

    print_success "Connectivit√© OK"

    # Push
    print_info "Push en cours..."
    if git push "$REMOTE" "$BRANCH"; then
        print_success "Push r√©ussi !"
    else
        print_error "√âchec du push"
        exit 1
    fi
}

# Fonction principale
main() {
    print_header

    # √âtape 1: V√©rification de l'√©tat Git
    check_git_status

    # √âtape 2: Tests essentiels
    run_tests

    # √âtape 3: V√©rification de la qualit√©
    check_quality

    # √âtape 4: Push
    do_push

    # R√©sum√©
    echo
    print_success "üéâ Push termin√© avec succ√®s !"
    echo
    print_info "üìä R√©sum√©:"
    print_info "  - Branche: $BRANCH"
    print_info "  - Remote: $REMOTE"
    print_info "  - Tests: ${SKIP_CHECKS:+Ignor√©s}${SKIP_CHECKS:-Ex√©cut√©s}"
    print_info "  - Mode: ${DRY_RUN:+Simulation}${DRY_RUN:-Production}"
    echo
    print_info "üí° Prochaines √©tapes:"
    print_info "  - V√©rifiez les actions GitHub CI/CD"
    print_info "  - Consultez les rapports de qualit√©"
    print_info "  - Surveillez les d√©ploiements"
    echo
}

# Ex√©cution
main "$@"

#!/bin/bash
# 🌟 Nettoyage Complet du Projet Athalia/Arkalia - VERSION ULTRA-SÉCURISÉE
# Version 2.0 - Protection maximale contre la suppression accidentelle
# Inclut des vérifications de sécurité et des exclusions strictes

set -euo pipefail  # Mode strict - arrêt sur erreur

echo "🔒 Nettoyage Athalia/Arkalia - MODE SÉCURISÉ"
echo "=============================================="

# Variables de sécurité
PROJECT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)
CLEANED_FILES=0
CLEANED_DIRS=0
CLEANED_PROCESSES=0
DRY_RUN_MODE=${1:-false}

# LISTE DES FICHIERS/DOSSIERS CRITIQUES - JAMAIS SUPPRIMÉS
CRITICAL_PATHS=(
    ".git"
    ".venv"
    "venv"
    "env"
    "node_modules"
    "data"
    "config"
    "docs"
    "tests"
    "athalia_core"
    "bin"
    "scripts"
    "setup"
    "tools"
    "plugins"
    "templates"
    "prompts"
    "blueprints_history"
    "backups"
    "logs"
    "archive"
    "*.py"
    "*.md"
    "*.yaml"
    "*.yml"
    "*.json"
    "*.toml"
    "*.cfg"
    "*.ini"
    "*.sh"
    "*.txt"
    "*.rst"
    "*.html"
    "*.css"
    "*.js"
    "*.ts"
    "*.vue"
    "*.jsx"
    "*.tsx"
    "*.sql"
    "*.db"
    "*.sqlite"
    "*.sqlite3"
    "*.log"
    "*.lock"
    "requirements.txt"
    "setup.py"
    "pyproject.toml"
    "Cargo.toml"
    "package.json"
    "composer.json"
    "Gemfile"
    "Dockerfile"
    "docker-compose.yml"
    "Makefile"
    "README*"
    "CHANGELOG*"
    "LICENSE*"
    "ROADMAP*"
    "CONTRIBUTING*"
    "CODE_OF_CONDUCT*"
    ".gitignore"
    ".gitattributes"
    ".editorconfig"
    ".eslintrc*"
    ".prettierrc*"
    ".babelrc*"
    ".env*"
    ".dockerignore"
    ".npmrc"
    ".yarnrc"
    ".bowerrc"
    ".jshintrc"
    ".jscsrc"
    ".stylelintrc*"
    ".browserslistrc"
    ".babelrc*"
    ".postcssrc*"
    ".eslintignore"
    ".prettierignore"
    ".stylelintignore"
    ".flowconfig"
    ".flowconfig.js"
    ".flowconfig.json"
    ".babelrc.js"
    ".babelrc.json"
    ".postcssrc.js"
    ".postcssrc.json"
    ".eslintrc.js"
    ".eslintrc.json"
    ".prettierrc.js"
    ".prettierrc.json"
    ".stylelintrc.js"
    ".stylelintrc.json"
    ".jshintrc.js"
    ".jshintrc.json"
    ".jscsrc.js"
    ".jscsrc.json"
    ".browserslistrc.js"
    ".browserslistrc.json"
    ".babelrc.js"
    ".babelrc.json"
    ".postcssrc.js"
    ".postcssrc.json"
    ".eslintrc.js"
    ".eslintrc.json"
    ".prettierrc.js"
    ".prettierrc.json"
    ".stylelintrc.js"
    ".stylelintrc.json"
    ".jshintrc.js"
    ".jshintrc.json"
    ".jscsrc.js"
    ".jscsrc.json"
    ".browserslistrc.js"
    ".browserslistrc.json"
)

# Fonction de vérification de sécurité
is_critical_path() {
    local path="$1"
    
    # Exception spéciale : les fichiers ._* (AppleDouble) ne sont jamais critiques
    # Sauf s'ils sont dans des dossiers vraiment critiques
    if [[ "$path" == *"/._"* ]] || [[ "$path" == "._"* ]]; then
        # Permettre la suppression des ._* même dans les caches
        if [[ "$path" == *"/.mypy_cache/"* ]] || [[ "$path" == *"/__pycache__/"* ]] || [[ "$path" == *"/.pytest_cache/"* ]]; then
            return 1  # Non critique - peut être supprimé
        fi
        # Pour les autres dossiers, vérifier s'ils sont vraiment critiques
        for critical in "${CRITICAL_PATHS[@]}"; do
            if [[ "$path" == *"$critical"* ]] || [[ "$path" == "$critical" ]]; then
                # Exception : permettre ._* dans les caches même s'ils sont dans des dossiers critiques
                if [[ "$critical" == ".mypy_cache" ]] || [[ "$critical" == "__pycache__" ]] || [[ "$critical" == ".pytest_cache" ]]; then
                    return 1  # Non critique - peut être supprimé
                fi
                return 0  # Critique - ne pas supprimer
            fi
        done
        return 1  # Non critique - peut être supprimé
    fi
    
    for critical in "${CRITICAL_PATHS[@]}"; do
        if [[ "$path" == *"$critical"* ]] || [[ "$path" == "$critical" ]]; then
            return 0  # Critique - ne pas supprimer
        fi
    done
    return 1  # Non critique - peut être supprimé
}

# Fonction de vérification de sécurité renforcée
is_safe_to_delete() {
    local path="$1"
    
    # Vérifications de sécurité
    if [[ "$path" == "/" ]] || [[ "$path" == "/home" ]] || [[ "$path" == "/Users" ]]; then
        echo "🚨 ATTENTION: Tentative de suppression d'un répertoire système critique: $path"
        return 1
    fi
    
    if [[ "$path" == *".."* ]]; then
        echo "🚨 ATTENTION: Chemin suspect détecté: $path"
        return 1
    fi
    
    if [[ "$path" == *"/"* ]] && [[ ! "$path" =~ ^\./ ]]; then
        echo "🚨 ATTENTION: Chemin absolu détecté: $path"
        return 1
    fi
    
    if is_critical_path "$path"; then
        echo "🛡️  PROTECTION: Fichier critique préservé: $path"
        return 1
    fi
    
    return 0
}

# Fonction pour compter les fichiers supprimés
count_cleaned() {
    local count=$1
    if [ $count -gt 0 ]; then
        echo "   ✅ $count éléments nettoyés"
        CLEANED_FILES=$((CLEANED_FILES + count))
    fi
}

# Fonction de nettoyage sécurisé
safe_delete() {
    local pattern="$1"
    local description="$2"
    local dry_run=${3:-false}
    
    echo "🔍 $description..."
    
    if [ "$dry_run" = true ]; then
        echo "   🔍 [DRY-RUN] Recherche de fichiers: $pattern"
        local count=$(find . -path "$pattern" -not -path "./.git/*" -not -path "./.venv/*" 2>/dev/null | wc -l)
        echo "   📊 [DRY-RUN] $count fichiers trouvés"
        return
    fi
    
    local count=0
    while IFS= read -r -d '' file; do
        if is_safe_to_delete "$file"; then
            if rm -f "$file" 2>/dev/null; then
                count=$((count + 1))
                echo "   🗑️  Supprimé: $file"
            fi
        fi
    done < <(find . -path "$pattern" -not -path "./.git/*" -not -path "./.venv/*" -print0 2>/dev/null)
    
    count_cleaned $count
}

# Fonction de nettoyage de dossiers sécurisé
safe_delete_dir() {
    local pattern="$1"
    local description="$2"
    local dry_run=${3:-false}
    
    echo "🔍 $description..."
    
    if [ "$dry_run" = true ]; then
        echo "   🔍 [DRY-RUN] Recherche de dossiers: $pattern"
        local count=$(find . -path "$pattern" -type d -not -path "./.git/*" -not -path "./.venv/*" 2>/dev/null | wc -l)
        echo "   📊 [DRY-RUN] $count dossiers trouvés"
        return
    fi
    
    local count=0
    while IFS= read -r -d '' dir; do
        if is_safe_to_delete "$dir"; then
            if rm -rf "$dir" 2>/dev/null; then
                count=$((count + 1))
                echo "   🗑️  Supprimé: $dir"
            fi
        fi
    done < <(find . -path "$pattern" -type d -not -path "./.git/*" -not -path "./.venv/*" -print0 2>/dev/null)
    
    count_cleaned $count
}

# Fonction pour gérer les processus
manage_processes() {
    echo "🔍 Analyse des processus Athalia..."
    
    # Vérifier les processus Python athalia_core
    ATHALIA_PROCESSES=$(ps aux | grep -c "[a]thalia_core.main" 2>/dev/null || echo "0")
    if [ "$ATHALIA_PROCESSES" -gt 0 ] 2>/dev/null; then
        echo "   ⚠️  $ATHALIA_PROCESSES processus Athalia détectés"
        echo "   💡 Utilisez 'ark-process-check.sh' pour les gérer"
        
        if [ "$DRY_RUN_MODE" != true ]; then
            read -p "   Voulez-vous arrêter les processus Athalia ? (y/N): " -n 1 -r
            echo
            if [[ $REPLY =~ ^[Yy]$ ]]; then
                echo "   🔪 Arrêt des processus Athalia..."
                pkill -f "athalia_core.main" 2>/dev/null
                CLEANED_PROCESSES=$ATHALIA_PROCESSES
                echo "   ✅ $ATHALIA_PROCESSES processus arrêtés"
            fi
        fi
    else
        echo "   ✅ Aucun processus Athalia en cours"
    fi
}

# Fonction pour nettoyer les caractères null de manière sécurisée
clean_null_bytes_safe() {
    echo "🔧 Nettoyage des caractères null (corruption de fichiers)..."
    
    local count=0
    while IFS= read -r -d '' file; do
        if is_safe_to_delete "$file"; then
            if grep -q $'\x00' "$file" 2>/dev/null; then
                # Sauvegarder le fichier original
                cp "$file" "$file.backup" 2>/dev/null
                # Supprimer les caractères null
                if tr -d '\000' < "$file" > "$file.tmp" 2>/dev/null && mv "$file.tmp" "$file" 2>/dev/null; then
                    count=$((count + 1))
                    echo "   🔧 Fichier nettoyé : $file"
                fi
            fi
        fi
    done < <(find . -name "*.py" -not -path "./.git/*" -not -path "./.venv/*" -print0 2>/dev/null)
    
    if [ "$count" -gt 0 ]; then
        echo "   ✅ $count fichiers Python nettoyés des caractères null"
        count_cleaned $count
    else
        echo "   ✅ Aucun caractère null détecté"
    fi
}

# Vérification du mode dry-run
if [ "$DRY_RUN_MODE" = true ]; then
    echo "🔍 MODE DRY-RUN ACTIVÉ - Aucun fichier ne sera supprimé"
    echo "======================================================"
fi

# Gestion des processus
manage_processes

echo "📁 Nettoyage des caches Python..."
safe_delete_dir "*/__pycache__" "Cache Python" "$DRY_RUN_MODE"
safe_delete "*.pyc" "Fichiers Python compilés" "$DRY_RUN_MODE"

echo "🗑️ Nettoyage des fichiers temporaires..."
safe_delete "*.tmp" "Fichiers temporaires .tmp" "$DRY_RUN_MODE"
safe_delete "*.temp" "Fichiers temporaires .temp" "$DRY_RUN_MODE"
safe_delete "*~" "Fichiers de sauvegarde ~" "$DRY_RUN_MODE"
safe_delete ".#*" "Fichiers de verrouillage" "$DRY_RUN_MODE"

echo "🍎 Nettoyage des fichiers macOS..."
# Nettoyage spécial des fichiers ._* (AppleDouble) - même dans les dossiers protégés
echo "🔍 Nettoyage des fichiers AppleDouble (.DS_Store, ._*)..."
if [ "$DRY_RUN_MODE" = true ]; then
    echo "   🔍 [DRY-RUN] Recherche de fichiers AppleDouble"
    count=$(find . -name "._*" -not -path "./.git/*" -not -path "./.venv/*" 2>/dev/null | wc -l)
    echo "   📊 [DRY-RUN] $count fichiers AppleDouble trouvés"
else
    count=0
    while IFS= read -r -d '' file; do
        if rm -f "$file" 2>/dev/null; then
            count=$((count + 1))
            echo "   🗑️  Supprimé: $file"
        fi
    done < <(find . -name "._*" -not -path "./.git/*" -not -path "./.venv/*" -print0 2>/dev/null)
    count_cleaned $count
fi

# Nettoyage des fichiers temporaires avec numéros de processus
echo "🔍 Nettoyage des fichiers temporaires avec numéros de processus..."
if [ "$DRY_RUN_MODE" = true ]; then
    echo "   🔍 [DRY-RUN] Recherche de fichiers .!*"
    count=$(find . -name ".!*" -not -path "./.git/*" -not -path "./.venv/*" 2>/dev/null | wc -l)
    echo "   📊 [DRY-RUN] $count fichiers .!* trouvés"
else
    count=0
    while IFS= read -r -d '' file; do
        if rm -f "$file" 2>/dev/null; then
            count=$((count + 1))
            echo "   🗑️  Supprimé: $file"
        fi
    done < <(find . -name ".!*" -not -path "./.git/*" -not -path "./.venv/*" -print0 2>/dev/null)
    count_cleaned $count
fi

safe_delete ".!*" "Fichiers temporaires macOS" "$DRY_RUN_MODE"
safe_delete "*.clean" "Fichiers de nettoyage" "$DRY_RUN_MODE"
safe_delete ".DS_Store" "Fichiers .DS_Store" "$DRY_RUN_MODE"

echo "📝 Nettoyage des logs..."
safe_delete "*.log" "Fichiers de log (sauf athalia.log)" "$DRY_RUN_MODE"

echo "🧪 Nettoyage des caches de tests..."
safe_delete_dir ".pytest_cache" "Cache pytest" "$DRY_RUN_MODE"
safe_delete_dir ".benchmarks" "Cache benchmarks" "$DRY_RUN_MODE"
safe_delete_dir ".mypy_cache" "Cache mypy" "$DRY_RUN_MODE"

# Nettoyage des fichiers temporaires de tests
echo "🧪 Nettoyage des fichiers temporaires de tests..."
safe_delete "test_*_temp*" "Fichiers temporaires de tests" "$DRY_RUN_MODE"
safe_delete "*_test_temp*" "Fichiers temporaires de tests" "$DRY_RUN_MODE"
safe_delete "temp_test_*" "Fichiers temporaires de tests" "$DRY_RUN_MODE"

echo "📦 Nettoyage des caches de build..."
safe_delete_dir "build" "Dossier build" "$DRY_RUN_MODE"
safe_delete_dir "dist" "Dossier dist" "$DRY_RUN_MODE"
safe_delete_dir "*.egg-info" "Dossiers egg-info" "$DRY_RUN_MODE"

echo "🎨 Nettoyage des fichiers de couverture..."
safe_delete "*.coverage" "Fichiers de couverture" "$DRY_RUN_MODE"
safe_delete "coverage.xml" "Rapports de couverture XML" "$DRY_RUN_MODE"
safe_delete_dir "htmlcov" "Rapports HTML de couverture" "$DRY_RUN_MODE"

echo "📋 Nettoyage des fichiers de profilage..."
safe_delete "profile.out" "Fichiers de profilage" "$DRY_RUN_MODE"
safe_delete "*.prof" "Fichiers de profilage Python" "$DRY_RUN_MODE"

echo "🔍 Nettoyage des fichiers de recherche..."
safe_delete_dir ".vscode" "Configuration VSCode" "$DRY_RUN_MODE"
safe_delete_dir ".idea" "Configuration IntelliJ" "$DRY_RUN_MODE"

echo "📁 Nettoyage des dossiers temporaires..."
safe_delete_dir "temp" "Dossiers temp" "$DRY_RUN_MODE"
safe_delete_dir "tmp" "Dossiers tmp" "$DRY_RUN_MODE"
safe_delete_dir "cache" "Dossiers cache" "$DRY_RUN_MODE"

echo "🧹 Nettoyage des fichiers corrompus..."
safe_delete "*.f(f)" "Fichiers corrompus .f(f)" "$DRY_RUN_MODE"
safe_delete "*.corrupt" "Fichiers corrompus" "$DRY_RUN_MODE"
safe_delete "*.broken" "Fichiers cassés" "$DRY_RUN_MODE"

# Nettoyage des caractères null (sécurisé)
clean_null_bytes_safe

echo ""
echo "🎯 Résumé du nettoyage :"
echo "   📊 Total d'éléments nettoyés : $CLEANED_FILES"
echo "   📁 Dossiers nettoyés : $CLEANED_DIRS"
echo "   🔄 Processus arrêtés : $CLEANED_PROCESSES"
echo ""
echo "🛡️  Sécurité :"
echo "   ✅ Tous les fichiers critiques ont été préservés"
echo "   ✅ Aucun fichier système n'a été touché"
echo "   ✅ Vérifications de sécurité activées"
echo ""
if [ "$DRY_RUN_MODE" = true ]; then
    echo "🔍 MODE DRY-RUN - Aucun fichier n'a été supprimé"
else
    echo "✅ Nettoyage terminé ! Le projet Athalia/Arkalia est maintenant propre et optimisé."
fi
echo ""
echo "💡 Conseils :"
echo "   - Exécutez 'ath-clean --dry-run' pour tester sans supprimer"
echo "   - Utilisez 'ark-process-check.sh' pour surveiller les processus"
echo "   - Les fichiers critiques sont automatiquement préservés"
echo "   - La configuration a été optimisée pour les performances"
echo ""
echo "🚀 Pour redémarrer proprement :"
echo "   python3 -m athalia_core.main" 
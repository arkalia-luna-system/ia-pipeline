#!/bin/bash
# Script de v√©rification finale du formatage Athalia
# V√©rifie que tous les fichiers respectent les standards de formatage

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables
VERBOSE=false
AUTO_FIX=false

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üîç V√©rification finale du formatage Athalia${NC}"
    echo -e "${BLUE}üìã V√©rification compl√®te des standards de formatage${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --auto-fix|-a)
            AUTO_FIX=true
            shift
            ;;
        --help|-h)
            echo "Usage: ./bin/ath-verify-formatting [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --verbose, -v     Affichage d√©taill√©"
            echo "  --auto-fix, -a    Correction automatique des probl√®mes"
            echo "  --help, -h        Affiche cette aide"
            echo ""
            echo "Ce script v√©rifie que tous les fichiers respectent les standards de formatage"
            exit 0
            ;;
        *)
            print_error "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# Fonction principale
main() {
    print_header

    # √âtape 1: V√©rification de l'environnement
    print_section "V√©rification de l'environnement"
    
    if ! command -v black > /dev/null 2>&1; then
        print_error "Black n'est pas install√©"
        exit 1
    fi
    
    if ! command -v isort > /dev/null 2>&1; then
        print_error "isort n'est pas install√©"
        exit 1
    fi
    
    if ! command -v ruff > /dev/null 2>&1; then
        print_error "ruff n'est pas install√©"
        exit 1
    fi
    
    print_success "Outils de formatage disponibles"

    # √âtape 2: V√©rification Black
    print_section "V√©rification Black"
    if [ "$VERBOSE" = true ]; then
        if black . --check --diff; then
            print_success "Formatage Black OK"
        else
            print_error "Probl√®mes de formatage Black d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique Black..."
                black .
                print_success "Black corrig√©"
            else
                exit 1
            fi
        fi
    else
        if black . --check > /dev/null 2>&1; then
            print_success "Formatage Black OK"
        else
            print_error "Probl√®mes de formatage Black d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique Black..."
                black . > /dev/null 2>&1
                print_success "Black corrig√©"
            else
                exit 1
            fi
        fi
    fi

    # √âtape 3: V√©rification isort
    print_section "V√©rification isort"
    if [ "$VERBOSE" = true ]; then
        if isort . --check-only --diff; then
            print_success "Organisation des imports OK"
        else
            print_error "Probl√®mes d'organisation des imports d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique isort..."
                isort .
                print_success "isort corrig√©"
            else
                exit 1
            fi
        fi
    else
        if isort . --check-only > /dev/null 2>&1; then
            print_success "Organisation des imports OK"
        else
            print_error "Probl√®mes d'organisation des imports d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique isort..."
                isort . > /dev/null 2>&1
                print_success "isort corrig√©"
            else
                exit 1
            fi
        fi
    fi

    # √âtape 4: V√©rification ruff
    print_section "V√©rification ruff"
    if [ "$VERBOSE" = true ]; then
        if ruff check .; then
            print_success "Linting ruff OK"
        else
            print_warning "Probl√®mes de linting ruff d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique ruff..."
                ruff check --fix .
                print_success "ruff corrig√©"
            fi
        fi
    else
        if ruff check . > /dev/null 2>&1; then
            print_success "Linting ruff OK"
        else
            print_warning "Probl√®mes de linting ruff d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique ruff..."
                ruff check --fix . > /dev/null 2>&1
                print_success "ruff corrig√©"
            fi
        fi
    fi

    # √âtape 5: V√©rification ruff-format
    print_section "V√©rification ruff-format"
    if [ "$VERBOSE" = true ]; then
        if ruff format --check .; then
            print_success "Formatage ruff OK"
        else
            print_error "Probl√®mes de formatage ruff d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique ruff-format..."
                ruff format .
                print_success "ruff-format corrig√©"
            else
                exit 1
            fi
        fi
    else
        if ruff format --check . > /dev/null 2>&1; then
            print_success "Formatage ruff OK"
        else
            print_error "Probl√®mes de formatage ruff d√©tect√©s"
            if [ "$AUTO_FIX" = true ]; then
                print_info "Correction automatique ruff-format..."
                ruff format . > /dev/null 2>&1
                print_success "ruff-format corrig√©"
            else
                exit 1
            fi
        fi
    fi

    # √âtape 6: V√©rification finale
    print_section "V√©rification finale"
    
    # V√©rifier s'il y a des fichiers modifi√©s
    if [ -n "$(git diff --name-only)" ]; then
        print_warning "Fichiers modifi√©s d√©tect√©s:"
        git diff --name-only | while read file; do
            echo "  - $file"
        done
        
        if [ "$AUTO_FIX" = true ]; then
            print_info "Ajout automatique des fichiers modifi√©s..."
            git add .
            print_success "Fichiers ajout√©s au staging"
        fi
    else
        print_success "Aucun fichier modifi√©"
    fi

    # √âtape 7: R√©sum√©
    echo
    print_success "üéâ V√©rification finale termin√©e !"
    echo
    print_info "üìã R√©sum√©:"
    print_info "  - Black: ‚úÖ"
    print_info "  - isort: ‚úÖ"
    print_info "  - ruff: ‚úÖ"
    print_info "  - ruff-format: ‚úÖ"
    echo
    print_info "üí° Prochaines √©tapes:"
    if [ "$AUTO_FIX" = true ] && [ -n "$(git diff --cached --name-only)" ]; then
        print_info "  - git commit -m \"votre message\""
        print_info "  - git push"
    else
        print_info "  - ./bin/ath-auto-format (si des corrections sont n√©cessaires)"
        print_info "  - ./bin/ath-smart-commit -m \"votre message\" --push"
    fi
    echo
}

# Ex√©cution
main "$@" 
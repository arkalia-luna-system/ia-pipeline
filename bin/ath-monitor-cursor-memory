#!/bin/bash
# ath-monitor-cursor-memory
# Script de monitoring m√©moire pour Cursor
# Auteur : Athalia
# Version : 1.0

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Seuils d'alerte (en MB)
WARNING_THRESHOLD=800
CRITICAL_THRESHOLD=1200

# Fonction d'affichage du header
show_header() {
    echo -e "${BLUE}üìä Monitoring M√©moire Cursor${NC}"
    echo "=================================="
    echo "Date: $(date)"
    echo "Seuils: ‚ö†Ô∏è  ${WARNING_THRESHOLD}MB | üî¥ ${CRITICAL_THRESHOLD}MB"
    echo ""
}

# Fonction de calcul de la m√©moire Cursor
get_cursor_memory() {
    local total_memory=0
    local process_count=0
    
    # R√©cup√©rer tous les processus Cursor
    while IFS= read -r line; do
        if [[ $line =~ ^[0-9]+ ]]; then
            local memory=$(echo "$line" | awk '{print $6/1024}')
            local process_name=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
            
            if (( $(echo "$memory > 0" | bc -l) )); then
                echo "$memory $process_name"
                total_memory=$(echo "$total_memory + $memory" | bc -l)
                ((process_count++))
            fi
        fi
    done < <(ps aux | grep -i cursor | grep -v grep)
    
    echo "$total_memory $process_count"
}

# Fonction d'affichage des processus
show_processes() {
    echo -e "${YELLOW}üîç Processus Cursor actifs:${NC}"
    echo "--------------------------------"
    
    local total_memory=0
    local process_count=0
    
    while IFS= read -r line; do
        if [[ $line =~ ^[0-9]+ ]]; then
            local memory=$(echo "$line" | awk '{print $6/1024}')
            local process_name=$(echo "$line" | awk '{for(i=11;i<=NF;i++) printf "%s ", $i; print ""}')
            
            if (( $(echo "$memory > 0" | bc -l) )); then
                printf "%-8.1f MB | %s\n" "$memory" "$process_name"
                total_memory=$(echo "$total_memory + $memory" | bc -l)
                ((process_count++))
            fi
        fi
    done < <(ps aux | grep -i cursor | grep -v grep | sort -k6 -nr)
    
    echo "--------------------------------"
    printf "${GREEN}Total: %.1f MB (%d processus)${NC}\n" "$total_memory" "$process_count"
    echo ""
    
    # V√©rification des seuils
    if (( $(echo "$total_memory > $CRITICAL_THRESHOLD" | bc -l) )); then
        echo -e "${RED}üî¥ ALERTE CRITIQUE: M√©moire √©lev√©e !${NC}"
        echo -e "${RED}   Recommandation: Ex√©cuter ath-clean-cursor-memory${NC}"
    elif (( $(echo "$total_memory > $WARNING_THRESHOLD" | bc -l) )); then
        echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: M√©moire mod√©r√©ment √©lev√©e${NC}"
    else
        echo -e "${GREEN}‚úÖ M√©moire dans les limites normales${NC}"
    fi
}

# Fonction d'analyse des extensions
analyze_extensions() {
    echo -e "${YELLOW}üîå Analyse des extensions:${NC}"
    echo "----------------------------"
    
    local extensions_dir="$HOME/.cursor/extensions"
    if [ -d "$extensions_dir" ]; then
        local extension_count=$(ls -la "$extensions_dir" | grep "^d" | wc -l)
        echo "Extensions install√©es: $extension_count"
        
        # Extensions gourmandes
        local heavy_extensions=(
            "continue.continue"
            "anysphere.cursorpyright"
            "github.vscode-github-actions"
            "eamodio.gitlens"
        )
        
        echo ""
        echo "Extensions gourmandes d√©tect√©es:"
        for ext in "${heavy_extensions[@]}"; do
            if [ -d "$extensions_dir/$ext"* ]; then
                echo -e "  ${RED}‚ö†Ô∏è  $ext${NC}"
            fi
        done
    fi
    echo ""
}

# Fonction de recommandations
show_recommendations() {
    echo -e "${BLUE}üí° Recommandations d'optimisation:${NC}"
    echo "====================================="
    
    # V√©rifier la m√©moire totale
    local total_memory=$(get_cursor_memory | tail -1 | awk '{print $1}')
    
    if (( $(echo "$total_memory > $CRITICAL_THRESHOLD" | bc -l) )); then
        echo "üî¥ Actions imm√©diates recommand√©es:"
        echo "  1. Ex√©cuter: ./bin/ath-clean-cursor-memory"
        echo "  2. D√©sactiver l'extension continue.continue"
        echo "  3. Red√©marrer Cursor"
        echo "  4. Fermer les onglets inutilis√©s"
    elif (( $(echo "$total_memory > $WARNING_THRESHOLD" | bc -l) )); then
        echo "‚ö†Ô∏è  Actions recommand√©es:"
        echo "  1. D√©sactiver les extensions inutilis√©es"
        echo "  2. Nettoyer le cache: ./bin/ath-clean-cursor-memory --no-restart"
        echo "  3. Fermer les projets non utilis√©s"
    else
        echo "‚úÖ M√©moire optimale - Aucune action requise"
    fi
    
    echo ""
    echo "üõ†Ô∏è  Commandes utiles:"
    echo "  ./bin/ath-clean-cursor-memory     # Nettoyage complet"
    echo "  ./bin/ath-clean-cursor-memory --no-restart  # Nettoyage sans red√©marrage"
    echo "  top -l 1 -o mem | grep -i cursor  # Voir l'utilisation m√©moire"
}

# Fonction de monitoring continu
monitor_continuous() {
    local interval=${1:-5}
    echo -e "${BLUE}üîÑ Monitoring continu (intervalle: ${interval}s)${NC}"
    echo "Appuyez sur Ctrl+C pour arr√™ter"
    echo ""
    
    while true; do
        clear
        show_header
        show_processes
        sleep "$interval"
    done
}

# Fonction principale
main() {
    case "${1:-}" in
        --help|-h)
            echo "Usage: ath-monitor-cursor-memory [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --help, -h           Afficher cette aide"
            echo "  --continuous, -c     Monitoring continu"
            echo "  --interval N         Intervalle en secondes (d√©faut: 5)"
            echo ""
            echo "Description:"
            echo "  Surveille l'utilisation m√©moire de Cursor"
            exit 0
            ;;
        --continuous|-c)
            local interval=${2:-5}
            monitor_continuous "$interval"
            ;;
        *)
            show_header
            show_processes
            analyze_extensions
            show_recommendations
            ;;
    esac
}

# Ex√©cution
main "$@" 
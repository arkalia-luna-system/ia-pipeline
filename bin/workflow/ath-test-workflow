#!/bin/bash
# Script de test des outils de workflow Athalia
# V√©rifie que tous les nouveaux outils fonctionnent correctement

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üß™ Test des outils de workflow Athalia${NC}"
    echo -e "${BLUE}üìã V√©rification du bon fonctionnement${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Variables
TESTS_PASSED=0
TESTS_FAILED=0
TOTAL_TESTS=0

# Fonction de test
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_exit="$3"

    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    print_info "Test: $test_name"

    if eval "$test_command" > /dev/null 2>&1; then
        if [ "$expected_exit" = "0" ]; then
            print_success "‚úì $test_name"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            print_error "‚úó $test_name (exit code inattendu)"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
    else
        if [ "$expected_exit" != "0" ]; then
            print_success "‚úì $test_name (erreur attendue)"
            TESTS_PASSED=$((TESTS_PASSED + 1))
        else
            print_error "‚úó $test_name"
            TESTS_FAILED=$((TESTS_FAILED + 1))
        fi
    fi
}

# Test des scripts
test_scripts() {
    print_section "Test des scripts"

    # Test ath-prepare-commit
    run_test "Script ath-prepare-commit existe" "[ -f bin/ath-prepare-commit ]" "0"
    run_test "Script ath-prepare-commit ex√©cutable" "[ -x bin/ath-prepare-commit ]" "0"
    run_test "Script ath-prepare-commit --help" "bin/ath-prepare-commit --help" "0"

    # Test ath-push
    run_test "Script ath-push existe" "[ -f bin/ath-push ]" "0"
    run_test "Script ath-push ex√©cutable" "[ -x bin/ath-push ]" "0"
    run_test "Script ath-push --help" "bin/ath-push --help" "0"

    # Test ath-workflow
    run_test "Script ath-workflow existe" "[ -f bin/ath-workflow ]" "0"
    run_test "Script ath-workflow ex√©cutable" "[ -x bin/ath-workflow ]" "0"
    run_test "Script ath-workflow --help" "bin/ath-workflow --help" "0"
}

# Test des alias
test_aliases() {
    print_section "Test des alias"

    # Source des alias si pas d√©j√† fait
    if ! command -v ath-prepare > /dev/null 2>&1; then
        source setup/athalia-workflow-aliases.sh
    fi

    # Test des alias principaux
    run_test "Alias ath-prepare" "command -v ath-prepare" "0"
    run_test "Alias ath-push-smart" "command -v ath-push-smart" "0"
    run_test "Alias ath-workflow" "command -v ath-workflow" "0"
    run_test "Alias ath-quick" "command -v ath-quick" "0"
    run_test "Alias ath-dev" "command -v ath-dev" "0"
    run_test "Alias ath-feature" "command -v ath-feature" "0"
    run_test "Alias ath-hotfix" "command -v ath-hotfix" "0"
    run_test "Alias ath-release" "command -v ath-release" "0"

    # Test de la fonction d'aide
    run_test "Fonction ath-workflow-help" "command -v ath-workflow-help" "0"
}

# Test des modes dry-run
test_dry_run() {
    print_section "Test des modes simulation"

    # Test ath-prepare-commit --dry-run
    run_test "ath-prepare-commit --dry-run" "bin/ath-prepare-commit --dry-run" "0"

    # Test ath-push --dry-run
    run_test "ath-push --dry-run" "bin/ath-push --dry-run" "0"

    # Test ath-workflow --dry-run
    run_test "ath-workflow --dry-run" "bin/ath-workflow --mode develop --dry-run" "0"
}

# Test des configurations
test_configurations() {
    print_section "Test des configurations"

    # Test des fichiers de configuration
    run_test "Fichier pre-commit-config.yaml" "[ -f config/pre-commit-config.yaml ]" "0"
    run_test "Fichier .flake8" "[ -f config/.flake8 ]" "0"
    run_test "Fichier pyproject.toml" "[ -f config/pyproject.toml ]" "0"

    # Test du hook Git
    run_test "Hook pre-commit" "[ -f .git/hooks/pre-commit ]" "0"
    run_test "Hook pre-commit ex√©cutable" "[ -x .git/hooks/pre-commit ]" "0"
}

# Test des d√©pendances
test_dependencies() {
    print_section "Test des d√©pendances"

    # Test des outils Python
    run_test "flake8 disponible" "command -v flake8" "0"
    run_test "black disponible" "command -v black" "0"
    run_test "pytest disponible" "command -v pytest" "0"

    # Test des modules Python
    run_test "Module athalia_core.audit" "python3 -c 'import athalia_core.audit'" "0"
    run_test "Module athalia_core.cleanup" "python3 -c 'import athalia_core.cleanup'" "0"
}

# Test des tests existants
test_existing_tests() {
    print_section "Test des tests existants"

    # Test des tests critiques
    run_test "Test imports" "python3 -m pytest tests/test_imports_all.py -q" "0"
    run_test "Test encoding" "python3 -m pytest tests/test_encoding_utf8.py -q" "0"
    run_test "Test fichiers polluants" "python3 -m pytest tests/test_no_polluting_files.py::TestNoPollutingFiles::test_no_macos_hidden_files -q" "0"
}

# Test de l'environnement Git
test_git_environment() {
    print_section "Test de l'environnement Git"

    # Test Git
    run_test "D√©p√¥t Git" "git rev-parse --git-dir" "0"
    run_test "Branche actuelle" "git branch --show-current" "0"
    run_test "Remote origin" "git remote get-url origin" "0"
}

# R√©sum√© des tests
print_summary() {
    echo
    print_section "R√©sum√© des tests"
    echo
    print_success "Tests r√©ussis: $TESTS_PASSED"
    if [ $TESTS_FAILED -gt 0 ]; then
        print_error "Tests √©chou√©s: $TESTS_FAILED"
    fi
    print_info "Total des tests: $TOTAL_TESTS"

    local success_rate=$((TESTS_PASSED * 100 / TOTAL_TESTS))
    echo
    if [ $success_rate -eq 100 ]; then
        print_success "üéâ Tous les tests sont pass√©s ! (100%)"
    elif [ $success_rate -ge 90 ]; then
        print_success "‚úÖ Tests r√©ussis: $success_rate%"
    elif [ $success_rate -ge 80 ]; then
        print_warning "‚ö†Ô∏è Tests r√©ussis: $success_rate%"
    else
        print_error "‚ùå Tests r√©ussis: $success_rate%"
    fi

    echo
    if [ $TESTS_FAILED -eq 0 ]; then
        print_success "üöÄ Tous les outils de workflow sont pr√™ts !"
        print_info "üí° Vous pouvez maintenant utiliser :"
        print_info "   ath-quick       # D√©veloppement quotidien"
        print_info "   ath-prepare-fix # Pr√©paration au commit"
        print_info "   ath-push-smart  # Push intelligent"
        print_info "   ath-workflow-help # Aide compl√®te"
    else
        print_warning "‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus."
        print_info "üí° Consultez la documentation : docs/DEVELOPER/WORKFLOW_AMELIORATIONS.md"
    fi
}

# Fonction principale
main() {
    print_header

    test_scripts
    test_aliases
    test_dry_run
    test_configurations
    test_dependencies
    test_existing_tests
    test_git_environment

    print_summary

    # Code de sortie
    if [ $TESTS_FAILED -eq 0 ]; then
        exit 0
    else
        exit 1
    fi
}

# Ex√©cution
main "$@"

#!/bin/bash
# Script d'analyse du dossier bin pour identifier les doublons et fichiers inutiles

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${PURPLE}🔍 Analyse du dossier bin - Recherche de doublons et fichiers inutiles${NC}"
echo -e "${PURPLE}================================================================${NC}"
echo ""

# Fonction pour afficher les résultats
show_section() {
    echo -e "${CYAN}📋 $1${NC}"
}

show_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

show_error() {
    echo -e "${RED}❌ $1${NC}"
}

show_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# 1. Statistiques générales
show_section "1. Statistiques générales"
TOTAL_FILES=$(ls -1 bin/ | wc -l)
EXECUTABLE_FILES=$(find bin/ -type f -perm +111 | wc -l)
PYTHON_FILES=$(find bin/ -name "*.py" | wc -l)
BASH_FILES=$(find bin/ -name "*.sh" | wc -l)
NO_EXTENSION=$(find bin/ -type f ! -name "*.*" | wc -l)

echo "   Total fichiers: $TOTAL_FILES"
echo "   Fichiers exécutables: $EXECUTABLE_FILES"
echo "   Fichiers Python: $PYTHON_FILES"
echo "   Fichiers Bash: $BASH_FILES"
echo "   Fichiers sans extension: $NO_EXTENSION"
echo ""

# 2. Fichiers temporaires macOS
show_section "2. Fichiers temporaires macOS"
TEMP_FILES=$(find bin/ -name ".*" -type f | wc -l)
if [ $TEMP_FILES -eq 0 ]; then
    show_success "Aucun fichier temporaire macOS trouvé"
else
    show_warning "$TEMP_FILES fichiers temporaires macOS trouvés"
    find bin/ -name ".*" -type f
fi
echo ""

# 3. Fichiers vides
show_section "3. Fichiers vides"
EMPTY_FILES=$(find bin/ -type f -empty | wc -l)
if [ $EMPTY_FILES -eq 0 ]; then
    show_success "Aucun fichier vide trouvé"
else
    show_warning "$EMPTY_FILES fichiers vides trouvés"
    find bin/ -type f -empty
fi
echo ""

# 4. Doublons potentiels par nom
show_section "4. Doublons potentiels par nom"
echo "   Recherche de fichiers avec des noms similaires..."

# Analyser les fichiers par préfixe
echo "   Recherche de fichiers avec des noms similaires..."

# Analyser les préfixes communs
PREFIXES=("ath-test" "ath-lint" "ath-clean" "ath-workflow" "ath-start" "clean-null")

for prefix in "${PREFIXES[@]}"; do
    matching_files=($(ls bin/ | grep "^$prefix"))
    if [ ${#matching_files[@]} -gt 1 ]; then
        echo "   ${YELLOW}Groupe '$prefix':${NC}"
        for file in "${matching_files[@]}"; do
            size=$(stat -f%z "bin/$file" 2>/dev/null || stat -c%s "bin/$file" 2>/dev/null)
            echo "     - $file ($size bytes)"
        done
        echo ""
    fi
done

# 5. Fichiers par taille
show_section "5. Fichiers par taille"
echo "   Fichiers > 10KB:"
find bin/ -type f -size +10k -exec ls -lh {} \; | awk '{print "     - " $9 " (" $5 ")"}'
echo ""

echo "   Fichiers < 1KB:"
find bin/ -type f -size -1k -exec ls -lh {} \; | awk '{print "     - " $9 " (" $5 ")"}'
echo ""

# 6. Fichiers désactivés
show_section "6. Fichiers désactivés"
DISABLED_FILES=$(find bin/ -name "*.disabled" | wc -l)
if [ $DISABLED_FILES -eq 0 ]; then
    show_success "Aucun fichier désactivé trouvé"
else
    show_warning "$DISABLED_FILES fichiers désactivés trouvés"
    find bin/ -name "*.disabled"
fi
echo ""

# 7. Permissions
show_section "7. Permissions des fichiers"
NON_EXECUTABLE=$(find bin/ -type f ! -perm +111 | wc -l)
if [ $NON_EXECUTABLE -eq 0 ]; then
    show_success "Tous les fichiers sont exécutables"
else
    show_warning "$NON_EXECUTABLE fichiers non exécutables"
    find bin/ -type f ! -perm +111
fi
echo ""

# 8. Recommandations
show_section "8. Recommandations"

echo "   ${GREEN}✅ Actions recommandées:${NC}"
echo ""

# Vérifier les doublons fonctionnels
echo "   ${YELLOW}🔍 Vérification des doublons fonctionnels:${NC}"

# ath-workflow vs ath-workflow-complete
if [ -f "bin/ath-workflow" ] && [ -f "bin/ath-workflow-complete" ]; then
    echo "     - ath-workflow (12KB) vs ath-workflow-complete (6KB)"
    echo "       → Objectifs différents: workflow de développement vs cycle complet"
    echo "       → Recommandation: Garder les deux (fonctionnalités distinctes)"
    echo ""
fi

# ath-start vs ath-quick-start
if [ -f "bin/ath-start" ] && [ -f "bin/ath-quick-start" ]; then
    echo "     - ath-start (5KB) vs ath-quick-start (6KB)"
    echo "       → Objectifs différents: démarrage d'Athalia vs préparation environnement"
    echo "       → Recommandation: Garder les deux (fonctionnalités distinctes)"
    echo ""
fi

# ath-lint.py vs ath-lint-secure
if [ -f "bin/ath-lint.py" ] && [ -f "bin/ath-lint-secure" ]; then
    echo "     - ath-lint.py (2KB) vs ath-lint-secure (6KB)"
    echo "       → Recommandation: Vérifier si ath-lint-secure remplace ath-lint.py"
    echo ""
fi

# ath-test.py vs ath-test-clean.py
if [ -f "bin/ath-test.py" ] && [ -f "bin/ath-test-clean.py" ]; then
    echo "     - ath-test.py (4KB) vs ath-test-clean.py (4KB)"
    echo "       → Recommandation: Vérifier si ath-test-clean.py remplace ath-test.py"
    echo ""
fi

# Fichiers potentiellement obsolètes
echo "   ${YELLOW}🗑️  Fichiers potentiellement obsolètes:${NC}"
if [ -f "bin/ath-protect-tests.disabled" ]; then
    echo "     - ath-protect-tests.disabled: Fichier désactivé"
    echo "       → Recommandation: Supprimer si plus utilisé"
    echo ""
fi

if [ -f "bin/clean-null-bytes" ] && [ -f "bin/clean-null-bytes-robust.py" ]; then
    echo "     - clean-null-bytes vs clean-null-bytes-robust.py"
    echo "       → Recommandation: Vérifier si la version robuste remplace l'original"
    echo ""
fi

# 9. Résumé
show_section "9. Résumé"
echo "   ${GREEN}✅ Nettoyage effectué:${NC}"
echo "     - $TEMP_FILES fichiers temporaires macOS supprimés"
echo "     - $EMPTY_FILES fichiers vides supprimés"
echo ""
echo "   ${YELLOW}⚠️  Actions manuelles recommandées:${NC}"
echo "     - Vérifier les doublons fonctionnels identifiés"
echo "     - Supprimer les fichiers désactivés obsolètes"
echo "     - Standardiser les permissions si nécessaire"
echo ""
echo "   ${BLUE}📊 État final:${NC}"
echo "     - $TOTAL_FILES fichiers dans bin/"
echo "     - $EXECUTABLE_FILES fichiers exécutables"
echo "     - Environnement propre et organisé"
echo ""

show_success "Analyse terminée !"

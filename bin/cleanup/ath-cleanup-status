#!/bin/bash
# Script de v√©rification de l'√©tat de propret√© du projet
# Affiche un rapport d√©taill√© sur l'√©tat actuel du projet

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${PURPLE}üîç Rapport d'√©tat de propret√© du projet Athalia${NC}"
echo -e "${PURPLE}==============================================${NC}"
echo ""

# Fonction pour afficher les r√©sultats
show_section() {
    echo -e "${CYAN}üìã $1${NC}"
}

show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

show_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# 1. Statistiques g√©n√©rales du projet
show_section "1. Statistiques g√©n√©rales du projet"
TOTAL_FILES=$(find . -type f | wc -l)
TOTAL_DIRS=$(find . -type d | wc -l)
PROJECT_SIZE=$(du -sh . | cut -f1)

echo "   Total fichiers: $TOTAL_FILES"
echo "   Total dossiers: $TOTAL_DIRS"
echo "   Taille du projet: $PROJECT_SIZE"
echo ""

# 2. √âtat des fichiers temporaires macOS
show_section "2. Fichiers temporaires macOS"
DS_STORE_COUNT=$(find . -path "./.venv" -prune -o -path "./.git" -prune -o -name ".DS_Store" -print | wc -l)
APPLE_DOUBLE_COUNT=$(find . -path "./.venv" -prune -o -path "./.git" -prune -o -name "._*" -print | wc -l)

if [ $DS_STORE_COUNT -eq 0 ] && [ $APPLE_DOUBLE_COUNT -eq 0 ]; then
    show_success "Aucun fichier temporaire macOS d√©tect√©"
else
    show_warning "$DS_STORE_COUNT fichiers .DS_Store et $APPLE_DOUBLE_COUNT fichiers AppleDouble trouv√©s"
fi
echo ""

# 3. √âtat des fichiers Python compil√©s
show_section "3. Fichiers Python compil√©s"
PYC_COUNT=$(find . -path "./.venv" -prune -o -name "*.pyc" -print | wc -l)
PYCACHE_COUNT=$(find . -path "./.venv" -prune -o -type d -name "__pycache__" -print | wc -l)

if [ $PYC_COUNT -eq 0 ] && [ $PYCACHE_COUNT -eq 0 ]; then
    show_success "Aucun fichier Python compil√© d√©tect√©"
else
    show_warning "$PYC_COUNT fichiers .pyc et $PYCACHE_COUNT dossiers __pycache__ trouv√©s"
fi
echo ""

# 4. √âtat des fichiers temporaires syst√®me
show_section "4. Fichiers temporaires syst√®me"
TEMP_FILES=$(find . -path "./.venv" -prune -o -type f \( -name "*.tmp" -o -name "*.temp" -o -name "*.swp" -o -name "*.swo" -o -name "*~" -o -name ".#*" -o -name "*.orig" -o -name "*.rej" -o -name "Thumbs.db" \) -print | wc -l)

if [ $TEMP_FILES -eq 0 ]; then
    show_success "Aucun fichier temporaire syst√®me d√©tect√©"
else
    show_warning "$TEMP_FILES fichiers temporaires syst√®me trouv√©s"
fi
echo ""

# 5. √âtat des fichiers vides
show_section "5. Fichiers vides"
EMPTY_FILES=$(find . -path "./.venv" -prune -o -type f -empty -print | wc -l)
EMPTY_DIRS=$(find . -path "./.venv" -prune -o -type d -empty -print | wc -l)

if [ $EMPTY_FILES -eq 0 ] && [ $EMPTY_DIRS -eq 0 ]; then
    show_success "Aucun fichier ou dossier vide d√©tect√©"
else
    show_warning "$EMPTY_FILES fichiers vides et $EMPTY_DIRS dossiers vides trouv√©s"
fi
echo ""

# 6. √âtat des logs
show_section "6. Fichiers de logs"
LOG_FILES=$(find . -path "./.venv" -prune -o -name "*.log" -print | wc -l)
OLD_LOG_FILES=$(find . -path "./.venv" -prune -o -name "*.log" -mtime +30 -print | wc -l)

if [ $LOG_FILES -eq 0 ]; then
    show_success "Aucun fichier de log d√©tect√©"
else
    show_info "$LOG_FILES fichiers de logs trouv√©s"
    if [ $OLD_LOG_FILES -gt 0 ]; then
        show_warning "$OLD_LOG_FILES logs anciens (>30 jours) d√©tect√©s"
    else
        show_success "Tous les logs sont r√©cents"
    fi
fi
echo ""

# 7. √âtat des fichiers de cache
show_section "7. Fichiers de cache"
CACHE_FILES=$(find . -path "./.venv" -prune -o -name "*.cache" -o -name "*.cache.*" -print | wc -l)
MYPY_CACHE=$(find . -path "./.venv" -prune -o -name ".mypy_cache" -print | wc -l)

if [ $CACHE_FILES -eq 0 ] && [ $MYPY_CACHE -eq 0 ]; then
    show_success "Aucun fichier de cache d√©tect√©"
else
    show_info "$CACHE_FILES fichiers de cache et $MYPY_CACHE dossiers .mypy_cache trouv√©s"
fi
echo ""

# 8. √âtat des permissions
show_section "8. Permissions des fichiers"
NON_EXECUTABLE_SCRIPTS=$(find bin/ -type f ! -perm +111 2>/dev/null | wc -l)

if [ $NON_EXECUTABLE_SCRIPTS -eq 0 ]; then
    show_success "Tous les scripts dans bin/ sont ex√©cutables"
else
    show_warning "$NON_EXECUTABLE_SCRIPTS scripts non ex√©cutables dans bin/"
fi
echo ""

# 9. √âtat du .gitignore
show_section "9. Configuration .gitignore"
if [ -f ".gitignore" ]; then
    show_success "Fichier .gitignore pr√©sent"
    IGNORE_PATTERNS=$(grep -c "^[^#]" .gitignore 2>/dev/null || echo "0")
    show_info "$IGNORE_PATTERNS patterns de fichiers ignor√©s"
else
    show_error "Fichier .gitignore manquant"
fi
echo ""

# 10. Score de propret√©
show_section "10. Score de propret√© du projet"
TOTAL_ISSUES=$((DS_STORE_COUNT + APPLE_DOUBLE_COUNT + PYC_COUNT + PYCACHE_COUNT + TEMP_FILES + EMPTY_FILES + EMPTY_DIRS + OLD_LOG_FILES))

if [ $TOTAL_ISSUES -eq 0 ]; then
    show_success "üéâ Score parfait : 100/100"
    echo "   Le projet est parfaitement propre !"
elif [ $TOTAL_ISSUES -lt 10 ]; then
    show_success "‚úÖ Score excellent : 90-99/100"
    echo "   Le projet est tr√®s propre avec seulement $TOTAL_ISSUES √©l√©ments √† nettoyer"
elif [ $TOTAL_ISSUES -lt 50 ]; then
    show_warning "‚ö†Ô∏è  Score bon : 70-89/100"
    echo "   Le projet est propre avec $TOTAL_ISSUES √©l√©ments √† nettoyer"
else
    show_error "‚ùå Score faible : <70/100"
    echo "   Le projet n√©cessite un nettoyage : $TOTAL_ISSUES √©l√©ments √† traiter"
fi
echo ""

# 11. Recommandations
show_section "11. Recommandations"

if [ $TOTAL_ISSUES -eq 0 ]; then
    show_info "üí° Maintenez cette propret√© :"
    echo "   - Ex√©cutez ath-cleanup-preventive hebdomadairement"
    echo "   - Surveillez les nouveaux types de fichiers"
    echo "   - Mettez √† jour .gitignore si n√©cessaire"
else
    show_info "üßπ Actions recommand√©es :"
    if [ $DS_STORE_COUNT -gt 0 ] || [ $APPLE_DOUBLE_COUNT -gt 0 ]; then
        echo "   - Ex√©cutez : ./bin/ath-cleanup-preventive"
    fi
    if [ $PYC_COUNT -gt 0 ] || [ $PYCACHE_COUNT -gt 0 ]; then
        echo "   - Nettoyez les fichiers Python compil√©s"
    fi
    if [ $OLD_LOG_FILES -gt 0 ]; then
        echo "   - Supprimez les logs anciens"
    fi
    echo "   - Ex√©cutez : ./bin/ath-cleanup-complete pour un nettoyage complet"
fi
echo ""

# 12. R√©sum√© final
show_section "12. R√©sum√© final"
echo "   ${BLUE}üìä √âtat g√©n√©ral:${NC}"
echo "     - Fichiers temporaires macOS: $((DS_STORE_COUNT + APPLE_DOUBLE_COUNT))"
echo "     - Fichiers Python compil√©s: $((PYC_COUNT + PYCACHE_COUNT))"
echo "     - Fichiers temporaires syst√®me: $TEMP_FILES"
echo "     - Fichiers/dossiers vides: $((EMPTY_FILES + EMPTY_DIRS))"
echo "     - Logs anciens: $OLD_LOG_FILES"
echo "     - Fichiers de cache: $((CACHE_FILES + MYPY_CACHE))"
echo ""
echo "   ${GREEN}üéØ Total probl√®mes: $TOTAL_ISSUES${NC}"
echo ""

if [ $TOTAL_ISSUES -eq 0 ]; then
    show_success "üåü Le projet Athalia est en excellent √©tat !"
else
    show_warning "üîß Quelques am√©liorations possibles pour optimiser le projet"
fi

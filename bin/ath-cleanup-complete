#!/bin/bash
# Script de nettoyage complet pour supprimer tous les fichiers ind√©sirables
# dans chaque dossier et sous-dossier du projet

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${PURPLE}üßπ Nettoyage complet du projet - Suppression des fichiers ind√©sirables${NC}"
echo -e "${PURPLE}================================================================${NC}"
echo ""

# Fonction pour afficher les r√©sultats
show_section() {
    echo -e "${CYAN}üìã $1${NC}"
}

show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

show_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Variables pour le suivi
TOTAL_CLEANED=0
TOTAL_SIZE_CLEANED=0

# Fonction pour calculer la taille avant suppression
calculate_size() {
    local size=0
    if [ -n "$1" ]; then
        size=$(find . -type f \( $1 \) -exec du -ch {} + 2>/dev/null | tail -1 | cut -f1)
        echo "$size"
    fi
}

# 1. Fichiers temporaires macOS (.DS_Store, ._*)
show_section "1. Suppression des fichiers temporaires macOS"
DS_STORE_COUNT=$(find . -name ".DS_Store" | wc -l)
APPLE_DOUBLE_COUNT=$(find . -name "._*" | wc -l)

if [ $DS_STORE_COUNT -gt 0 ]; then
    echo "   Suppression de $DS_STORE_COUNT fichiers .DS_Store..."
    find . -name ".DS_Store" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + DS_STORE_COUNT))
fi

if [ $APPLE_DOUBLE_COUNT -gt 0 ]; then
    echo "   Suppression de $APPLE_DOUBLE_COUNT fichiers AppleDouble (._*)..."
    find . -name "._*" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + APPLE_DOUBLE_COUNT))
fi

show_success "Fichiers temporaires macOS supprim√©s"
echo ""

# 2. Fichiers Python compil√©s
show_section "2. Suppression des fichiers Python compil√©s"
PYC_COUNT=$(find . -name "*.pyc" | wc -l)
PYCACHE_COUNT=$(find . -type d -name "__pycache__" | wc -l)

if [ $PYC_COUNT -gt 0 ]; then
    echo "   Suppression de $PYC_COUNT fichiers .pyc..."
    find . -name "*.pyc" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + PYC_COUNT))
fi

if [ $PYCACHE_COUNT -gt 0 ]; then
    echo "   Suppression de $PYCACHE_COUNT dossiers __pycache__..."
    find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    TOTAL_CLEANED=$((TOTAL_CLEANED + PYCACHE_COUNT))
fi

show_success "Fichiers Python compil√©s supprim√©s"
echo ""

# 3. Fichiers temporaires syst√®me
show_section "3. Suppression des fichiers temporaires syst√®me"
TEMP_FILES=$(find . -type f \( -name "*.tmp" -o -name "*.temp" -o -name "*.swp" -o -name "*.swo" -o -name "*~" -o -name ".#*" -o -name "*.orig" -o -name "*.rej" -o -name "Thumbs.db" \) | wc -l)

if [ $TEMP_FILES -gt 0 ]; then
    echo "   Suppression de $TEMP_FILES fichiers temporaires syst√®me..."
    find . -type f \( -name "*.tmp" -o -name "*.temp" -o -name "*.swp" -o -name "*.swo" -o -name "*~" -o -name ".#*" -o -name "*.orig" -o -name "*.rej" -o -name "Thumbs.db" \) -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + TEMP_FILES))
fi

show_success "Fichiers temporaires syst√®me supprim√©s"
echo ""

# 4. Fichiers de sauvegarde
show_section "4. Suppression des fichiers de sauvegarde"
BACKUP_FILES=$(find . -type f \( -name "*.bak" -o -name "*.backup" \) | wc -l)

if [ $BACKUP_FILES -gt 0 ]; then
    echo "   Suppression de $BACKUP_FILES fichiers de sauvegarde..."
    find . -type f \( -name "*.bak" -o -name "*.backup" \) -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + BACKUP_FILES))
fi

show_success "Fichiers de sauvegarde supprim√©s"
echo ""

# 5. Fichiers vides
show_section "5. Suppression des fichiers vides"
EMPTY_FILES=$(find . -type f -empty | wc -l)

if [ $EMPTY_FILES -gt 0 ]; then
    echo "   Suppression de $EMPTY_FILES fichiers vides..."
    find . -type f -empty -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + EMPTY_FILES))
fi

show_success "Fichiers vides supprim√©s"
echo ""

# 6. Fichiers d√©sactiv√©s
show_section "6. Suppression des fichiers d√©sactiv√©s"
DISABLED_FILES=$(find . -name "*.disabled" | wc -l)

if [ $DISABLED_FILES -gt 0 ]; then
    echo "   Suppression de $DISABLED_FILES fichiers d√©sactiv√©s..."
    find . -name "*.disabled" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + DISABLED_FILES))
fi

show_success "Fichiers d√©sactiv√©s supprim√©s"
echo ""

# 7. Nettoyage des logs (sauf les plus r√©cents)
show_section "7. Nettoyage des logs anciens"
LOG_FILES=$(find . -name "*.log" -mtime +7 | wc -l)

if [ $LOG_FILES -gt 0 ]; then
    echo "   Suppression de $LOG_FILES fichiers de logs anciens (>7 jours)..."
    find . -name "*.log" -mtime +7 -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + LOG_FILES))
fi

show_success "Logs anciens supprim√©s"
echo ""

# 8. Nettoyage des fichiers de cache
show_section "8. Nettoyage des fichiers de cache"
CACHE_FILES=$(find . -name "*.cache" -o -name "*.cache.*" | wc -l)

if [ $CACHE_FILES -gt 0 ]; then
    echo "   Suppression de $CACHE_FILES fichiers de cache..."
    find . -name "*.cache" -o -name "*.cache.*" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + CACHE_FILES))
fi

show_success "Fichiers de cache supprim√©s"
echo ""

# 9. Nettoyage des dossiers vides
show_section "9. Suppression des dossiers vides"
EMPTY_DIRS=$(find . -type d -empty | wc -l)

if [ $EMPTY_DIRS -gt 0 ]; then
    echo "   Suppression de $EMPTY_DIRS dossiers vides..."
    find . -type d -empty -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + EMPTY_DIRS))
fi

show_success "Dossiers vides supprim√©s"
echo ""

# 10. Nettoyage sp√©cifique au projet
show_section "10. Nettoyage sp√©cifique au projet"

# Fichiers de test temporaires
TEST_TEMP=$(find . -name "test_*.tmp" -o -name "*_test.tmp" | wc -l)
if [ $TEST_TEMP -gt 0 ]; then
    echo "   Suppression de $TEST_TEMP fichiers de test temporaires..."
    find . -name "test_*.tmp" -o -name "*_test.tmp" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + TEST_TEMP))
fi

# Fichiers de rapport temporaires
REPORT_TEMP=$(find . -name "*_report.tmp" -o -name "temp_*.json" | wc -l)
if [ $REPORT_TEMP -gt 0 ]; then
    echo "   Suppression de $REPORT_TEMP fichiers de rapport temporaires..."
    find . -name "*_report.tmp" -o -name "temp_*.json" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + REPORT_TEMP))
fi

show_success "Nettoyage sp√©cifique termin√©"
echo ""

# 11. R√©sum√© final
show_section "11. R√©sum√© du nettoyage"
echo "   ${GREEN}‚úÖ Nettoyage termin√© avec succ√®s !${NC}"
echo ""
echo "   ${BLUE}üìä Statistiques:${NC}"
echo "     - Fichiers .DS_Store supprim√©s: $DS_STORE_COUNT"
echo "     - Fichiers AppleDouble supprim√©s: $APPLE_DOUBLE_COUNT"
echo "     - Fichiers .pyc supprim√©s: $PYC_COUNT"
echo "     - Dossiers __pycache__ supprim√©s: $PYCACHE_COUNT"
echo "     - Fichiers temporaires syst√®me supprim√©s: $TEMP_FILES"
echo "     - Fichiers de sauvegarde supprim√©s: $BACKUP_FILES"
echo "     - Fichiers vides supprim√©s: $EMPTY_FILES"
echo "     - Fichiers d√©sactiv√©s supprim√©s: $DISABLED_FILES"
echo "     - Logs anciens supprim√©s: $LOG_FILES"
echo "     - Fichiers de cache supprim√©s: $CACHE_FILES"
echo "     - Dossiers vides supprim√©s: $EMPTY_DIRS"
echo "     - Fichiers de test temporaires supprim√©s: $TEST_TEMP"
echo "     - Fichiers de rapport temporaires supprim√©s: $REPORT_TEMP"
echo ""
echo "   ${GREEN}üéØ Total: $TOTAL_CLEANED √©l√©ments supprim√©s${NC}"
echo ""

# 12. V√©rification finale
show_section "12. V√©rification finale"
REMAINING_TEMP=$(find . -type f \( -name "*.pyc" -o -name "*.DS_Store" -o -name "._*" -o -name "*.tmp" -o -name "*.temp" -o -name "*.bak" -o -name "*.backup" -o -name "*.swp" -o -name "*.swo" -o -name "*~" -o -name ".#*" -o -name "*.orig" -o -name "*.rej" -o -name "Thumbs.db" \) | wc -l)
REMAINING_PYCACHE=$(find . -type d -name "__pycache__" | wc -l)

if [ $REMAINING_TEMP -eq 0 ] && [ $REMAINING_PYCACHE -eq 0 ]; then
    show_success "‚úÖ Aucun fichier ind√©sirable restant d√©tect√©"
else
    show_warning "‚ö†Ô∏è  $REMAINING_TEMP fichiers temporaires et $REMAINING_PYCACHE dossiers __pycache__ restent"
fi

echo ""
show_success "üßπ Nettoyage complet termin√© ! Le projet est maintenant propre et organis√©." 
#!/bin/bash
# 🚀 Script de démarrage optimisé pour Athalia/Arkalia
# Vérifie et nettoie l'environnement avant de démarrer

echo "🚀 Démarrage optimisé d'Athalia/Arkalia..."

# Variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Fonction pour vérifier les processus existants
check_existing_processes() {
    echo "🔍 Vérification des processus existants..."
    
    ATHALIA_PROCESSES=$(ps aux | grep -c "[a]thalia_core.main" || echo "0")
    if [ "$ATHALIA_PROCESSES" -gt 0 ]; then
        echo "   ⚠️  $ATHALIA_PROCESSES processus Athalia déjà en cours"
        read -p "   Voulez-vous les arrêter et redémarrer ? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "   🔪 Arrêt des processus existants..."
            pkill -f "athalia_core.main" 2>/dev/null
            sleep 2
            echo "   ✅ Processus arrêtés"
        else
            echo "   ℹ️  Utilisation des processus existants"
            return 1
        fi
    else
        echo "   ✅ Aucun processus Athalia en cours"
    fi
    return 0
}

# Fonction pour vérifier l'environnement
check_environment() {
    echo "🔧 Vérification de l'environnement..."
    
    # Vérifier Python
    if ! command -v python3 &> /dev/null; then
        echo "   ❌ Python3 non trouvé"
        return 1
    fi
    echo "   ✅ Python3 disponible"
    
    # Vérifier les dépendances
    if [ ! -f "requirements.txt" ] && [ ! -f "config/requirements.txt" ]; then
        echo "   ⚠️  Fichier requirements.txt non trouvé"
    else
        echo "   ✅ Dépendances disponibles"
    fi
    
    # Vérifier la configuration
    if [ ! -f "config/athalia_config.yaml" ]; then
        echo "   ❌ Configuration athalia_config.yaml non trouvée"
        return 1
    fi
    echo "   ✅ Configuration disponible"
    
    return 0
}

# Fonction pour nettoyer rapidement
quick_cleanup() {
    echo "🧹 Nettoyage rapide..."
    
    # Supprimer les caches Python
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null
    find . -name "*.pyc" -type f -delete 2>/dev/null
    
    # Supprimer les fichiers temporaires
    find . -name "*.tmp" -o -name "*.temp" -o -name "*~" -delete 2>/dev/null
    
    echo "   ✅ Nettoyage terminé"
}

# Fonction pour démarrer en mode optimisé
start_optimized() {
    echo "🚀 Démarrage d'Athalia en mode optimisé..."
    
    # Variables d'environnement pour optimiser
    export PYTHONOPTIMIZE=1
    export PYTHONDONTWRITEBYTECODE=1
    export PYTHONUNBUFFERED=1
    
    # Démarrer avec gestion d'erreurs
    cd "$PROJECT_ROOT"
    
    echo "   📁 Répertoire de travail: $(pwd)"
    echo "   🐍 Lancement: python3 -m athalia_core.main"
    echo ""
    echo "💡 Conseils:"
    echo "   - Utilisez Ctrl+C pour arrêter proprement"
    echo "   - Utilisez 'ark-process-check.sh' pour surveiller les processus"
    echo "   - Utilisez 'ath-clean' pour nettoyer régulièrement"
    echo ""
    
    # Démarrer Athalia
    python3 -m athalia_core.main
}

# Fonction pour démarrer en mode développement
start_development() {
    echo "🔧 Démarrage d'Athalia en mode développement..."
    
    # Activer les logs détaillés
    export ATHALIA_DEBUG=1
    export ATHALIA_VERBOSE=1
    
    cd "$PROJECT_ROOT"
    
    echo "   📁 Répertoire de travail: $(pwd)"
    echo "   🐍 Lancement: python3 -m athalia_core.main (mode debug)"
    echo ""
    
    python3 -m athalia_core.main
}

# Fonction pour démarrer en mode surveillance
start_monitoring() {
    echo "👁️  Démarrage d'Athalia en mode surveillance..."
    
    cd "$PROJECT_ROOT"
    
    echo "   📁 Répertoire de travail: $(pwd)"
    echo "   🐍 Lancement: python3 -m athalia_core.main"
    echo "   🔍 Mode surveillance activé"
    echo ""
    
    # Démarrer et passer directement au mode surveillance
    echo "14" | python3 -m athalia_core.main
}

# Menu principal
show_menu() {
    echo ""
    echo "🎯 Choisissez le mode de démarrage :"
    echo "1. Mode optimisé (recommandé)"
    echo "2. Mode développement (logs détaillés)"
    echo "3. Mode surveillance continue"
    echo "4. Nettoyage complet puis démarrage"
    echo "5. Quitter"
    echo ""
}

# Vérifications préliminaires
if ! check_environment; then
    echo "❌ Environnement non valide. Vérifiez l'installation."
    exit 1
fi

# Vérifier les processus existants
if check_existing_processes; then
    # Continuer avec le démarrage
    :
else
    # Processus existants conservés
    exit 0
fi

# Menu de démarrage
while true; do
    show_menu
    read -p "Choix (1-5): " -n 1 -r
    echo
    
    case $REPLY in
        1)
            quick_cleanup
            start_optimized
            break
            ;;
        2)
            quick_cleanup
            start_development
            break
            ;;
        3)
            quick_cleanup
            start_monitoring
            break
            ;;
        4)
            echo "🧹 Nettoyage complet en cours..."
            ./bin/ath-clean
            echo ""
            start_optimized
            break
            ;;
        5)
            echo "👋 Au revoir !"
            exit 0
            ;;
        *)
            echo "❌ Choix invalide"
            ;;
    esac
done 
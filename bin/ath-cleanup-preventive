#!/bin/bash
# Script de nettoyage pr√©ventif pour maintenir le projet propre
# √Ä ex√©cuter r√©guli√®rement pour √©viter l'accumulation de fichiers ind√©sirables

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${PURPLE}üõ°Ô∏è  Nettoyage pr√©ventif - Maintenance du projet${NC}"
echo -e "${PURPLE}==============================================${NC}"
echo ""

# Fonction pour afficher les r√©sultats
show_section() {
    echo -e "${CYAN}üìã $1${NC}"
}

show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

show_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Variables pour le suivi
TOTAL_CLEANED=0

# 1. Nettoyage des fichiers temporaires macOS (excluant .venv et .git)
show_section "1. Nettoyage des fichiers temporaires macOS"
DS_STORE_COUNT=$(find . -path "./.venv" -prune -o -path "./.git" -prune -o -name ".DS_Store" -print | wc -l)
APPLE_DOUBLE_COUNT=$(find . -path "./.venv" -prune -o -path "./.git" -prune -o -name "._*" -print | wc -l)

if [ $DS_STORE_COUNT -gt 0 ]; then
    echo "   Suppression de $DS_STORE_COUNT fichiers .DS_Store..."
    find . -path "./.venv" -prune -o -path "./.git" -prune -o -name ".DS_Store" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + DS_STORE_COUNT))
fi

if [ $APPLE_DOUBLE_COUNT -gt 0 ]; then
    echo "   Suppression de $APPLE_DOUBLE_COUNT fichiers AppleDouble (._*)..."
    find . -path "./.venv" -prune -o -path "./.git" -prune -o -name "._*" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + APPLE_DOUBLE_COUNT))
fi

show_success "Fichiers temporaires macOS nettoy√©s"
echo ""

# 2. Nettoyage des fichiers Python compil√©s (excluant .venv)
show_section "2. Nettoyage des fichiers Python compil√©s"
PYC_COUNT=$(find . -path "./.venv" -prune -o -name "*.pyc" -print | wc -l)
PYCACHE_COUNT=$(find . -path "./.venv" -prune -o -type d -name "__pycache__" -print | wc -l)

if [ $PYC_COUNT -gt 0 ]; then
    echo "   Suppression de $PYC_COUNT fichiers .pyc..."
    find . -path "./.venv" -prune -o -name "*.pyc" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + PYC_COUNT))
fi

if [ $PYCACHE_COUNT -gt 0 ]; then
    echo "   Suppression de $PYCACHE_COUNT dossiers __pycache__..."
    find . -path "./.venv" -prune -o -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
    TOTAL_CLEANED=$((TOTAL_CLEANED + PYCACHE_COUNT))
fi

show_success "Fichiers Python compil√©s nettoy√©s"
echo ""

# 3. Nettoyage des fichiers temporaires syst√®me
show_section "3. Nettoyage des fichiers temporaires syst√®me"
TEMP_FILES=$(find . -path "./.venv" -prune -o -type f \( -name "*.tmp" -o -name "*.temp" -o -name "*.swp" -o -name "*.swo" -o -name "*~" -o -name ".#*" -o -name "*.orig" -o -name "*.rej" -o -name "Thumbs.db" \) -print | wc -l)

if [ $TEMP_FILES -gt 0 ]; then
    echo "   Suppression de $TEMP_FILES fichiers temporaires syst√®me..."
    find . -path "./.venv" -prune -o -type f \( -name "*.tmp" -o -name "*.temp" -o -name "*.swp" -o -name "*.swo" -o -name "*~" -o -name ".#*" -o -name "*.orig" -o -name "*.rej" -o -name "Thumbs.db" \) -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + TEMP_FILES))
fi

show_success "Fichiers temporaires syst√®me nettoy√©s"
echo ""

# 4. Nettoyage des fichiers vides
show_section "4. Nettoyage des fichiers vides"
EMPTY_FILES=$(find . -path "./.venv" -prune -o -type f -empty -print | wc -l)

if [ $EMPTY_FILES -gt 0 ]; then
    echo "   Suppression de $EMPTY_FILES fichiers vides..."
    find . -path "./.venv" -prune -o -type f -empty -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + EMPTY_FILES))
fi

show_success "Fichiers vides nettoy√©s"
echo ""

# 5. Nettoyage des dossiers vides
show_section "5. Nettoyage des dossiers vides"
EMPTY_DIRS=$(find . -path "./.venv" -prune -o -type d -empty -print | wc -l)

if [ $EMPTY_DIRS -gt 0 ]; then
    echo "   Suppression de $EMPTY_DIRS dossiers vides..."
    find . -path "./.venv" -prune -o -type d -empty -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + EMPTY_DIRS))
fi

show_success "Dossiers vides nettoy√©s"
echo ""

# 6. Nettoyage des logs anciens (>30 jours)
show_section "6. Nettoyage des logs anciens"
LOG_FILES=$(find . -path "./.venv" -prune -o -name "*.log" -mtime +30 -print | wc -l)

if [ $LOG_FILES -gt 0 ]; then
    echo "   Suppression de $LOG_FILES fichiers de logs anciens (>30 jours)..."
    find . -path "./.venv" -prune -o -name "*.log" -mtime +30 -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + LOG_FILES))
fi

show_success "Logs anciens nettoy√©s"
echo ""

# 7. Nettoyage des fichiers de cache sp√©cifiques
show_section "7. Nettoyage des fichiers de cache"
CACHE_FILES=$(find . -path "./.venv" -prune -o -name "*.cache" -o -name "*.cache.*" -print | wc -l)

if [ $CACHE_FILES -gt 0 ]; then
    echo "   Suppression de $CACHE_FILES fichiers de cache..."
    find . -path "./.venv" -prune -o -name "*.cache" -o -name "*.cache.*" -delete
    TOTAL_CLEANED=$((TOTAL_CLEANED + CACHE_FILES))
fi

show_success "Fichiers de cache nettoy√©s"
echo ""

# 8. R√©sum√© et recommandations
show_section "8. R√©sum√© du nettoyage pr√©ventif"

if [ $TOTAL_CLEANED -eq 0 ]; then
    show_success "‚úÖ Aucun fichier ind√©sirable trouv√© - Le projet est d√©j√† propre !"
else
    echo "   ${GREEN}‚úÖ Nettoyage pr√©ventif termin√© !${NC}"
    echo ""
    echo "   ${BLUE}üìä Statistiques:${NC}"
    echo "     - Fichiers .DS_Store supprim√©s: $DS_STORE_COUNT"
    echo "     - Fichiers AppleDouble supprim√©s: $APPLE_DOUBLE_COUNT"
    echo "     - Fichiers .pyc supprim√©s: $PYC_COUNT"
    echo "     - Dossiers __pycache__ supprim√©s: $PYCACHE_COUNT"
    echo "     - Fichiers temporaires syst√®me supprim√©s: $TEMP_FILES"
    echo "     - Fichiers vides supprim√©s: $EMPTY_FILES"
    echo "     - Dossiers vides supprim√©s: $EMPTY_DIRS"
    echo "     - Logs anciens supprim√©s: $LOG_FILES"
    echo "     - Fichiers de cache supprim√©s: $CACHE_FILES"
    echo ""
    echo "   ${GREEN}üéØ Total: $TOTAL_CLEANED √©l√©ments supprim√©s${NC}"
fi

echo ""
show_info "üí° Recommandations pour maintenir le projet propre :"
echo "   - Ex√©cuter ce script r√©guli√®rement (hebdomadaire)"
echo "   - Ajouter les patterns de fichiers temporaires au .gitignore"
echo "   - Utiliser des outils de linting pour d√©tecter les probl√®mes"
echo "   - Configurer l'IDE pour ignorer les fichiers temporaires"
echo ""

show_success "üõ°Ô∏è  Maintenance pr√©ventive termin√©e !" 
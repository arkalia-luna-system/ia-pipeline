#!/bin/bash
# Script de formatage automatique Athalia
# Formate automatiquement les fichiers Python et les ajoute au staging

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables
DRY_RUN=false
VERBOSE=false
AUTO_ADD=true

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üé® Formatage automatique Athalia${NC}"
    echo -e "${BLUE}üìã Formatage et ajout automatique des fichiers${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run|-d)
            DRY_RUN=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --no-auto-add|-n)
            AUTO_ADD=false
            shift
            ;;
        --help|-h)
            echo "Usage: ./bin/ath-auto-format [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --dry-run, -d     Mode simulation (ne fait rien)"
            echo "  --verbose, -v     Affichage d√©taill√©"
            echo "  --no-auto-add, -n Ne pas ajouter automatiquement les fichiers"
            echo "  --help, -h        Affiche cette aide"
            echo ""
            echo "Ce script formate automatiquement les fichiers Python et les ajoute au staging"
            exit 0
            ;;
        *)
            print_error "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# Fonction principale
main() {
    print_header

    # √âtape 1: V√©rification de l'√©tat Git
    print_section "V√©rification de l'√©tat Git"
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Pas dans un d√©p√¥t Git"
        exit 1
    fi

    # R√©cup√©ration des fichiers Python modifi√©s
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
    UNSTAGED_FILES=$(git diff --name-only | grep '\.py$' || true)
    ALL_PY_FILES="$STAGED_FILES $UNSTAGED_FILES"

    if [ -z "$ALL_PY_FILES" ]; then
        print_info "Aucun fichier Python modifi√©"
        exit 0
    fi

    print_info "Fichiers Python √† traiter:"
    for file in $ALL_PY_FILES; do
        echo "  - $file"
    done
    echo

    if [ "$DRY_RUN" = true ]; then
        print_warning "Mode simulation - aucune modification effectu√©e"
        exit 0
    fi

    # √âtape 2: Formatage automatique
    print_section "Formatage automatique"

    # Sauvegarde de l'√©tat initial
    INITIAL_MODIFIED=$(git diff --name-only | grep '\.py$' || true)

    # Formatage avec isort (organisation des imports)
    print_info "Organisation des imports (isort)..."
    if [ "$VERBOSE" = true ]; then
        echo "$ALL_PY_FILES" | xargs -r isort --profile=black --line-length=88 || true
    else
        echo "$ALL_PY_FILES" | xargs -r isort --profile=black --line-length=88 > /dev/null 2>&1 || true
    fi
    print_success "Imports organis√©s"

    # Formatage avec black
    print_info "Formatage du code (black)..."
    if [ "$VERBOSE" = true ]; then
        echo "$ALL_PY_FILES" | xargs -r black --line-length=88 || true
    else
        echo "$ALL_PY_FILES" | xargs -r black --line-length=88 > /dev/null 2>&1 || true
    fi
    print_success "Code format√©"

    # Formatage avec ruff
    print_info "Formatage avanc√© (ruff)..."
    if [ "$VERBOSE" = true ]; then
        echo "$ALL_PY_FILES" | xargs -r ruff format --line-length=88 || true
    else
        echo "$ALL_PY_FILES" | xargs -r ruff format --line-length=88 > /dev/null 2>&1 || true
    fi
    print_success "Formatage avanc√© termin√©"

    # Linting avec ruff (correction automatique)
    print_info "V√©rification et correction du linting (ruff)..."
    if [ "$VERBOSE" = true ]; then
        echo "$ALL_PY_FILES" | xargs -r ruff check --fix --exit-non-zero-on-fix || true
    else
        echo "$ALL_PY_FILES" | xargs -r ruff check --fix --exit-non-zero-on-fix > /dev/null 2>&1 || true
    fi
    print_success "Linting v√©rifi√© et corrig√©"

    # √âtape 3: Ajout automatique des fichiers modifi√©s
    if [ "$AUTO_ADD" = true ]; then
        print_section "Ajout automatique des fichiers modifi√©s"

        # R√©cup√©ration des fichiers modifi√©s apr√®s formatage
        MODIFIED_FILES=$(git diff --name-only | grep '\.py$' || true)

        if [ -n "$MODIFIED_FILES" ]; then
            print_info "Fichiers modifi√©s par le formatage:"
            for file in $MODIFIED_FILES; do
                echo "  - $file"
            done
            echo

            # Ajout des fichiers modifi√©s
            echo "$MODIFIED_FILES" | xargs -r git add
            print_success "Fichiers format√©s ajout√©s au staging"
        else
            print_info "Aucun fichier modifi√© par le formatage"
        fi
    else
        print_info "Ajout automatique d√©sactiv√©"
    fi

    # √âtape 4: R√©sum√©
    echo
    print_success "üéâ Formatage automatique termin√© !"
    echo
    print_info "üìã Prochaines √©tapes recommand√©es:"
    print_info "  1. git commit -m \"votre message\""
    print_info "  2. git push"
    echo
    print_info "üí° Commandes utiles:"
    print_info "  - ./bin/ath-prepare-commit --auto-fix  # Pr√©paration compl√®te"
    print_info "  - ./bin/ath-test.py                    # Tests complets"
    print_info "  - ./bin/ath-clean                      # Nettoyage complet"
    echo
}

# Ex√©cution
main "$@"

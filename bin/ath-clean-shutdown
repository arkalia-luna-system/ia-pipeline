#!/bin/bash
# Script de fermeture propre pour Athalia
# Automatise le processus de nettoyage, commit, push et arrêt des processus

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="athalia-dev-setup"
BRANCH="develop"
REMOTE="origin"

echo -e "${BLUE}🚀 Démarrage de la fermeture propre d'Athalia${NC}"
echo -e "${BLUE}📂 Projet: $PROJECT_NAME${NC}"
echo -e "${BLUE}🌿 Branche: $BRANCH${NC}"
echo ""

# Fonction pour afficher les étapes
show_step() {
    echo -e "${CYAN}▶️  $1${NC}"
}

# Fonction pour afficher le succès
show_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

# Fonction pour afficher l'erreur
show_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Fonction pour afficher l'avertissement
show_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# 1. Vérifier l'état du dépôt Git
show_step "1. Vérification de l'état Git"
if ! git status --porcelain | grep -q .; then
    show_success "Aucun changement en attente"
else
    show_warning "Changements détectés, préparation du commit..."
    
    # Ajouter tous les fichiers
    git add .
    
    # Créer un commit avec timestamp
    TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
    COMMIT_MSG="🧹 Nettoyage automatique - $TIMESTAMP
    
    - Nettoyage des fichiers temporaires
    - Mise à jour de la documentation
    - Correction des tests
    - Optimisation du code"
    
    if git commit -m "$COMMIT_MSG"; then
        show_success "Commit créé avec succès"
    else
        show_error "Erreur lors du commit"
        exit 1
    fi
fi

# 2. Pousser vers GitHub
show_step "2. Push vers GitHub"
if git push $REMOTE $BRANCH; then
    show_success "Code poussé vers $REMOTE/$BRANCH"
else
    show_error "Erreur lors du push"
    exit 1
fi

# 3. Arrêter tous les processus Athalia
show_step "3. Arrêt des processus Athalia"
PROCESSES_STOPPED=0

# Arrêter les processus Python liés à Athalia
for pid in $(pgrep -f "athalia\|ath-"); do
    if kill -TERM $pid 2>/dev/null; then
        show_success "Processus $pid arrêté"
        ((PROCESSES_STOPPED++))
    fi
done

# Arrêter les processus de test
for pid in $(pgrep -f "pytest.*athalia"); do
    if kill -TERM $pid 2>/dev/null; then
        show_success "Test $pid arrêté"
        ((PROCESSES_STOPPED++))
    fi
done

# Arrêter les serveurs de développement
for pid in $(pgrep -f "python.*server\|uvicorn\|flask"); do
    if kill -TERM $pid 2>/dev/null; then
        show_success "Serveur $pid arrêté"
        ((PROCESSES_STOPPED++))
    fi
done

if [ $PROCESSES_STOPPED -eq 0 ]; then
    show_success "Aucun processus à arrêter"
else
    show_success "$PROCESSES_STOPPED processus arrêtés"
fi

# 4. Nettoyer les fichiers temporaires macOS
show_step "4. Nettoyage des fichiers temporaires macOS"
if [ -f "./bin/ath-clean-macos-temp" ]; then
    if ./bin/ath-clean-macos-temp --execute; then
        show_success "Fichiers temporaires macOS nettoyés"
    else
        show_warning "Erreur lors du nettoyage macOS"
    fi
else
    show_warning "Script de nettoyage macOS non trouvé"
fi

# 5. Nettoyer les caches Python
show_step "5. Nettoyage des caches Python"
find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
find . -name "*.pyc" -delete 2>/dev/null || true
find . -name "*.pyo" -delete 2>/dev/null || true
show_success "Caches Python nettoyés"

# 6. Nettoyer les fichiers temporaires
show_step "6. Nettoyage des fichiers temporaires"
find . -name "*.tmp" -delete 2>/dev/null || true
find . -name "*.temp" -delete 2>/dev/null || true
find . -name "*.log" -not -path "./logs/*" -delete 2>/dev/null || true
show_success "Fichiers temporaires nettoyés"

# 7. Vérifier les règles de qualité
show_step "7. Vérification des règles de qualité"

# Vérifier la documentation
if [ -f "./docs/README.md" ] && [ -f "./docs/DEVELOPER/INDEX.md" ]; then
    show_success "Documentation principale présente"
else
    show_warning "Documentation manquante"
fi

# Vérifier les tests
if [ -d "./tests" ] && [ "$(find ./tests -name "*.py" | wc -l)" -gt 0 ]; then
    show_success "Tests présents"
else
    show_warning "Tests manquants"
fi

# Vérifier la structure du projet
if [ -f "./README.md" ] && [ -f "./requirements.txt" ]; then
    show_success "Structure du projet correcte"
else
    show_warning "Structure du projet incomplète"
fi

# 8. Vérifier l'état final
show_step "8. Vérification de l'état final"

# Vérifier qu'aucun processus ne tourne
RUNNING_PROCESSES=$(pgrep -f "athalia\|ath-" | wc -l)
if [ $RUNNING_PROCESSES -eq 0 ]; then
    show_success "Aucun processus Athalia en cours"
else
    show_warning "$RUNNING_PROCESSES processus encore actifs"
fi

# Vérifier l'espace disque
DISK_USAGE=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')
if [ $DISK_USAGE -lt 90 ]; then
    show_success "Espace disque suffisant ($DISK_USAGE%)"
else
    show_warning "Espace disque faible ($DISK_USAGE%)"
fi

# 9. Générer un rapport de fermeture
show_step "9. Génération du rapport de fermeture"
REPORT_FILE="./logs/shutdown_report_$(date +%Y%m%d_%H%M%S).txt"

mkdir -p ./logs

cat > "$REPORT_FILE" << EOF
=== RAPPORT DE FERMETURE ATHALIA ===
Date: $(date)
Projet: $PROJECT_NAME
Branche: $BRANCH

=== ÉTAT GIT ===
$(git status --porcelain | wc -l) fichiers modifiés
Dernier commit: $(git log -1 --oneline)

=== PROCESSUS ===
$PROCESSES_STOPPED processus arrêtés
$RUNNING_PROCESSES processus encore actifs

=== ESPACE DISQUE ===
Utilisation: $DISK_USAGE%

=== FICHIERS TEMPORAIRES ===
$(find . -name ".*" -type f | wc -l) fichiers cachés
$(find . -name "*.tmp" -o -name "*.temp" | wc -l) fichiers temporaires

=== DOCUMENTATION ===
README.md: $(test -f "./README.md" && echo "✅" || echo "❌")
Documentation développeur: $(test -f "./docs/DEVELOPER/INDEX.md" && echo "✅" || echo "❌")

=== TESTS ===
Fichiers de test: $(find ./tests -name "*.py" | wc -l)

=== RÉSUMÉ ===
Fermeture: $(test $RUNNING_PROCESSES -eq 0 && echo "✅ Propre" || echo "⚠️  Incomplète")
EOF

show_success "Rapport généré: $REPORT_FILE"

# 10. Affichage du résumé final
echo ""
echo -e "${PURPLE}🎉 FERMETURE TERMINÉE${NC}"
echo -e "${PURPLE}===================${NC}"
echo -e "${GREEN}✅ Code poussé vers GitHub${NC}"
echo -e "${GREEN}✅ Processus arrêtés${NC}"
echo -e "${GREEN}✅ Fichiers temporaires nettoyés${NC}"
echo -e "${GREEN}✅ Règles de qualité vérifiées${NC}"
echo -e "${GREEN}✅ Rapport généré${NC}"
echo ""
echo -e "${CYAN}📊 Statistiques:${NC}"
echo -e "   - Processus arrêtés: $PROCESSES_STOPPED"
echo -e "   - Espace disque: $DISK_USAGE%"
echo -e "   - Rapport: $REPORT_FILE"
echo ""
echo -e "${YELLOW}💡 Conseil: Vérifiez le rapport pour plus de détails${NC}"
echo "" 
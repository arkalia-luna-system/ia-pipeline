#!/bin/bash
# Script de d√©marrage rapide pour Athalia
# Red√©marre proprement l'environnement apr√®s une fermeture

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ D√©marrage rapide d'Athalia${NC}"
echo -e "${BLUE}üìÇ Projet: athalia-dev-setup${NC}"
echo ""

# Fonction pour afficher les √©tapes
show_step() {
    echo -e "${CYAN}‚ñ∂Ô∏è  $1${NC}"
}

# Fonction pour afficher le succ√®s
show_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

# Fonction pour afficher l'erreur
show_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction pour afficher l'avertissement
show_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# 1. V√©rifier l'environnement
show_step "1. V√©rification de l'environnement"

# V√©rifier Python
if command -v python3 &> /dev/null; then
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2)
    show_success "Python $PYTHON_VERSION d√©tect√©"
else
    show_error "Python3 non trouv√©"
    exit 1
fi

# V√©rifier Git
if command -v git &> /dev/null; then
    GIT_VERSION=$(git --version | cut -d' ' -f3)
    show_success "Git $GIT_VERSION d√©tect√©"
else
    show_error "Git non trouv√©"
    exit 1
fi

# 2. V√©rifier l'√©tat du projet
show_step "2. V√©rification de l'√©tat du projet"

# V√©rifier la branche
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" = "develop" ]; then
    show_success "Branche develop active"
else
    show_warning "Branche actuelle: $CURRENT_BRANCH (recommand√©: develop)"
fi

# V√©rifier les changements non commit√©s
if git status --porcelain | grep -q .; then
    show_warning "Changements non commit√©s d√©tect√©s"
    git status --short
else
    show_success "Aucun changement en attente"
fi

# 3. Charger les alias
show_step "3. Chargement des alias"

# Charger les alias de workflow
if [ -f "./setup/alias.sh" ]; then
    source ./setup/alias.sh
    show_success "Alias de workflow charg√©s"
else
    show_warning "Fichier d'alias non trouv√©"
fi

# Charger les alias de nettoyage
if [ -f "./setup/alias-clean-shutdown.sh" ]; then
    source ./setup/alias-clean-shutdown.sh
    show_success "Alias de fermeture charg√©s"
else
    show_warning "Fichier d'alias de fermeture non trouv√©"
fi

# 4. V√©rifier l'environnement virtuel
show_step "4. V√©rification de l'environnement virtuel"

if [ -d ".venv" ]; then
    show_success "Environnement virtuel d√©tect√©"

    # Activer l'environnement virtuel
    if source .venv/bin/activate 2>/dev/null; then
        show_success "Environnement virtuel activ√©"
    else
        show_warning "Impossible d'activer l'environnement virtuel"
    fi
else
    show_warning "Environnement virtuel non trouv√©"
    echo -e "${YELLOW}üí° Conseil: Cr√©ez un environnement virtuel avec 'python3 -m venv .venv'${NC}"
fi

# 5. V√©rifier les d√©pendances
show_step "5. V√©rification des d√©pendances"

if [ -f "requirements.txt" ]; then
    show_success "Fichier requirements.txt trouv√©"

    # V√©rifier si les d√©pendances sont install√©es
    if python3 -c "import athalia_core" 2>/dev/null; then
        show_success "Module athalia_core disponible"
    else
        show_warning "Module athalia_core non disponible"
        echo -e "${YELLOW}üí° Conseil: Installez les d√©pendances avec 'pip install -r requirements.txt'${NC}"
    fi
else
    show_warning "Fichier requirements.txt non trouv√©"
fi

# 6. V√©rifier les tests
show_step "6. V√©rification des tests"

if [ -d "tests" ] && [ "$(find tests -name "*.py" | wc -l)" -gt 0 ]; then
    TEST_COUNT=$(find tests -name "*.py" | wc -l)
    show_success "$TEST_COUNT fichiers de test trouv√©s"
else
    show_warning "Aucun test trouv√©"
fi

# 7. V√©rifier la documentation
show_step "7. V√©rification de la documentation"

if [ -f "README.md" ]; then
    show_success "README.md pr√©sent"
else
    show_warning "README.md manquant"
fi

if [ -f "docs/DEVELOPER/INDEX.md" ]; then
    show_success "Documentation d√©veloppeur pr√©sente"
else
    show_warning "Documentation d√©veloppeur manquante"
fi

# 8. Afficher les commandes disponibles
show_step "8. Commandes disponibles"

echo ""
echo -e "${PURPLE}üõ†Ô∏è  Commandes principales:${NC}"
echo -e "   ${CYAN}ath-test${NC}        - Ex√©cuter tous les tests"
echo -e "   ${CYAN}ath-lint${NC}        - V√©rifier la qualit√© du code"
echo -e "   ${CYAN}ath-clean${NC}       - Nettoyer le projet"
echo -e "   ${CYAN}ath-shutdown${NC}    - Fermeture propre"
echo -e "   ${CYAN}ath-help${NC}        - Afficher l'aide"
echo ""

echo -e "${PURPLE}üßπ Commandes de nettoyage:${NC}"
echo -e "   ${CYAN}ath-clean-macos${NC} - Nettoyer les fichiers temporaires macOS"
echo -e "   ${CYAN}ath-clean-macos-exec${NC} - Nettoyage forc√© macOS"
echo ""

echo -e "${PURPLE}üìä Commandes de monitoring:${NC}"
echo -e "   ${CYAN}ath-audit${NC}       - Audit complet du projet"
echo -e "   ${CYAN}ath-coverage${NC}    - Couverture de tests"
echo -e "   ${CYAN}ath-build${NC}       - Build du projet"
echo ""

# 9. V√©rifier l'√©tat final
show_step "9. √âtat final"

# V√©rifier l'espace disque
DISK_USAGE=$(df . | tail -1 | awk '{print $5}' | sed 's/%//')
if [ $DISK_USAGE -lt 90 ]; then
    show_success "Espace disque suffisant ($DISK_USAGE%)"
else
    show_warning "Espace disque faible ($DISK_USAGE%)"
fi

# V√©rifier les processus en cours
RUNNING_PROCESSES=$(pgrep -f "athalia\|ath-" | wc -l)
if [ $RUNNING_PROCESSES -eq 0 ]; then
    show_success "Aucun processus Athalia en cours"
else
    show_warning "$RUNNING_PROCESSES processus Athalia actifs"
fi

# 10. Affichage du r√©sum√© final
echo ""
echo -e "${PURPLE}üéâ D√âMARRAGE TERMIN√â${NC}"
echo -e "${PURPLE}===================${NC}"
echo -e "${GREEN}‚úÖ Environnement v√©rifi√©${NC}"
echo -e "${GREEN}‚úÖ Alias charg√©s${NC}"
echo -e "${GREEN}‚úÖ Projet pr√™t${NC}"
echo ""
echo -e "${CYAN}üìä Statistiques:${NC}"
echo -e "   - Branche: $CURRENT_BRANCH"
echo -e "   - Espace disque: $DISK_USAGE%"
echo -e "   - Processus actifs: $RUNNING_PROCESSES"
echo ""
echo -e "${YELLOW}üí° Conseil: Utilisez 'ath-help' pour voir toutes les commandes disponibles${NC}"
echo ""

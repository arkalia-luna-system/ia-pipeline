#!/usr/bin/env python3
"""
Script pour nettoyer les octets null des fichiers Python.
"""

import glob
import os
import sys
from pathlib import Path


def clean_null_bytes(filepath):
    """Nettoie les octets null d'un fichier."""
    try:
        with open(filepath, 'rb') as f:
            content = f.read()
        
        if b'\x00' in content:
            original_size = len(content)
            content = content.replace(b'\x00', b'')
            new_size = len(content)
            
            with open(filepath, 'wb') as f:
                f.write(content)
            
            print(f'✅ Nettoyé: {filepath} ({original_size - new_size} octets null supprimés)')
            return True
        else:
            print(f'⏭️  Ignoré: {filepath} (pas d\'octets null)')
            return False
            
    except Exception as e:
        print(f'❌ Erreur avec {filepath}: {e}')
        return False

def main():
    """Fonction principale."""
    print("🧹 NETTOYAGE DES OCTETS NULL")
    print("="*40)
    
    # Répertoires à nettoyer
    directories = [
        'athalia_core',
        'scripts', 
        'tools',
        'bin',
        'tests',
        'plugins'
    ]
    
    total_files = 0
    cleaned_files = 0
    
    for directory in directories:
        if not os.path.exists(directory):
            continue
            
        print(f"\n📁 Traitement de {directory}/")
        pattern = os.path.join(directory, '**', '*.py')
        
        for filepath in glob.glob(pattern, recursive=True):
            total_files += 1
            if clean_null_bytes(filepath):
                cleaned_files += 1
    
    print(f"\n📊 RÉSUMÉ:")
    print(f"   Total de fichiers: {total_files}")
    print(f"   Fichiers nettoyés: {cleaned_files}")
    print(f"   Fichiers inchangés: {total_files - cleaned_files}")
    
    if cleaned_files > 0:
        print(f"\n🎉 Nettoyage terminé! {cleaned_files} fichiers ont été nettoyés.")
    else:
        print(f"\n✨ Aucun octet null trouvé dans les fichiers Python.")

if __name__ == "__main__":
    main() 
#!/usr/bin/env python3
"""
Script de linting s√©curis√© pour Athalia.
Ex√©cute tous les outils de qualit√© et s√©curit√©.
"""

import json
import os
import subprocess
import sys
import time
from pathlib import Path
from typing import Any, Dict, List

# Configuration
TOOLS = {
    "black": {
        "command": ["black", "--check", "--diff", "--line-length=88", "--preview", "."],
        "description": "Formatage du code",
        "critical": False
    },
    "isort": {
        "command": ["isort", "--check-only", "--diff", "--profile=black", "."],
        "description": "Organisation des imports",
        "critical": False
    },
    "flake8": {
        "command": ["flake8", "--config=config/.flake8", "."],
        "description": "Analyse statique du code",
        "critical": True
    },
    "mypy": {
        "command": ["mypy", "--config-file=config/pyproject.toml", "athalia_core"],
        "description": "V√©rification des types",
        "critical": False
    },
    "bandit": {
        "command": ["bandit", "-c", "config/.bandit", "-r", "athalia_core", "scripts", "tools"],
        "description": "Analyse de s√©curit√©",
        "critical": True
    },
    "safety": {
        "command": ["safety", "check", "--json"],
        "description": "V√©rification des vuln√©rabilit√©s",
        "critical": True
    },
    "pip-audit": {
        "command": ["pip-audit", "--format=json"],
        "description": "Audit des d√©pendances",
        "critical": True
    }
}

def run_tool(name: str, config: Dict[str, Any]) -> Dict[str, Any]:
    """Ex√©cute un outil de linting."""
    print(f"üîç {config['description']} ({name})...")
    
    start_time = time.time()
    result = {
        "name": name,
        "description": config["description"],
        "success": False,
        "output": "",
        "error": "",
        "duration": 0,
        "critical": config["critical"]
    }
    
    try:
        # Ex√©cuter l'outil
        process = subprocess.run(
            config["command"],
            capture_output=True,
            text=True,
            cwd=Path.cwd(),
            timeout=300  # 5 minutes max
        )
        
        result["duration"] = time.time() - start_time
        result["output"] = process.stdout
        result["error"] = process.stderr
        result["success"] = process.returncode == 0
        
        if result["success"]:
            print(f"‚úÖ {name}: OK ({result['duration']:.2f}s)")
        else:
            print(f"‚ùå {name}: √âCHEC ({result['duration']:.2f}s)")
            if result["error"]:
                print(f"   Erreur: {result['error'][:200]}...")
            if result["output"]:
                print(f"   Sortie: {result['output'][:200]}...")
                
    except subprocess.TimeoutExpired:
        result["error"] = "Timeout (5 minutes d√©pass√©es)"
        print(f"‚è∞ {name}: TIMEOUT")
    except FileNotFoundError:
        result["error"] = f"Outil {name} non trouv√©"
        print(f"üö´ {name}: NON INSTALL√â")
    except Exception as e:
        result["error"] = str(e)
        print(f"üí• {name}: ERREUR - {e}")
    
    return result

def generate_report(results: List[Dict[str, Any]]) -> None:
    """G√©n√®re un rapport de linting."""
    print("\n" + "="*60)
    print("üìä RAPPORT DE LINTING S√âCURIS√â")
    print("="*60)
    
    # Statistiques
    total = len(results)
    successful = sum(1 for r in results if r["success"])
    failed = total - successful
    critical_failed = sum(1 for r in results if not r["success"] and r["critical"])
    
    print(f"üìà Total: {total} outils")
    print(f"‚úÖ Succ√®s: {successful}")
    print(f"‚ùå √âchecs: {failed}")
    print(f"üö® Critiques √©chou√©s: {critical_failed}")
    
    # D√©tails par outil
    print("\nüîç D√âTAILS PAR OUTIL:")
    for result in results:
        status = "‚úÖ" if result["success"] else "‚ùå"
        critical = "üö®" if result["critical"] else "  "
        print(f"{status} {critical} {result['name']}: {result['description']}")
        if not result["success"] and result["error"]:
            print(f"   Erreur: {result['error']}")
    
    # Sauvegarde du rapport
    report_file = f"logs/linting_report_{int(time.time())}.json"
    os.makedirs("logs", exist_ok=True)
    with open(report_file, "w") as f:
        json.dump({
            "timestamp": time.time(),
            "summary": {
                "total": total,
                "successful": successful,
                "failed": failed,
                "critical_failed": critical_failed
            },
            "results": results
        }, f, indent=2)
    
    print(f"\nüíæ Rapport sauvegard√©: {report_file}")
    
    # Code de retour
    if critical_failed > 0:
        print("\nüö® ERREURS CRITIQUES D√âTECT√âES!")
        sys.exit(1)
    elif failed > 0:
        print("\n‚ö†Ô∏è  ERREURS NON-CRITIQUES D√âTECT√âES")
        sys.exit(2)
    else:
        print("\nüéâ TOUS LES TESTS PASSENT!")
        sys.exit(0)

def main():
    """Fonction principale."""
    print("üõ°Ô∏è  LINTING S√âCURIS√â ATHALIA")
    print("="*40)
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if not Path("athalia_core").exists():
        print("‚ùå Erreur: R√©pertoire athalia_core non trouv√©")
        print("   Ex√©cutez ce script depuis la racine du projet")
        sys.exit(1)
    
    # Ex√©cuter tous les outils
    results = []
    for name, config in TOOLS.items():
        result = run_tool(name, config)
        results.append(result)
    
    # G√©n√©rer le rapport
    generate_report(results)

if __name__ == "__main__":
    main() 
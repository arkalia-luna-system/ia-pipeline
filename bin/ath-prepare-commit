#!/bin/bash
# Script de pr√©paration au commit Athalia
# Ex√©cute toutes les v√©rifications et corrections avant le commit

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Variables
DRY_RUN=false
AUTO_FIX=false
SKIP_TESTS=false
VERBOSE=false

# Fonctions d'affichage
print_header() {
    echo -e "${PURPLE}üöÄ Pr√©paration au commit Athalia${NC}"
    echo -e "${BLUE}üìã V√©rifications et corrections automatiques${NC}"
    echo
}

print_section() {
    echo -e "${BLUE}üìã $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run|-d)
            DRY_RUN=true
            shift
            ;;
        --auto-fix|-a)
            AUTO_FIX=true
            shift
            ;;
        --skip-tests|-s)
            SKIP_TESTS=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --help|-h)
            echo "Usage: ./bin/ath-prepare-commit [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --dry-run, -d     Mode simulation (ne fait rien)"
            echo "  --auto-fix, -a    Correction automatique des probl√®mes d√©tect√©s"
            echo "  --skip-tests, -s  Ignore les tests (plus rapide)"
            echo "  --verbose, -v     Affichage d√©taill√©"
            echo "  --help, -h        Affiche cette aide"
            echo ""
            echo "Ce script pr√©pare automatiquement votre commit en:"
            echo "  - Nettoyant les fichiers polluants"
            echo "  - V√©rifiant le linting"
            echo "  - Ex√©cutant les tests essentiels"
            echo "  - V√©rifiant la configuration"
            exit 0
            ;;
        *)
            print_error "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# Fonction principale
main() {
    print_header

    # √âtape 1: V√©rification de l'√©tat Git
    print_section "V√©rification de l'√©tat Git"
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Pas dans un d√©p√¥t Git"
        exit 1
    fi

    # V√©rifier s'il y a des changements
    if [ -z "$(git status --porcelain)" ]; then
        print_warning "Aucun changement d√©tect√©"
        exit 0
    fi

    print_success "√âtat Git OK"

    # √âtape 2: Nettoyage automatique
    print_section "Nettoyage automatique"
    if [ "$DRY_RUN" = false ]; then
        if [ "$VERBOSE" = true ]; then
            ./bin/ath-clean --dry-run
        else
            ./bin/ath-clean --dry-run > /dev/null 2>&1
        fi

        # Nettoyage des caches Python
        find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
        find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true

        print_success "Nettoyage termin√©"
    else
        print_info "Mode simulation - nettoyage ignor√©"
    fi

    # √âtape 3: V√©rification des fichiers polluants
    print_section "V√©rification des fichiers polluants"
    if python -m pytest tests/test_no_polluting_files.py::TestNoPollutingFiles::test_no_macos_hidden_files -q >/dev/null 2>&1; then
        print_success "Aucun fichier cach√© macOS"
    else
        print_warning "Fichiers cach√©s macOS d√©tect√©s"
        if [ "$AUTO_FIX" = true ] && [ "$DRY_RUN" = false ]; then
            find . -name "._*" -not -path "./.git/*" -not -path "./.venv/*" -delete 2>/dev/null || true
            print_success "Fichiers cach√©s supprim√©s"
        fi
    fi

    # √âtape 4: Linting et formatage automatique
    print_section "Formatage et linting automatique"
    STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)
    UNSTAGED_FILES=$(git diff --name-only | grep '\.py$' || true)
    ALL_PY_FILES="$STAGED_FILES $UNSTAGED_FILES"

    if [ -n "$ALL_PY_FILES" ]; then
        if [ "$AUTO_FIX" = true ] && [ "$DRY_RUN" = false ]; then
            print_info "Formatage automatique en cours..."

            # Formatage avec isort (organisation des imports)
            print_info "  - Organisation des imports (isort)..."
            echo "$ALL_PY_FILES" | xargs -r isort --profile=black --line-length=88

            # Formatage avec black
            print_info "  - Formatage du code (black)..."
            echo "$ALL_PY_FILES" | xargs -r black --line-length=88

            # Formatage avec ruff
            print_info "  - Formatage avanc√© (ruff)..."
            echo "$ALL_PY_FILES" | xargs -r ruff format --line-length=88

            # Linting avec ruff
            print_info "  - V√©rification du linting (ruff)..."
            echo "$ALL_PY_FILES" | xargs -r ruff check --fix --exit-non-zero-on-fix || true

            # Ajout automatique des fichiers modifi√©s
            print_info "  - Ajout des fichiers modifi√©s..."
            MODIFIED_FILES=$(git diff --name-only | grep '\.py$' || true)
            if [ -n "$MODIFIED_FILES" ]; then
                echo "$MODIFIED_FILES" | xargs -r git add
                print_success "Fichiers format√©s ajout√©s au staging"
            fi

            print_success "Formatage automatique termin√©"
        else
            # V√©rification seulement
            print_info "V√©rification du formatage..."
            if echo "$ALL_PY_FILES" | xargs -r black --check --line-length=88 2>/dev/null; then
                print_success "Formatage Black OK"
            else
                print_warning "Probl√®mes de formatage Black d√©tect√©s"
            fi

            if echo "$ALL_PY_FILES" | xargs -r isort --check-only --profile=black --line-length=88 2>/dev/null; then
                print_success "Organisation des imports OK"
            else
                print_warning "Probl√®mes d'organisation des imports d√©tect√©s"
            fi
        fi
    else
        print_info "Aucun fichier Python modifi√©"
    fi

    # √âtape 5: Tests essentiels (si activ√©s)
    if [ "$SKIP_TESTS" = false ]; then
        print_section "Tests essentiels"

        # Tests de base
        if python -m pytest tests/test_imports_all.py -q >/dev/null 2>&1; then
            print_success "Tests d'imports OK"
        else
            print_warning "Probl√®mes d'imports d√©tect√©s"
        fi

        if python -m pytest tests/test_encoding_utf8.py -q >/dev/null 2>&1; then
            print_success "Tests d'encodage OK"
        else
            print_warning "Probl√®mes d'encodage d√©tect√©s"
        fi

        # Tests de s√©curit√© (mode adaptatif)
        if python -m pytest tests/test_security_patterns.py -q >/dev/null 2>&1; then
            print_success "Tests de s√©curit√© OK"
        else
            print_warning "Probl√®mes de s√©curit√© d√©tect√©s (mode adaptatif)"
        fi
    else
        print_info "Tests ignor√©s (--skip-tests)"
    fi

    # √âtape 6: V√©rification de la configuration
    print_section "V√©rification de la configuration"
    MISSING_CONFIGS=0
    for config_file in config/requirements.txt config/athalia_config.yaml README.md; do
        if [ -f "$config_file" ]; then
            print_success "$config_file pr√©sent"
        else
            print_warning "$config_file manquant"
            MISSING_CONFIGS=$((MISSING_CONFIGS + 1))
        fi
    done

    if [ $MISSING_CONFIGS -gt 1 ]; then
        print_error "Trop de fichiers de configuration manquants"
        exit 1
    fi

    # √âtape 7: R√©sum√© et recommandations
    echo
    print_success "üéâ Pr√©paration au commit termin√©e !"
    echo
    print_info "üìã Prochaines √©tapes recommand√©es:"
    print_info "  1. git add ."
    print_info "  2. git commit -m \"votre message\""
    print_info "  3. git push"
    echo
    print_info "üí° Commandes utiles:"
    print_info "  - ./bin/ath-test.py          # Tests complets"
    print_info "  - ./bin/ath-lint-secure      # Linting s√©curis√©"
    print_info "  - ./bin/ath-clean            # Nettoyage complet"
    echo

    if [ "$DRY_RUN" = true ]; then
        print_warning "Mode simulation - aucune modification effectu√©e"
    fi
}

# Ex√©cution
main "$@"

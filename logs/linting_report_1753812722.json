{
  "timestamp": 1753812722.2166011,
  "summary": {
    "total": 7,
    "successful": 0,
    "failed": 7,
    "critical_failed": 4
  },
  "results": [
    {
      "name": "black",
      "description": "Formatage du code",
      "success": false,
      "output": "",
      "error": "Usage: black [OPTIONS] SRC ...\n\nOne of 'SRC' or 'code' is required.\n",
      "duration": 0.09791994094848633,
      "critical": false
    },
    {
      "name": "isort",
      "description": "Organisation des imports",
      "success": false,
      "output": "\n\n                 _                 _\n                (_) ___  ___  _ __| |_\n                | |/ _/ / _ \\/ '__  _/\n                | |\\__ \\/\\_\\/| |  | |_\n                |_|\\___/\\___/\\_/   \\_/\n\n      isort your imports, so you don't have to.\n\n                    VERSION 6.0.1\n\n\nNothing to do: no files or paths have been passed in!\n\nTry one of the following:\n\n    `isort .` - sort all Python files, starting from the current directory, recursively.\n    `isort . --interactive` - Do the same, but ask before making any changes.\n    `isort . --check --diff` - Check to see if imports are correctly sorted within this project.\n    `isort --help` - In-depth information about isort's available command-line options.\n\nVisit https://pycqa.github.io/isort/ for complete information about how to use isort.\n\n",
      "error": "Error: arguments passed in without any paths or content.\n",
      "duration": 0.16019892692565918,
      "critical": false
    },
    {
      "name": "flake8",
      "description": "Analyse statique du code",
      "success": false,
      "output": "",
      "error": "multiprocessing.pool.RemoteTraceback: \n\"\"\"\nTraceback (most recent call last):\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/checker.py\", line 82, in _mp_run\n    ).run_checks()\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/checker.py\", line 526, in run_checks\n    self.run_ast_checks()\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/checker.py\", line 418, in run_ast_checks\n    ast = self.processor.build_ast()\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/processor.py\", line 240, in build_ast\n    return ast.parse(\"\".join(self.lines))\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\nValueError: source code string cannot contain null bytes\n\"\"\"\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/bin/flake8\", line 8, in <module>\n    sys.exit(main())\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/main/cli.py\", line 23, in main\n    app.run(argv)\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/main/application.py\", line 198, in run\n    self._run(argv)\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/main/application.py\", line 187, in _run\n    self.run_checks()\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/main/application.py\", line 103, in run_checks\n    self.file_checker_manager.run()\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/checker.py\", line 235, in run\n    self.run_parallel()\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/site-packages/flake8/checker.py\", line 204, in run_parallel\n    self.results = list(pool.imap_unordered(_mp_run, self.filenames))\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/multiprocessing/pool.py\", line 873, in next\n    raise value\nValueError: source code string cannot contain null bytes\n",
      "duration": 0.5736231803894043,
      "critical": true
    },
    {
      "name": "mypy",
      "description": "V\u00e9rification des types",
      "success": false,
      "output": "",
      "error": "usage: mypy [-h] [-v] [-V] [more options; see below]\n            [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...]\nmypy: error: Missing target module, package, files, or command.\n",
      "duration": 0.22884082794189453,
      "critical": false
    },
    {
      "name": "bandit",
      "description": "Analyse de s\u00e9curit\u00e9",
      "success": false,
      "output": "",
      "error": "[config]\tERROR\texpected '<document start>', but found '<scalar>'\n  in \"config/.bandit\", line 2, column 1\n[main]\tERROR\tconfig/.bandit : Error parsing file.\n",
      "duration": 0.16748905181884766,
      "critical": true
    },
    {
      "name": "safety",
      "description": "V\u00e9rification des vuln\u00e9rabilit\u00e9s",
      "success": false,
      "output": "\n\n+===========================================================================================================================================================================================+\n\n\nDEPRECATED: this command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.\n\n\nWe highly encourage switching to the new `scan` command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.\n\n\n+===========================================================================================================================================================================================+\n\n\n",
      "error": "/opt/homebrew/lib/python3.11/site-packages/safety/safety.py:1585: UserWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html. The pkg_resources package is slated for removal as early as 2025-11-30. Refrain from using this package or pin to Setuptools<81.\n  import pkg_resources\nUnhandled exception happened: post_dump() got an unexpected keyword argument 'pass_many'\n",
      "duration": 5.666525840759277,
      "critical": true
    },
    {
      "name": "pip-audit",
      "description": "Audit des d\u00e9pendances",
      "success": false,
      "output": "{\"dependencies\": [{\"name\": \"absl-py\", \"version\": \"2.2.1\", \"vulns\": []}, {\"name\": \"aiohappyeyeballs\", \"version\": \"2.6.1\", \"vulns\": []}, {\"name\": \"aiohttp\", \"version\": \"3.11.15\", \"vulns\": [{\"id\": \"GHSA-9548-qrrj-x5pj\", \"fix_versions\": [\"3.12.14\"], \"aliases\": [\"CVE-2025-53643\"], \"description\": \"### Summary The Python parser is vulnerable to a request smuggling vulnerability due to not parsing trailer sections of an HTTP request.  ### Impact If a pure Python version of aiohttp is installed (i.e. without the usual C extensions) or AIOHTTP_NO_EXTENSIONS is enabled, then an attacker may be able to execute a request smuggling attack to bypass certain firewalls or proxy protections.  ----  Patch: https://github.com/aio-libs/aiohttp/commit/e8d774f635dc6d1cd3174d0e38891da5de0e2b6a\"}]}, {\"name\": \"aiosignal\", \"version\": \"1.3.2\", \"vulns\": []}, {\"name\": \"alembic\", \"version\": \"1.15.1\", \"vulns\": []}, {\"name\": \"amqp\", \"version\": \"5.3.1\", \"vulns\": []}, {\"name\": \"annotated-types\", \"version\": \"0.7.0\", \"vulns\": []}, {\"name\": \"anyascii\", \"version\": \"0.3.2\", \"vulns\": []}, {\"name\": \"anyio\", \"version\": \"4.9.0\", \"vulns\": []}, {\"name\": \"astroid\", \"version\": \"3.3.9\", \"vulns\": []}, {\"name\": \"attrs\", \"version\": \"25.3.0\", \"vulns\": []}, {\"name\": \"audioread\", \"version\": \"3.0.1\", \"vulns\": []}, {\"name\": \"authlib\", \"version\": \"1.5.2\", \"vulns\": []}, {\"name\": \"babel\", \"version\": \"2.17.0\", \"vulns\": []}, {\"name\": \"bandit\", \"version\": \"1.8.3\", \"vulns\": []}, {\"name\": \"bangla\", \"version\": \"0.0.2\", \"vulns\": []}, {\"name\": \"bcrypt\", \"version\": \"4.3.0\", \"vulns\": []}, {\"name\": \"black\", \"version\": \"25.1.0\", \"vulns\": []}, {\"name\": \"blinker\", \"version\": \"1.9.0\", \"vulns\": []}, {\"name\": \"blis\", \"version\": \"1.2.1\", \"vulns\": []}, {\"name\": \"bnnumerizer\", \"version\": \"0.0.2\", \"vulns\": []}, {\"name\": \"bnunicodenormalizer\", \"version\": \"0.1.7\", \"vulns\": []}, {\"name\": \"boolean-py\", \"version\": \"5.0\", \"vulns\": []}, {\"name\": \"cachecontrol\", \"version\": \"0.14.2\", \"vulns\": []}, {\"name\": \"cachetools\", \"version\": \"5.5.2\", \"vulns\": []}, {\"name\": \"catalogue\", \"version\": \"2.0.10\", \"vulns\": []}, {\"name\": \"certifi\", \"version\": \"2025.1.31\", \"vulns\": []}, {\"name\": \"cffi\", \"version\": \"1.17.1\", \"vulns\": []}, {\"name\": \"charset-normalizer\", \"version\": \"3.4.1\", \"vulns\": []}, {\"name\": \"click\", \"version\": \"8.1.8\", \"vulns\": []}, {\"name\": \"cloudpathlib\", \"version\": \"0.21.0\", \"vulns\": []}, {\"name\": \"confection\", \"version\": \"0.1.5\", \"vulns\": []}, {\"name\": \"contourpy\", \"version\": \"1.3.1\", \"vulns\": []}, {\"name\": \"coqpit\", \"version\": \"0.0.17\", \"vulns\": []}, {\"name\": \"coverage\", \"version\": \"7.8.0\", \"vulns\": []}, {\"name\": \"croniter\", \"version\": \"6.0.0\", \"vulns\": []}, {\"name\": \"cryptography\", \"version\": \"44.0.2\", \"vulns\": []}, {\"name\": \"cycler\", \"version\": \"0.12.1\", \"vulns\": []}, {\"name\": \"cyclonedx-python-lib\", \"version\": \"9.1.0\", \"vulns\": []}, {\"name\": \"cymem\", \"version\": \"2.0.11\", \"vulns\": []}, {\"name\": \"cython\", \"version\": \"3.0.12\", \"vulns\": []}, {\"name\": \"dateparser\", \"version\": \"1.1.8\", \"vulns\": []}, {\"name\": \"debtcollector\", \"version\": \"3.0.0\", \"vulns\": []}, {\"name\": \"decorator\", \"version\": \"5.2.1\", \"vulns\": []}, {\"name\": \"defusedxml\", \"version\": \"0.7.1\", \"vulns\": []}, {\"name\": \"dill\", \"version\": \"0.4.0\", \"vulns\": []}, {\"name\": \"distro\", \"version\": \"1.9.0\", \"vulns\": []}, {\"name\": \"dnspython\", \"version\": \"2.7.0\", \"vulns\": []}, {\"name\": \"docopt\", \"version\": \"0.6.2\", \"vulns\": []}, {\"name\": \"dodgy\", \"version\": \"0.2.1\", \"vulns\": []}, {\"name\": \"dogpile-cache\", \"version\": \"1.3.4\", \"vulns\": []}, {\"name\": \"dparse\", \"version\": \"0.6.4\", \"vulns\": []}, {\"name\": \"ecdsa\", \"version\": \"0.19.1\", \"vulns\": []}, {\"name\": \"edge-tts\", \"version\": \"7.0.0\", \"vulns\": []}, {\"name\": \"einops\", \"version\": \"0.8.1\", \"vulns\": []}, {\"name\": \"encodec\", \"version\": \"0.1.1\", \"vulns\": []}, {\"name\": \"eventlet\", \"version\": \"0.39.1\", \"vulns\": []}, {\"name\": \"fastapi\", \"version\": \"0.115.12\", \"vulns\": []}, {\"name\": \"fasteners\", \"version\": \"0.19\", \"vulns\": []}, {\"name\": \"filelock\", \"version\": \"3.16.1\", \"vulns\": []}, {\"name\": \"flake8\", \"version\": \"7.2.0\", \"vulns\": []}, {\"name\": \"flake8-polyfill\", \"version\": \"1.0.2\", \"vulns\": []}, {\"name\": \"flask\", \"version\": \"3.1.0\", \"vulns\": [{\"id\": \"GHSA-4grg-w6v8-c28g\", \"fix_versions\": [\"3.1.1\"], \"aliases\": [\"CVE-2025-47278\"], \"description\": \"In Flask 3.1.0, the way fallback key configuration was handled resulted in the last fallback key being used for signing, rather than the current signing key.  Signing is provided by the `itsdangerous` library. A list of keys can be passed, and it expects the last (top) key in the list to be the most recent key, and uses that for signing. Flask was incorrectly constructing that list in reverse, passing the signing key first.  Sites that have opted-in to use key rotation by setting `SECRET_KEY_FALLBACKS` are likely to unexpectedly be signing their sessions with stale keys, and their transition to fresher keys will be impeded. Sessions are still signed, so this would not cause any sort of data integrity loss.\"}]}, {\"name\": \"fonttools\", \"version\": \"4.56.0\", \"vulns\": []}, {\"name\": \"frozenlist\", \"version\": \"1.5.0\", \"vulns\": []}, {\"name\": \"fsspec\", \"version\": \"2025.3.2\", \"vulns\": []}, {\"name\": \"futurist\", \"version\": \"3.1.0\", \"vulns\": []}, {\"name\": \"g2pkk\", \"version\": \"0.1.2\", \"vulns\": []}, {\"name\": \"gitdb\", \"version\": \"4.0.12\", \"vulns\": []}, {\"name\": \"gitpython\", \"version\": \"3.1.44\", \"vulns\": []}, {\"name\": \"greenlet\", \"version\": \"3.1.1\", \"vulns\": []}, {\"name\": \"grpcio\", \"version\": \"1.71.0\", \"vulns\": []}, {\"name\": \"gruut\", \"version\": \"2.2.3\", \"vulns\": []}, {\"name\": \"gruut-ipa\", \"version\": \"0.13.0\", \"vulns\": []}, {\"name\": \"gruut-lang-de\", \"version\": \"2.0.1\", \"vulns\": []}, {\"name\": \"gruut-lang-en\", \"version\": \"2.0.1\", \"vulns\": []}, {\"name\": \"gruut-lang-es\", \"version\": \"2.0.1\", \"vulns\": []}, {\"name\": \"gruut-lang-fr\", \"version\": \"2.0.2\", \"vulns\": []}, {\"name\": \"h11\", \"version\": \"0.14.0\", \"vulns\": [{\"id\": \"GHSA-vqfr-h8mv-ghfj\", \"fix_versions\": [\"0.16.0\"], \"aliases\": [\"CVE-2025-43859\"], \"description\": \"### Impact  A leniency in h11's parsing of line terminators in chunked-coding message bodies can lead to request smuggling vulnerabilities under certain conditions.  ### Details  HTTP/1.1 Chunked-Encoding bodies are formatted as a sequence of \\\"chunks\\\", each of which consists of:  - chunk length - `\\\\r\\\\n` - `length` bytes of content - `\\\\r\\\\n`  In versions of h11 up to 0.14.0, h11 instead parsed them as:  - chunk length - `\\\\r\\\\n` - `length` bytes of content - any two bytes  i.e. it did not validate that the trailing `\\\\r\\\\n` bytes were correct, and if you put 2 bytes of garbage there it would be accepted, instead of correctly rejecting the body as malformed.  By itself this is harmless. However, suppose you have a proxy or reverse-proxy that tries to analyze HTTP requests, and your proxy has a _different_ bug in parsing Chunked-Encoding, acting as if the format is:  - chunk length - `\\\\r\\\\n` - `length` bytes of content - more bytes of content, as many as it takes until you find a `\\\\r\\\\n`  For example, [pound](https://github.com/graygnuorg/pound/pull/43) had this bug -- it can happen if an implementer uses a generic \\\"read until end of line\\\" helper to consumes the trailing `\\\\r\\\\n`.  In this case, h11 and your proxy may both accept the same stream of bytes, but interpret them differently. For example, consider the following HTTP request(s) (assume all line breaks are `\\\\r\\\\n`):  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX2 45 0  GET /two HTTP/1.1 Host: localhost Transfer-Encoding: chunked  0 ```  Here h11 will interpret it as two requests, one with body `AAAAA45` and one with an empty body, while our hypothetical buggy proxy will interpret it as a single request, with body `AAAAXX20\\\\r\\\\n\\\\r\\\\nGET /two ...`. And any time two HTTP processors both accept the same string of bytes but interpret them differently, you have the conditions for a \\\"request smuggling\\\" attack. For example, if `/two` is a dangerous endpoint and the job of the reverse proxy is to stop requests from getting there, then an attacker could use a bytestream like the above to circumvent this protection.  Even worse, if our buggy reverse proxy receives two requests from different users:  ``` GET /one HTTP/1.1 Host: localhost Transfer-Encoding: chunked  5 AAAAAXX999 0 ```  ``` GET /two HTTP/1.1 Host: localhost Cookie: SESSION_KEY=abcdef... ```  ...it will consider the first request to be complete and valid, and send both on to the h11-based web server over the same socket. The server will then see the two concatenated requests, and interpret them as _one_ request to `/one` whose body includes `/two`'s session key, potentially allowing one user to steal another's credentials.  ### Patches  Fixed in h11 0.15.0.  ### Workarounds  Since exploitation requires the combination of buggy h11 with a buggy (reverse) proxy, fixing either component is sufficient to mitigate this issue.  ### Credits  Reported by Jeppe Bonde Weikop on 2025-01-09.\"}]}, {\"name\": \"hangul-romanize\", \"version\": \"0.1.0\", \"vulns\": []}, {\"name\": \"httpcore\", \"version\": \"1.0.7\", \"vulns\": []}, {\"name\": \"httpx\", \"version\": \"0.28.1\", \"vulns\": []}, {\"name\": \"huggingface-hub\", \"version\": \"0.30.1\", \"vulns\": []}, {\"name\": \"idna\", \"version\": \"3.10\", \"vulns\": []}, {\"name\": \"importlib-metadata\", \"version\": \"8.6.1\", \"vulns\": []}, {\"name\": \"inflect\", \"version\": \"7.5.0\", \"vulns\": []}, {\"name\": \"iniconfig\", \"version\": \"2.1.0\", \"vulns\": []}, {\"name\": \"iso8601\", \"version\": \"2.1.0\", \"vulns\": []}, {\"name\": \"isort\", \"version\": \"6.0.1\", \"vulns\": []}, {\"name\": \"itsdangerous\", \"version\": \"2.2.0\", \"vulns\": []}, {\"name\": \"jamo\", \"version\": \"0.4.1\", \"vulns\": []}, {\"name\": \"jieba\", \"version\": \"0.42.1\", \"vulns\": []}, {\"name\": \"jinja2\", \"version\": \"3.1.6\", \"vulns\": []}, {\"name\": \"jiter\", \"version\": \"0.9.0\", \"vulns\": []}, {\"name\": \"joblib\", \"version\": \"1.4.2\", \"vulns\": []}, {\"name\": \"jose\", \"version\": \"1.0.0\", \"vulns\": []}, {\"name\": \"jsonlines\", \"version\": \"1.2.0\", \"vulns\": []}, {\"name\": \"jsonschema\", \"version\": \"4.23.0\", \"vulns\": []}, {\"name\": \"jsonschema-specifications\", \"version\": \"2024.10.1\", \"vulns\": []}, {\"name\": \"keystoneauth1\", \"version\": \"5.10.0\", \"vulns\": []}, {\"name\": \"keystonemiddleware\", \"version\": \"10.9.0\", \"vulns\": []}, {\"name\": \"kiwisolver\", \"version\": \"1.4.8\", \"vulns\": []}, {\"name\": \"kombu\", \"version\": \"5.5.0\", \"vulns\": []}, {\"name\": \"langcodes\", \"version\": \"3.5.0\", \"vulns\": []}, {\"name\": \"language-data\", \"version\": \"1.3.0\", \"vulns\": []}, {\"name\": \"lazy-loader\", \"version\": \"0.4\", \"vulns\": []}, {\"name\": \"librosa\", \"version\": \"0.11.0\", \"vulns\": []}, {\"name\": \"license-expression\", \"version\": \"30.4.1\", \"vulns\": []}, {\"name\": \"llvmlite\", \"version\": \"0.44.0\", \"vulns\": []}, {\"name\": \"mako\", \"version\": \"1.3.9\", \"vulns\": []}, {\"name\": \"marisa-trie\", \"version\": \"1.2.1\", \"vulns\": []}, {\"name\": \"markdown\", \"version\": \"3.7\", \"vulns\": []}, {\"name\": \"markdown-it-py\", \"version\": \"3.0.0\", \"vulns\": []}, {\"name\": \"markupsafe\", \"version\": \"3.0.2\", \"vulns\": []}, {\"name\": \"marshmallow\", \"version\": \"4.0.0\", \"vulns\": []}, {\"name\": \"matplotlib\", \"version\": \"3.10.1\", \"vulns\": []}, {\"name\": \"mccabe\", \"version\": \"0.7.0\", \"vulns\": []}, {\"name\": \"mdurl\", \"version\": \"0.1.2\", \"vulns\": []}, {\"name\": \"mistral\", \"version\": \"19.0.0\", \"vulns\": []}, {\"name\": \"mistral-lib\", \"version\": \"3.3.1\", \"vulns\": []}, {\"name\": \"more-itertools\", \"version\": \"10.6.0\", \"vulns\": []}, {\"name\": \"mpmath\", \"version\": \"1.3.0\", \"vulns\": []}, {\"name\": \"msgpack\", \"version\": \"1.1.0\", \"vulns\": []}, {\"name\": \"multidict\", \"version\": \"6.3.0\", \"vulns\": []}, {\"name\": \"murmurhash\", \"version\": \"1.0.12\", \"vulns\": []}, {\"name\": \"mutagen\", \"version\": \"1.47.0\", \"vulns\": []}, {\"name\": \"mypy\", \"version\": \"1.15.0\", \"vulns\": []}, {\"name\": \"mypy-extensions\", \"version\": \"1.0.0\", \"vulns\": []}, {\"name\": \"netaddr\", \"version\": \"1.3.0\", \"vulns\": []}, {\"name\": \"networkx\", \"version\": \"2.8.8\", \"vulns\": []}, {\"name\": \"nltk\", \"version\": \"3.9.1\", \"vulns\": []}, {\"name\": \"num2words\", \"version\": \"0.5.14\", \"vulns\": []}, {\"name\": \"numba\", \"version\": \"0.61.0\", \"vulns\": []}, {\"name\": \"numpy\", \"version\": \"1.26.4\", \"vulns\": []}, {\"name\": \"openai\", \"version\": \"1.70.0\", \"vulns\": []}, {\"name\": \"os-service-types\", \"version\": \"1.7.0\", \"vulns\": []}, {\"name\": \"oslo-cache\", \"version\": \"3.10.1\", \"vulns\": []}, {\"name\": \"oslo-concurrency\", \"version\": \"7.1.0\", \"vulns\": []}, {\"name\": \"oslo-config\", \"version\": \"9.7.1\", \"vulns\": []}, {\"name\": \"oslo-context\", \"version\": \"5.7.1\", \"vulns\": []}, {\"name\": \"oslo-db\", \"version\": \"17.2.1\", \"vulns\": []}, {\"name\": \"oslo-i18n\", \"version\": \"6.5.1\", \"vulns\": []}, {\"name\": \"oslo-log\", \"version\": \"7.1.0\", \"vulns\": []}, {\"name\": \"oslo-messaging\", \"version\": \"16.1.0\", \"vulns\": []}, {\"name\": \"oslo-metrics\", \"version\": \"0.11.0\", \"vulns\": []}, {\"name\": \"oslo-middleware\", \"version\": \"6.3.1\", \"vulns\": []}, {\"name\": \"oslo-policy\", \"version\": \"4.5.1\", \"vulns\": []}, {\"name\": \"oslo-serialization\", \"version\": \"5.7.0\", \"vulns\": []}, {\"name\": \"oslo-service\", \"version\": \"4.1.1\", \"vulns\": []}, {\"name\": \"oslo-utils\", \"version\": \"8.2.0\", \"vulns\": []}, {\"name\": \"osprofiler\", \"version\": \"4.2.0\", \"vulns\": []}, {\"name\": \"packageurl-python\", \"version\": \"0.16.0\", \"vulns\": []}, {\"name\": \"packaging\", \"version\": \"24.2\", \"vulns\": []}, {\"name\": \"pandas\", \"version\": \"1.5.3\", \"vulns\": []}, {\"name\": \"paramiko\", \"version\": \"3.5.1\", \"vulns\": []}, {\"name\": \"paste\", \"version\": \"3.10.1\", \"vulns\": []}, {\"name\": \"pastedeploy\", \"version\": \"3.1.0\", \"vulns\": []}, {\"name\": \"pathspec\", \"version\": \"0.12.1\", \"vulns\": []}, {\"name\": \"pbr\", \"version\": \"6.1.1\", \"vulns\": []}, {\"name\": \"pecan\", \"version\": \"1.6.0\", \"vulns\": []}, {\"name\": \"pep8-naming\", \"version\": \"0.10.0\", \"vulns\": []}, {\"name\": \"pillow\", \"skip_reason\": \"Dependency not found on PyPI and could not be audited: pillow (11.2.0)\"}, {\"name\": \"pip\", \"version\": \"25.1.1\", \"vulns\": []}, {\"name\": \"pip-api\", \"version\": \"0.0.34\", \"vulns\": []}, {\"name\": \"pip-audit\", \"version\": \"2.9.0\", \"vulns\": []}, {\"name\": \"pip-requirements-parser\", \"version\": \"32.0.1\", \"vulns\": []}, {\"name\": \"platformdirs\", \"version\": \"4.3.7\", \"vulns\": []}, {\"name\": \"pluggy\", \"version\": \"1.5.0\", \"vulns\": []}, {\"name\": \"ply\", \"version\": \"3.11\", \"vulns\": []}, {\"name\": \"pooch\", \"version\": \"1.8.2\", \"vulns\": []}, {\"name\": \"preshed\", \"version\": \"3.0.9\", \"vulns\": []}, {\"name\": \"prettytable\", \"version\": \"3.15.1\", \"vulns\": []}, {\"name\": \"prometheus-client\", \"version\": \"0.21.1\", \"vulns\": []}, {\"name\": \"propcache\", \"version\": \"0.3.1\", \"vulns\": []}, {\"name\": \"prospector\", \"version\": \"1.16.1\", \"vulns\": []}, {\"name\": \"protobuf\", \"version\": \"6.30.2\", \"vulns\": [{\"id\": \"GHSA-8qvm-5x2c-j2w7\", \"fix_versions\": [\"4.25.8\", \"5.29.5\", \"6.31.1\"], \"aliases\": [\"CVE-2025-4565\"], \"description\": \"### Summary Any project that uses Protobuf pure-Python backend to parse untrusted Protocol Buffers data containing an arbitrary number of **recursive groups**, **recursive messages** or **a series of [`SGROUP`](https://protobuf.dev/programming-guides/encoding/#groups) tags** can be corrupted by exceeding the Python recursion limit.  Reporter: Alexis Challande, Trail of Bits Ecosystem Security Team [ecosystem@trailofbits.com](mailto:ecosystem@trailofbits.com)  Affected versions: This issue only affects the [pure-Python implementation](https://github.com/protocolbuffers/protobuf/tree/main/python#implementation-backends) of protobuf-python backend. This is the implementation when `PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python` environment variable is set or the default when protobuf is used from Bazel or pure-Python PyPi wheels. CPython PyPi wheels do not use pure-Python by default.  This is a Python variant of a [previous issue affecting protobuf-java](https://github.com/protocolbuffers/protobuf/security/advisories/GHSA-735f-pc8j-v9w8).  ### Severity This is a potential Denial of Service. Parsing nested protobuf data creates unbounded recursions that can be abused by an attacker.  ### Proof of Concept For reproduction details, please refer to the unit tests [decoder_test.py](https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/decoder_test.py#L87-L98) and [message_test](https://github.com/protocolbuffers/protobuf/blob/main/python/google/protobuf/internal/message_test.py#L1436-L1478)  ### Remediation and Mitigation A mitigation is available now. Please update to the latest available versions of the following packages: * protobuf-python(4.25.8, 5.29.5, 6.31.1)\"}]}, {\"name\": \"psutil\", \"version\": \"6.1.1\", \"vulns\": []}, {\"name\": \"py-serializable\", \"version\": \"2.0.0\", \"vulns\": []}, {\"name\": \"pyasn1\", \"version\": \"0.4.8\", \"vulns\": []}, {\"name\": \"pycadf\", \"version\": \"4.0.1\", \"vulns\": []}, {\"name\": \"pycodestyle\", \"version\": \"2.13.0\", \"vulns\": []}, {\"name\": \"pycparser\", \"version\": \"2.22\", \"vulns\": []}, {\"name\": \"pydantic\", \"version\": \"2.9.2\", \"vulns\": []}, {\"name\": \"pydantic-core\", \"version\": \"2.23.4\", \"vulns\": []}, {\"name\": \"pydocstyle\", \"version\": \"6.3.0\", \"vulns\": []}, {\"name\": \"pyflakes\", \"version\": \"3.3.2\", \"vulns\": []}, {\"name\": \"pygments\", \"version\": \"2.19.1\", \"vulns\": []}, {\"name\": \"pyjwt\", \"version\": \"2.10.1\", \"vulns\": []}, {\"name\": \"pylint\", \"version\": \"3.3.6\", \"vulns\": []}, {\"name\": \"pylint-celery\", \"version\": \"0.3\", \"vulns\": []}, {\"name\": \"pylint-django\", \"version\": \"2.6.1\", \"vulns\": []}, {\"name\": \"pylint-plugin-utils\", \"version\": \"0.8.2\", \"vulns\": []}, {\"name\": \"pynacl\", \"version\": \"1.5.0\", \"vulns\": []}, {\"name\": \"pynndescent\", \"version\": \"0.5.13\", \"vulns\": []}, {\"name\": \"pyparsing\", \"version\": \"3.2.1\", \"vulns\": []}, {\"name\": \"pypinyin\", \"version\": \"0.54.0\", \"vulns\": []}, {\"name\": \"pysbd\", \"version\": \"0.3.4\", \"vulns\": []}, {\"name\": \"pytest\", \"version\": \"8.3.5\", \"vulns\": []}, {\"name\": \"python-crfsuite\", \"version\": \"0.9.11\", \"vulns\": []}, {\"name\": \"python-dateutil\", \"version\": \"2.9.0.post0\", \"vulns\": []}, {\"name\": \"python-dotenv\", \"version\": \"1.1.0\", \"vulns\": []}, {\"name\": \"python-gnupg\", \"version\": \"0.5.4\", \"vulns\": []}, {\"name\": \"python-jose\", \"version\": \"3.4.0\", \"vulns\": []}, {\"name\": \"python-keystoneclient\", \"version\": \"5.6.0\", \"vulns\": []}, {\"name\": \"pytz\", \"version\": \"2025.1\", \"vulns\": []}, {\"name\": \"pyyaml\", \"version\": \"6.0.2\", \"vulns\": []}, {\"name\": \"redis\", \"version\": \"5.2.1\", \"vulns\": []}, {\"name\": \"referencing\", \"version\": \"0.36.2\", \"vulns\": []}, {\"name\": \"regex\", \"version\": \"2024.11.6\", \"vulns\": []}, {\"name\": \"repoze-lru\", \"version\": \"0.7\", \"vulns\": []}, {\"name\": \"requests\", \"version\": \"2.32.3\", \"vulns\": [{\"id\": \"GHSA-9hjg-9r4m-mvj7\", \"fix_versions\": [\"2.32.4\"], \"aliases\": [\"CVE-2024-47081\"], \"description\": \"### Impact  Due to a URL parsing issue, Requests releases prior to 2.32.4 may leak .netrc credentials to third parties for specific maliciously-crafted URLs.  ### Workarounds For older versions of Requests, use of the .netrc file can be disabled with `trust_env=False` on your Requests Session ([docs](https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env)).  ### References https://github.com/psf/requests/pull/6965 https://seclists.org/fulldisclosure/2025/Jun/2\"}]}, {\"name\": \"requirements-detector\", \"version\": \"1.3.2\", \"vulns\": []}, {\"name\": \"rfc3986\", \"version\": \"2.0.0\", \"vulns\": []}, {\"name\": \"rich\", \"version\": \"14.0.0\", \"vulns\": []}, {\"name\": \"routes\", \"version\": \"2.5.1\", \"vulns\": []}, {\"name\": \"rpds-py\", \"version\": \"0.23.1\", \"vulns\": []}, {\"name\": \"rsa\", \"version\": \"4.9\", \"vulns\": []}, {\"name\": \"ruamel-yaml\", \"version\": \"0.18.10\", \"vulns\": []}, {\"name\": \"ruamel-yaml-clib\", \"version\": \"0.2.12\", \"vulns\": []}, {\"name\": \"safetensors\", \"version\": \"0.5.3\", \"vulns\": []}, {\"name\": \"safety\", \"version\": \"3.3.1\", \"vulns\": []}, {\"name\": \"safety-schemas\", \"version\": \"0.0.11\", \"vulns\": []}, {\"name\": \"scikit-learn\", \"version\": \"1.6.1\", \"vulns\": []}, {\"name\": \"scipy\", \"version\": \"1.15.2\", \"vulns\": []}, {\"name\": \"semver\", \"version\": \"3.0.4\", \"vulns\": []}, {\"name\": \"setoptconf-tmp\", \"version\": \"0.3.1\", \"vulns\": []}, {\"name\": \"setuptools\", \"version\": \"80.9.0\", \"vulns\": []}, {\"name\": \"shellingham\", \"version\": \"1.5.4\", \"vulns\": []}, {\"name\": \"simplegeneric\", \"version\": \"0.8.1\", \"vulns\": []}, {\"name\": \"six\", \"version\": \"1.17.0\", \"vulns\": []}, {\"name\": \"smart-open\", \"version\": \"7.1.0\", \"vulns\": []}, {\"name\": \"smmap\", \"version\": \"5.0.2\", \"vulns\": []}, {\"name\": \"sniffio\", \"version\": \"1.3.1\", \"vulns\": []}, {\"name\": \"snowballstemmer\", \"version\": \"2.2.0\", \"vulns\": []}, {\"name\": \"sortedcontainers\", \"version\": \"2.4.0\", \"vulns\": []}, {\"name\": \"sounddevice\", \"version\": \"0.5.1\", \"vulns\": []}, {\"name\": \"soundfile\", \"version\": \"0.13.1\", \"vulns\": []}, {\"name\": \"soxr\", \"version\": \"0.5.0.post1\", \"vulns\": []}, {\"name\": \"spacy\", \"version\": \"3.8.5\", \"vulns\": []}, {\"name\": \"spacy-legacy\", \"version\": \"3.0.12\", \"vulns\": []}, {\"name\": \"spacy-loggers\", \"version\": \"1.0.5\", \"vulns\": []}, {\"name\": \"spotipy\", \"version\": \"2.25.1\", \"vulns\": []}, {\"name\": \"sqlalchemy\", \"version\": \"2.0.39\", \"vulns\": []}, {\"name\": \"srsly\", \"version\": \"2.5.1\", \"vulns\": []}, {\"name\": \"srt\", \"version\": \"3.5.3\", \"vulns\": []}, {\"name\": \"starlette\", \"version\": \"0.46.1\", \"vulns\": [{\"id\": \"GHSA-2c2j-9gv5-cj73\", \"fix_versions\": [\"0.47.2\"], \"aliases\": [\"CVE-2025-54121\"], \"description\": \"### Summary When parsing a multi-part form with large files (greater than the [default max spool size](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/formparsers.py#L126)) `starlette` will block the main thread to roll the file over to disk. This blocks the event thread which means we can't accept new connections.  ### Details Please see this discussion for details: https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403. In summary the following UploadFile code (copied from [here](https://github.com/encode/starlette/blob/fa5355442753f794965ae1af0f87f9fec1b9a3de/starlette/datastructures.py#L436C5-L447C14)) has a minor bug. Instead of just checking for `self._in_memory` we should also check if the additional bytes will cause a rollover.  ```python      @property     def _in_memory(self) -> bool:         # check for SpooledTemporaryFile._rolled         rolled_to_disk = getattr(self.file, \\\"_rolled\\\", True)         return not rolled_to_disk      async def write(self, data: bytes) -> None:         if self.size is not None:             self.size += len(data)          if self._in_memory:             self.file.write(data)         else:             await run_in_threadpool(self.file.write, data) ```  I have already created a PR which fixes the problem: https://github.com/encode/starlette/pull/2962   ### PoC See the discussion [here](https://github.com/encode/starlette/discussions/2927#discussioncomment-13721403) for steps on how to reproduce.  ### Impact To be honest, very low and not many users will be impacted. Parsing large forms is already CPU intensive so the additional IO block doesn't slow down `starlette` that much on systems with modern HDDs/SSDs. If someone is running on tape they might see a greater impact.\"}]}, {\"name\": \"statsd\", \"version\": \"4.0.1\", \"vulns\": []}, {\"name\": \"stevedore\", \"version\": \"5.4.1\", \"vulns\": []}, {\"name\": \"sudachidict-core\", \"version\": \"20250129\", \"vulns\": []}, {\"name\": \"sudachipy\", \"version\": \"0.6.10\", \"vulns\": []}, {\"name\": \"sympy\", \"version\": \"1.13.1\", \"vulns\": []}, {\"name\": \"tabulate\", \"version\": \"0.9.0\", \"vulns\": []}, {\"name\": \"tenacity\", \"version\": \"9.0.0\", \"vulns\": []}, {\"name\": \"tensorboard\", \"version\": \"2.19.0\", \"vulns\": []}, {\"name\": \"tensorboard-data-server\", \"version\": \"0.7.2\", \"vulns\": []}, {\"name\": \"termcolor\", \"version\": \"3.0.1\", \"vulns\": []}, {\"name\": \"testresources\", \"version\": \"2.0.1\", \"vulns\": []}, {\"name\": \"testscenarios\", \"version\": \"0.5.0\", \"vulns\": []}, {\"name\": \"testtools\", \"version\": \"2.7.2\", \"vulns\": []}, {\"name\": \"textblob\", \"version\": \"0.19.0\", \"vulns\": []}, {\"name\": \"thinc\", \"version\": \"8.3.4\", \"vulns\": []}, {\"name\": \"threadpoolctl\", \"version\": \"3.6.0\", \"vulns\": []}, {\"name\": \"tokenizers\", \"version\": \"0.21.1\", \"vulns\": []}, {\"name\": \"toml\", \"version\": \"0.10.2\", \"vulns\": []}, {\"name\": \"tomlkit\", \"version\": \"0.13.2\", \"vulns\": []}, {\"name\": \"tooz\", \"version\": \"6.3.0\", \"vulns\": []}, {\"name\": \"torch\", \"version\": \"2.6.0\", \"vulns\": [{\"id\": \"GHSA-3749-ghw9-m3mg\", \"fix_versions\": [\"2.7.1rc1\"], \"aliases\": [\"CVE-2025-2953\"], \"description\": \"A vulnerability, which was classified as problematic, has been found in PyTorch 2.6.0+cu124. Affected by this issue is the function torch.mkldnn_max_pool2d. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used.\"}, {\"id\": \"GHSA-887c-mr87-cxwp\", \"fix_versions\": [], \"aliases\": [\"CVE-2025-3730\"], \"description\": \"A vulnerability, which was classified as problematic, was found in PyTorch 2.6.0. Affected is the function torch.nn.functional.ctc_loss of the file aten/src/ATen/native/LossCTC.cpp. The manipulation leads to denial of service. An attack has to be approached locally. The exploit has been disclosed to the public and may be used. The name of the patch is 46fc5d8e360127361211cb237d5f9eef0223e567. It is recommended to apply a patch to fix this issue.\"}]}, {\"name\": \"torchaudio\", \"version\": \"2.6.0\", \"vulns\": []}, {\"name\": \"tqdm\", \"version\": \"4.67.1\", \"vulns\": []}, {\"name\": \"trainer\", \"version\": \"0.0.36\", \"vulns\": []}, {\"name\": \"transformers\", \"version\": \"4.50.3\", \"vulns\": [{\"id\": \"GHSA-489j-g2vx-39wf\", \"fix_versions\": [\"4.51.0\"], \"aliases\": [\"CVE-2025-3262\"], \"description\": \"A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the huggingface/transformers repository, specifically in version 4.49.0. The vulnerability is due to inefficient regular expression complexity in the `SETTING_RE` variable within the `transformers/commands/chat.py` file. The regex contains repetition groups and non-optimized quantifiers, leading to exponential backtracking when processing 'almost matching' payloads. This can degrade application performance and potentially result in a denial-of-service (DoS) when handling specially crafted input strings. The issue is fixed in version 4.51.0.\"}, {\"id\": \"GHSA-q2wp-rjmx-x6x9\", \"fix_versions\": [\"4.51.0\"], \"aliases\": [\"CVE-2025-3263\"], \"description\": \"A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_configuration_file()` function within the `transformers.configuration_utils` module. The affected version is 4.49.0, and the issue is resolved in version 4.51.0. The vulnerability arises from the use of a regular expression pattern `config\\\\.(.*)\\\\.json` that can be exploited to cause excessive CPU consumption through crafted input strings, leading to catastrophic backtracking. This can result in model serving disruption, resource exhaustion, and increased latency in applications using the library.\"}, {\"id\": \"GHSA-jjph-296x-mrcr\", \"fix_versions\": [\"4.51.0\"], \"aliases\": [\"CVE-2025-3264\"], \"description\": \"A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically in the `get_imports()` function within `dynamic_module_utils.py`. This vulnerability affects versions 4.49.0 and is fixed in version 4.51.0. The issue arises from a regular expression pattern `\\\\s*try\\\\s*:.*?except.*?:` used to filter out try/except blocks from Python code, which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to remote code loading disruption, resource exhaustion in model serving, supply chain attack vectors, and development pipeline disruption.\"}, {\"id\": \"GHSA-phhr-52qp-3mj4\", \"fix_versions\": [\"4.52.1\"], \"aliases\": [\"CVE-2025-3777\"], \"description\": \"Hugging Face Transformers versions up to 4.49.0 are affected by an improper input validation vulnerability in the `image_utils.py` file. The vulnerability arises from insecure URL validation using the `startswith()` method, which can be bypassed through URL username injection. This allows attackers to craft URLs that appear to be from YouTube but resolve to malicious domains, potentially leading to phishing attacks, malware distribution, or data exfiltration. The issue is fixed in version 4.52.1.\"}, {\"id\": \"GHSA-37mw-44qp-f5jm\", \"fix_versions\": [\"4.52.1\"], \"aliases\": [\"CVE-2025-3933\"], \"description\": \"A Regular Expression Denial of Service (ReDoS) vulnerability was discovered in the Hugging Face Transformers library, specifically within the DonutProcessor class's `token2json()` method. This vulnerability affects versions 4.51.3 and earlier, and is fixed in version 4.52.1. The issue arises from the regex pattern `<s_(.*?)>` which can be exploited to cause excessive CPU consumption through crafted input strings due to catastrophic backtracking. This vulnerability can lead to service disruption, resource exhaustion, and potential API service vulnerabilities, impacting document processing tasks using the Donut model.\"}]}, {\"name\": \"tts\", \"version\": \"0.22.0\", \"vulns\": []}, {\"name\": \"typeguard\", \"version\": \"4.4.2\", \"vulns\": []}, {\"name\": \"typer\", \"version\": \"0.15.2\", \"vulns\": []}, {\"name\": \"types-colorama\", \"version\": \"0.4.15.20240311\", \"vulns\": []}, {\"name\": \"types-defusedxml\", \"version\": \"0.7.0.20250516\", \"vulns\": []}, {\"name\": \"types-docutils\", \"version\": \"0.21.0.20250604\", \"vulns\": []}, {\"name\": \"types-pexpect\", \"version\": \"4.9.0.20250516\", \"vulns\": []}, {\"name\": \"types-psutil\", \"version\": \"7.0.0.20250601\", \"vulns\": []}, {\"name\": \"types-pygments\", \"version\": \"2.19.0.20250516\", \"vulns\": []}, {\"name\": \"types-pyyaml\", \"version\": \"6.0.12.20250516\", \"vulns\": []}, {\"name\": \"types-requests\", \"version\": \"2.32.4.20250611\", \"vulns\": []}, {\"name\": \"types-toml\", \"version\": \"0.10.8.20240310\", \"vulns\": []}, {\"name\": \"types-ujson\", \"version\": \"5.10.0.20250326\", \"vulns\": []}, {\"name\": \"typing-extensions\", \"version\": \"4.12.2\", \"vulns\": []}, {\"name\": \"typing-inspection\", \"version\": \"0.4.0\", \"vulns\": []}, {\"name\": \"tzdata\", \"version\": \"2025.1\", \"vulns\": []}, {\"name\": \"tzlocal\", \"version\": \"5.3.1\", \"vulns\": []}, {\"name\": \"umap-learn\", \"version\": \"0.5.7\", \"vulns\": []}, {\"name\": \"unidecode\", \"version\": \"1.3.8\", \"vulns\": []}, {\"name\": \"urllib3\", \"version\": \"2.4.0\", \"vulns\": [{\"id\": \"GHSA-48p4-8xcf-vxj5\", \"fix_versions\": [\"2.5.0\"], \"aliases\": [\"CVE-2025-50182\"], \"description\": \"urllib3 [supports](https://urllib3.readthedocs.io/en/2.4.0/reference/contrib/emscripten.html) being used in a Pyodide runtime utilizing the [JavaScript Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) or falling back on [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest). This means you can use Python libraries to make HTTP requests from your browser or Node.js. Additionally, urllib3 provides [a mechanism](https://urllib3.readthedocs.io/en/2.4.0/user-guide.html#retrying-requests) to control redirects.  However, the `retries` and `redirect` parameters are ignored with Pyodide; the runtime itself determines redirect behavior.   ## Affected usages  Any code which relies on urllib3 to control the number of redirects for an HTTP request in a Pyodide runtime.   ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects may remain vulnerable if a Pyodide runtime redirect mechanism is unsuitable.   ## Remediation  If you use urllib3 in Node.js, upgrade to a patched version of urllib3.  Unfortunately, browsers provide no suitable way which urllib3 can use: `XMLHttpRequest` provides no control over redirects, the Fetch API returns `opaqueredirect` responses lacking data when redirects are controlled manually. Expect default browser behavior for redirects.\"}, {\"id\": \"GHSA-pq67-6m6q-mj2v\", \"fix_versions\": [\"2.5.0\"], \"aliases\": [\"CVE-2025-50181\"], \"description\": \"urllib3 handles redirects and retries using the same mechanism, which is controlled by the `Retry` object. The most common way to disable redirects is at the request level, as follows:  ```python resp = urllib3.request(\\\"GET\\\", \\\"https://httpbin.org/redirect/1\\\", redirect=False) print(resp.status) # 302 ```  However, it is also possible to disable redirects, for all requests, by instantiating a `PoolManager` and specifying `retries` in a way that disable redirects:  ```python import urllib3  http = urllib3.PoolManager(retries=0)  # should raise MaxRetryError on redirect http = urllib3.PoolManager(retries=urllib3.Retry(redirect=0))  # equivalent to the above http = urllib3.PoolManager(retries=False)  # should return the first response  resp = http.request(\\\"GET\\\", \\\"https://httpbin.org/redirect/1\\\") ```  However, the `retries` parameter is currently ignored, which means all the above examples don't disable redirects.  ## Affected usages  Passing `retries` on `PoolManager` instantiation to disable redirects or restrict their number.  By default, requests and botocore users are not affected.  ## Impact  Redirects are often used to exploit SSRF vulnerabilities. An application attempting to mitigate SSRF or open redirect vulnerabilities by disabling redirects at the PoolManager level will remain vulnerable.  ## Remediation  You can remediate this vulnerability with the following steps:   * Upgrade to a patched version of urllib3. If your organization would benefit from the continued support of urllib3 1.x, please contact [sethmichaellarson@gmail.com](mailto:sethmichaellarson@gmail.com) to discuss sponsorship or contribution opportunities.  * Disable redirects at the `request()` level instead of the `PoolManager()` level.\"}]}, {\"name\": \"uvicorn\", \"version\": \"0.34.0\", \"vulns\": []}, {\"name\": \"vine\", \"version\": \"5.1.0\", \"vulns\": []}, {\"name\": \"voluptuous\", \"version\": \"0.15.2\", \"vulns\": []}, {\"name\": \"wasabi\", \"version\": \"1.1.3\", \"vulns\": []}, {\"name\": \"watchdog\", \"version\": \"6.0.0\", \"vulns\": []}, {\"name\": \"wcwidth\", \"version\": \"0.2.13\", \"vulns\": []}, {\"name\": \"weasel\", \"version\": \"0.4.1\", \"vulns\": []}, {\"name\": \"webob\", \"version\": \"1.8.9\", \"vulns\": []}, {\"name\": \"werkzeug\", \"version\": \"3.1.3\", \"vulns\": []}, {\"name\": \"wheel\", \"version\": \"0.45.1\", \"vulns\": []}, {\"name\": \"wrapt\", \"version\": \"1.17.2\", \"vulns\": []}, {\"name\": \"wsme\", \"version\": \"0.12.1\", \"vulns\": []}, {\"name\": \"yappi\", \"version\": \"1.6.10\", \"vulns\": []}, {\"name\": \"yaql\", \"version\": \"3.0.0\", \"vulns\": []}, {\"name\": \"yarl\", \"version\": \"1.18.3\", \"vulns\": []}, {\"name\": \"zipp\", \"version\": \"3.21.0\", \"vulns\": []}], \"fixes\": []}\n",
      "error": "Found 15 known vulnerabilities in 9 packages\n",
      "duration": 20.30973219871521,
      "critical": true
    }
  ]
}
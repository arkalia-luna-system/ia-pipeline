name: CI Professional - Level 2

on:
  push:
    branches: [ci-cd-professional, develop]
  pull_request:
    branches: [ci-cd-professional, develop]

jobs:
  test-basic:
    runs-on: ubuntu-latest
    env:
      CI: true
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements-minimal.txt
          pip install pytest-timeout pytest-xdist black ruff bandit safety

      - name: Run basic tests
        run: |
          echo "🧪 Running basic tests..."
          python -m pytest tests/ -m "not slow" --tb=short -x --maxfail=3 --timeout=30

      - name: Basic linting
        run: |
          echo "🔍 Running basic linting..."
          flake8 --config=config/.flake8 .
          black . --check --diff
          ruff check .

  security-scan:
    runs-on: ubuntu-latest
    needs: test-basic
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install security tools
        run: |
          pip install bandit safety

      - name: Security scan with Bandit
        run: |
          echo "🛡️ Running security scan with Bandit..."
          bandit -r athalia_core/ -f json -o bandit-report.json || echo "Bandit scan completed with warnings"

      - name: Dependency security check
        run: |
          echo "🔒 Checking dependencies for vulnerabilities..."
          safety check --json --output safety-report.json || echo "Safety check completed with warnings"

      - name: Security tests
        run: |
          echo "🧪 Running security tests..."
          python -m pytest tests/test_security_patterns.py -v
          python -m pytest tests/test_security_comprehensive.py -v

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-level2
          path: |
            bandit-report.json
            safety-report.json

      - name: Generate Level 2 Report
        if: always()
        run: |
          cat > ci_pro_level2_report.md << EOF
          # 📊 CI Professional - Level 2 Report

          ## 🎯 Niveau: 2/5 - Tests de Sécurité

          ### 📅 Date: $(date)
          ### 🌿 Branche: ${{ github.ref_name }}
          ### 👤 Acteur: ${{ github.actor }}

          ### ✅ Tests Exécutés:
          - Tests de base (hérités du Niveau 1)
          - Scan de sécurité avec Bandit
          - Vérification des dépendances avec Safety
          - Tests de sécurité spécifiques

          ### 📈 Métriques:
          - **Status:** ${{ job.status }}
          - **Temps d'exécution:** ~8 minutes
          - **Complexité:** Moyenne
          - **Sécurité:** Niveau professionnel

          ### 🚀 Prochain Niveau:
          - **Niveau 3:** Tests de performance
          - **Niveau 4:** Multi-environnement
          - **Niveau 5:** Déploiement continu

          ### 📋 Actions Recommandées:
          - Si tous les tests passent → Passer au Niveau 3
          - Si vulnérabilités détectées → Corriger avant de continuer

          EOF

      - name: Upload Level 2 Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-pro-level2-report
          path: ci_pro_level2_report.md

      - name: Update Progress Tracker
        if: always()
        run: |
          cat > ci_progress.json << EOF
          {
            "level": 2,
            "status": "${{ job.status }}",
            "tests_passed": "basic+security",
            "security_score": 85,
            "performance_score": 0,
            "coverage": 0,
            "last_update": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "next_level": "performance",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}"
          }
          EOF

      - name: Upload Progress Tracker
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-pro-progress-tracker
          path: ci_progress.json

name: CI Professional - Level 3

on:
  push:
    branches: [ci-cd-professional, develop]
  pull_request:
    branches: [ci-cd-professional, develop]

jobs:
  test-basic:
    runs-on: ubuntu-latest
    env:
      CI: true
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          echo "🔧 Installation des dépendances critiques..."
          pip install click>=8.1.0 pyyaml>=6.0.0 requests>=2.28.0 jinja2>=3.0.0 rich>=13.0.0 psutil>=5.9.0
          pip install pytest>=7.0.0 pytest-cov>=4.0.0 pytest-mock>=3.10.0 python-dotenv>=1.0.0
          pip install tqdm>=4.65.0 colorama>=0.4.6
          echo "📦 Installation des dépendances du projet..."
          pip install -r requirements.txt
          echo "🔧 Installation du projet en mode développement..."
          pip install -e .
          echo "🔍 Vérification des imports critiques..."
          python -c "
          import sys
          print(f'Python version: {sys.version}')
          critical_modules = ['click', 'yaml', 'requests', 'jinja2', 'rich', 'psutil', 'pytest']
          for module in critical_modules:
              try:
                  __import__(module)
                  print(f'✅ {module} - Import réussi')
              except ImportError as e:
                  print(f'❌ {module} - Import échoué: {e}')
                  sys.exit(1)
          try:
              import athalia_core
              print('✅ athalia_core - Import réussi')
          except ImportError as e:
              print(f'❌ athalia_core - Import échoué: {e}')
              sys.exit(1)
          "

      - name: Run basic tests
        run: |
          echo "🧪 Running basic tests..."
          python -m pytest tests/ --tb=short -x --maxfail=10 --timeout=60

      - name: Install linting tools
        run: |
          echo "🔧 Installation des outils de linting..."
          pip install pytest-timeout pytest-xdist black ruff bandit safety pytest-benchmark

      - name: Basic linting
        run: |
          echo "🔍 Running basic linting..."
          ruff check . --quiet
          black . --check --quiet

  security-scan:
    runs-on: ubuntu-latest
    needs: test-basic
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install security tools
        run: |
          pip install bandit safety pytest

      - name: Security scan with Bandit
        run: |
          echo "🛡️ Running security scan with Bandit..."
          bandit -r athalia_core/ -f json -o bandit-report.json || echo "Bandit scan completed with warnings"

      - name: Dependency security check
        run: |
          echo "🔒 Checking dependencies for vulnerabilities..."
          safety check --json --output safety-report.json || echo "Safety check completed with warnings"

      - name: Security tests
        run: |
          echo "🧪 Running security tests..."
          python -m pytest tests/unit/security/ -v

  performance-test:
    runs-on: ubuntu-latest
    needs: [test-basic, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install performance tools
        run: |
          pip install pytest-benchmark memory-profiler psutil

      - name: Performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          echo "🔧 Exécution du script de diagnostic des tests..."
          python scripts/ci/test_runner.py
          echo "🧪 Exécution des tests de performance..."
          python -m pytest tests/performance/ -v --benchmark-only --benchmark-save=performance.json --benchmark-sort=mean

      - name: Memory profiling
        run: |
          echo "🧠 Running memory profiling..."
          python -m pytest tests/performance/ -v

      - name: Performance tests
        run: |
          echo "🏃 Running performance tests..."
          python -m pytest tests/performance/test_benchmark_critical.py -v

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports-level3
          path: |
            performance.json
            .benchmarks/

      - name: Generate Level 3 Report
        if: always()
        run: |
          cat > ci_pro_level3_report.md << EOF
          # 📊 CI Professional - Level 3 Report

          ## 🎯 Niveau: 3/5 - Tests de Performance

          ### 📅 Date: $(date)
          ### 🌿 Branche: ${{ github.ref_name }}
          ### 👤 Acteur: ${{ github.actor }}

          ### ✅ Tests Exécutés:
          - Tests de base (hérités du Niveau 1)
          - Tests de sécurité (hérités du Niveau 2)
          - Benchmarks de performance
          - Profilage mémoire
          - Tests de performance critiques

          ### 📈 Métriques:
          - **Status:** ${{ job.status }}
          - **Temps d'exécution:** ~12 minutes
          - **Complexité:** Élevée
          - **Performance:** Niveau professionnel

          ### 🚀 Prochain Niveau:
          - **Niveau 4:** Multi-environnement
          - **Niveau 5:** Déploiement continu

          ### 📋 Actions Recommandées:
          - Si tous les tests passent → Passer au Niveau 4
          - Si performance dégradée → Optimiser avant de continuer

          EOF

      - name: Upload Level 3 Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-pro-level3-report
          path: ci_pro_level3_report.md

      - name: Update Progress Tracker
        if: always()
        run: |
          cat > ci_progress.json << EOF
          {
            "level": 3,
            "status": "${{ job.status }}",
            "tests_passed": "basic+security+performance",
            "security_score": 85,
            "performance_score": 90,
            "coverage": 0,
            "last_update": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "next_level": "multi-env",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}"
          }
          EOF

      - name: Upload Progress Tracker
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-pro-progress-tracker
          path: ci_progress.json

name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      CI: true
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r config/requirements-minimal.txt
          pip install pytest-timeout pytest-xdist flask flask-cors

      - name: Lint (flake8)
        run: |
          flake8 .

      - name: Check polluting files
        run: |
          python -m pytest tests/test_no_polluting_files.py -v

      - name: Check all imports
        run: |
          python -m pytest tests/test_imports_all.py -v

      - name: Check UTF-8 encoding
        run: |
          python -m pytest tests/test_encoding_utf8.py -v

      - name: Check for dangerous patterns
        run: |
          python -m pytest tests/test_security_patterns.py -v

      - name: Check for hardcoded paths
        run: |
          python -m pytest tests/test_hardcoded_paths.py -v

      - name: Check requirements consistency
        run: |
          python -m pytest tests/test_requirements_consistency.py -v

      - name: Coverage threshold
        run: |
          python -m pytest tests/test_coverage_threshold.py -v

      - name: Run ultra-fast CI tests
        run: |
          python -m pytest tests/test_ci_ultra_fast.py -v --tb=short

      - name: Run robust CI tests
        run: |
          python -m pytest tests/test_ci_robust.py -v --tb=short

      - name: Run safe core tests
        run: |
          python -m pytest tests/ -m "not slow and not skip_ci" --tb=short -x --maxfail=3 --timeout=30

      - name: Syntax check
        run: |
          python -c "import ast; [ast.parse(open(f).read()) for f in __import__('glob').glob('**/*.py', recursive=True) if '.git' not in f and '__pycache__' not in f and 'venv' not in f]"

      - name: Check essential imports
        run: |
          python -c "import athalia_core.audit, athalia_core.cleanup, athalia_core.analytics"

      - name: Validate config files
        run: |
          test -f config/requirements.txt
          test -f config/athalia_config.yaml
          test -f README.md

      - name: Run validation express
        run: |
<<<<<<< HEAD
          chmod +x validation_express.sh
          ./validation_express.sh

      - name: Run validation objective
        run: |
          python validation_objective.py
=======
          chmod +x scripts/validation_express.sh
          cd $GITHUB_WORKSPACE
          mkdir -p logs
          ./scripts/validation_express.sh || echo "Validation express failed but continuing..."

      - name: Run validation objective
        run: |
          cd $GITHUB_WORKSPACE
          mkdir -p logs
          python scripts/validation_objective.py || echo "Validation objective failed but continuing..."

      - name: List generated files
        run: |
          echo "Files in workspace:"
          ls -la
          echo "Validation files:"
          ls -la validation_express_*.txt rapport_validation_objective_*.md 2>/dev/null || echo "No validation files found"
          echo "Logs directory:"
          ls -la logs/ 2>/dev/null || echo "No logs directory found"
>>>>>>> develop

      - name: Upload validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: validation-artifacts
          path: |
            logs/validation_express_*.txt
            logs/rapport_validation_objective_*.md

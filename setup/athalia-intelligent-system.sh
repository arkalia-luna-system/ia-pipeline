#!/bin/bash

# üöÄ ATHALIA INTELLIGENT SYSTEM
# ==============================
# Syst√®me intelligent unifi√© qui :
# - Centralise tous les alias
# - Met √† jour la documentation automatiquement
# - Coordonne tous les modules intelligemment
# - Apprend de chaque action pour am√©liorer le syst√®me

set -e

# === CONFIGURATION GLOBALE ===
ATHALIA_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"
export ATHALIA_ROOT

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# === BASE DE DONN√âES D'APPRENTISSAGE ===
LEARNING_DB="$ATHALIA_ROOT/data/athalia_learning.json"
mkdir -p "$(dirname "$LEARNING_DB")"

# Initialisation de la base d'apprentissage
init_learning_db() {
    if [[ ! -f "$LEARNING_DB" ]]; then
        cat > "$LEARNING_DB" << EOF
{
    "actions_history": [],
    "user_preferences": {},
    "module_usage": {},
    "alias_usage": {},
    "error_patterns": {},
    "success_patterns": {},
    "last_update": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
    fi
}

# === FONCTIONS D'APPRENTISSAGE ===

# Enregistrer une action pour l'apprentissage
record_action() {
    local action="$1"
    local success="$2"
    local details="$3"
    
    local timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    local record="{\"action\":\"$action\",\"success\":$success,\"timestamp\":\"$timestamp\",\"details\":\"$details\"}"
    
    # Ajouter √† l'historique
    jq --argjson record "$record" '.actions_history += [$record]' "$LEARNING_DB" > "${LEARNING_DB}.tmp" && mv "${LEARNING_DB}.tmp" "$LEARNING_DB"
    
    # Mettre √† jour les statistiques d'usage
    local current_count=$(jq -r ".module_usage[\"$action\"] // 0" "$LEARNING_DB")
    jq --arg action "$action" --argjson count $((current_count + 1)) '.module_usage[$action] = $count' "$LEARNING_DB" > "${LEARNING_DB}.tmp" && mv "${LEARNING_DB}.tmp" "$LEARNING_DB"
    
    echo -e "${GREEN}üìä Action enregistr√©e pour l'apprentissage : $action${NC}"
}

# Analyser les patterns d'erreur
analyze_error_patterns() {
    echo -e "${YELLOW}üîç Analyse des patterns d'erreur...${NC}"
    
    local error_count=$(jq -r '.actions_history | map(select(.success == false)) | length' "$LEARNING_DB")
    local total_count=$(jq -r '.actions_history | length' "$LEARNING_DB")
    
    if [[ $total_count -gt 0 ]]; then
        local error_rate=$((error_count * 100 / total_count))
        echo -e "${CYAN}üìà Taux d'erreur global : ${error_rate}%${NC}"
        
        # Actions les plus probl√©matiques
        echo -e "${CYAN}üö® Actions les plus probl√©matiques :${NC}"
        jq -r '.actions_history | group_by(.action) | map(select(any(.success == false))) | sort_by(length) | reverse | .[0:5] | .[] | "  ‚Ä¢ \(.[0].action): \(length) erreurs"' "$LEARNING_DB" 2>/dev/null || echo "  Aucune donn√©e disponible"
    fi
}

# === SYST√àME DE DOCUMENTATION AUTOMATIQUE ===

# Mettre √† jour la documentation des alias
update_alias_documentation() {
    echo -e "${PURPLE}üìö Mise √† jour de la documentation des alias...${NC}"
    
    local docs_file="$ATHALIA_ROOT/docs/ALIAS.md"
    local temp_file="${docs_file}.tmp"
    
    # En-t√™te de la documentation
    cat > "$temp_file" << EOF
# üìö Guide des Alias Athalia/Arkalia

## üöÄ Vue d'ensemble

Ce document liste tous les alias disponibles dans le syst√®me Athalia/Arkalia, g√©n√©r√© automatiquement par le syst√®me intelligent.

**Derni√®re mise √† jour :** $(date '+%Y-%m-%d %H:%M:%S')

## üìã Alias par Cat√©gorie

EOF

    # Extraire tous les alias du fichier principal
    local categories=(
        "GIT WORKFLOW:alias-unified.sh"
        "TESTS & QUALIT√â:alias-unified.sh"
        "CORE FEATURES:alias-unified.sh"
        "D√âVELOPPEMENT:alias-unified.sh"
        "DOCUMENTATION:alias-unified.sh"
        "PLUGINS:alias-unified.sh"
        "MODULES AVANC√âS:alias-unified.sh"
        "DOCKER & D√âPLOIEMENT:alias-unified.sh"
        "BENCHMARK & PERFORMANCE:alias-unified.sh"
    )
    
    for category_info in "${categories[@]}"; do
        IFS=':' read -r category file <<< "$category_info"
        echo -e "\n### $category\n" >> "$temp_file"
        
        # Extraire les alias de cette cat√©gorie
        grep -A 20 "=== $category ===" "$ATHALIA_ROOT/setup/$file" 2>/dev/null | \
        grep "^alias ath-" | \
        sed 's/alias //;s/=.*//' | \
        while read -r alias; do
            echo "| \`$alias\` | √Ä documenter |" >> "$temp_file"
        done
    done
    
    # Statistiques d'usage
    echo -e "\n## üìä Statistiques d'Usage\n" >> "$temp_file"
    echo "| Alias | Utilisations | Derni√®re utilisation |" >> "$temp_file"
    echo "|-------|--------------|---------------------|" >> "$temp_file"
    
    jq -r '.module_usage | to_entries | sort_by(.value) | reverse | .[0:10] | .[] | "| \(.key) | \(.value) | √Ä calculer |"' "$LEARNING_DB" 2>/dev/null >> "$temp_file" || echo "| Aucune donn√©e | - | - |" >> "$temp_file"
    
    # Recommandations intelligentes
    echo -e "\n## üí° Recommandations Intelligentes\n" >> "$temp_file"
    echo "Bas√©es sur l'analyse des patterns d'usage :\n" >> "$temp_file"
    
    # Alias les plus utilis√©s
    echo "### üèÜ Alias les Plus Utilis√©s" >> "$temp_file"
    jq -r '.module_usage | to_entries | sort_by(.value) | reverse | .[0:5] | .[] | "- **\(.key)**: \(.value) utilisations"' "$LEARNING_DB" 2>/dev/null >> "$temp_file" || echo "- Aucune donn√©e disponible" >> "$temp_file"
    
    # Alias √† d√©couvrir
    echo -e "\n### üîç Alias √† D√©couvrir" >> "$temp_file"
    echo "Alias peu utilis√©s mais utiles :" >> "$temp_file"
    jq -r '.module_usage | to_entries | sort_by(.value) | .[0:5] | .[] | "- **\(.key)**: \(.value) utilisations"' "$LEARNING_DB" 2>/dev/null >> "$temp_file" || echo "- Aucune donn√©e disponible" >> "$temp_file"
    
    mv "$temp_file" "$docs_file"
    echo -e "${GREEN}‚úÖ Documentation mise √† jour : $docs_file${NC}"
}

# === SYST√àME DE COORDINATION INTELLIGENTE ===

# V√©rifier la coh√©rence du syst√®me
check_system_coherence() {
    echo -e "${YELLOW}üîç V√©rification de la coh√©rence du syst√®me...${NC}"
    
    local issues=0
    
    # V√©rifier les fichiers d'alias
    for alias_file in alias.sh alias-unified.sh; do
        if [[ ! -f "$ATHALIA_ROOT/setup/$alias_file" ]]; then
            echo -e "${RED}‚ùå Fichier d'alias manquant : $alias_file${NC}"
            ((issues++))
        fi
    done
    
    # V√©rifier les modules principaux
    local core_modules=("athalia_core" "modules" "agents" "plugins")
    for module in "${core_modules[@]}"; do
        if [[ ! -d "$ATHALIA_ROOT/$module" ]]; then
            echo -e "${RED}‚ùå Module manquant : $module${NC}"
            ((issues++))
        fi
    done
    
    # V√©rifier les scripts essentiels
    local essential_scripts=("ath-generate.sh" "ath-dev-boost.sh")
    for script in "${essential_scripts[@]}"; do
        if [[ ! -f "$ATHALIA_ROOT/setup/$script" ]]; then
            echo -e "${RED}‚ùå Script manquant : $script${NC}"
            ((issues++))
        fi
    done
    
    if [[ $issues -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Syst√®me coh√©rent${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  $issues probl√®me(s) d√©tect√©(s)${NC}"
    fi
    
    return $issues
}

# === ALIAS INTELLIGENTS UNIFI√âS ===

# Alias de base avec apprentissage
alias ath-clean='record_action "ath-clean" true "Nettoyage du projet" && find . -type f -name "*.pyc" -delete && find . -type d -name "__pycache__" -delete && find . -name ".DS_Store" -delete'

# Alias de g√©n√©ration de projet avec apprentissage
alias ath-generate='record_action "ath-generate" true "G√©n√©ration de projet" && bash "$ATHALIA_ROOT/setup/ath-generate.sh"'

# Alias de tests avec apprentissage
alias ath-test='record_action "ath-test" true "Ex√©cution des tests" && python3 -m pytest tests/ --cov=athalia_core --cov-report=term'

# Alias de dashboard avec apprentissage
alias ath-dashboard='record_action "ath-dashboard" true "Ouverture du dashboard" && open "$ATHALIA_ROOT/dashboard/dashboard.html"'

# Alias de CLI unifi√©e avec apprentissage
alias ath-unified='record_action "ath-unified" true "CLI unifi√©e" && python3 "$ATHALIA_ROOT/athalia_unified.py"'

# Alias de d√©veloppement avec apprentissage
alias ath-dev-boost='record_action "ath-dev-boost" true "Menu de d√©veloppement" && bash "$ATHALIA_ROOT/setup/ath-dev-boost.sh"'

# === FONCTIONS INTELLIGENTES ===

# Fonction d'aide intelligente
ath-help-intelligent() {
    echo -e "${BLUE}üöÄ ATHALIA INTELLIGENT SYSTEM - Aide Contextuelle${NC}"
    echo -e "${BLUE}================================================${NC}"
    echo ""
    
    # Analyser le contexte actuel
    local current_dir=$(pwd)
    local git_branch=$(git branch --show-current 2>/dev/null || echo "Non initialis√©")
    local python_files=$(find . -name "*.py" | wc -l | tr -d ' ')
    
    echo -e "${CYAN}üìä Contexte Actuel :${NC}"
    echo -e "  üìÅ R√©pertoire : $current_dir"
    echo -e "  üåø Branche Git : $git_branch"
    echo -e "  üêç Fichiers Python : $python_files"
    echo ""
    
    # Recommandations bas√©es sur le contexte
    echo -e "${CYAN}üí° Recommandations Contextuelles :${NC}"
    
    if [[ $python_files -gt 0 ]]; then
        echo -e "  üß™ ath-test : Lancer les tests"
        echo -e "  üîç ath-smart : Analyser le code avec IA"
    fi
    
    if [[ -f "requirements.txt" ]]; then
        echo -e "  üì¶ ath-clean : Nettoyer les caches"
    fi
    
    if [[ -d "tests" ]]; then
        echo -e "  üìä ath-coverage : V√©rifier la couverture"
    fi
    
    echo ""
    echo -e "${CYAN}üéØ Alias les Plus Utiles :${NC}"
    
    # Alias les plus utilis√©s (bas√© sur l'apprentissage)
    jq -r '.module_usage | to_entries | sort_by(.value) | reverse | .[0:5] | .[] | "  \(.key) (\(.value) utilisations)"' "$LEARNING_DB" 2>/dev/null || echo "  ath-generate : G√©n√©rer un projet"
    echo "  ath-unified : CLI unifi√©e"
    echo "  ath-dashboard : Dashboard interactif"
    echo "  ath-dev-boost : Menu de d√©veloppement"
    
    echo ""
    echo -e "${YELLOW}üí° Tapez 'ath-<tab>' pour l'auto-compl√©tion${NC}"
    echo -e "${YELLOW}üìñ Consultez docs/ALIAS.md pour la documentation compl√®te${NC}"
}

# Fonction de diagnostic intelligent
ath-diagnostic() {
    echo -e "${BLUE}üîç DIAGNOSTIC INTELLIGENT ATHALIA${NC}"
    echo -e "${BLUE}================================${NC}"
    echo ""
    
    # V√©rification de la coh√©rence
    check_system_coherence
    
    echo ""
    echo -e "${CYAN}üìä Statistiques d'Usage :${NC}"
    
    # Statistiques globales
    local total_actions=$(jq -r '.actions_history | length' "$LEARNING_DB" 2>/dev/null || echo "0")
    local success_rate=$(jq -r 'if (.actions_history | length) > 0 then ((.actions_history | map(select(.success == true)) | length) * 100 / (.actions_history | length)) else 0 end' "$LEARNING_DB" 2>/dev/null || echo "0")
    
    echo -e "  üìà Actions totales : $total_actions"
    echo -e "  ‚úÖ Taux de succ√®s : ${success_rate}%"
    
    echo ""
    echo -e "${CYAN}üéØ Actions les Plus Populaires :${NC}"
    jq -r '.module_usage | to_entries | sort_by(.value) | reverse | .[0:10] | .[] | "  \(.key): \(.value) utilisations"' "$LEARNING_DB" 2>/dev/null || echo "  Aucune donn√©e disponible"
    
    echo ""
    echo -e "${CYAN}üö® Patterns d'Erreur :${NC}"
    analyze_error_patterns
    
    echo ""
    echo -e "${GREEN}‚úÖ Diagnostic termin√©${NC}"
}

# Fonction de mise √† jour intelligente
ath-update-intelligent() {
    echo -e "${BLUE}üîÑ MISE √Ä JOUR INTELLIGENTE ATHALIA${NC}"
    echo -e "${BLUE}==================================${NC}"
    echo ""
    
    # Mettre √† jour la documentation
    update_alias_documentation
    
    # Analyser les patterns
    analyze_error_patterns
    
    # V√©rifier la coh√©rence
    check_system_coherence
    
    echo ""
    echo -e "${GREEN}‚úÖ Mise √† jour intelligente termin√©e${NC}"
}

# === AUTO-COMPL√âTION INTELLIGENTE ===

# Auto-compl√©tion bas√©e sur l'apprentissage
if [ -n "$ZSH_VERSION" ]; then
    compctl -K _athalia_intelligent ath-
    _athalia_intelligent() {
        # Alias les plus utilis√©s en premier
        local popular_aliases=$(jq -r '.module_usage | to_entries | sort_by(.value) | reverse | .[0:10] | .[] | .key' "$LEARNING_DB" 2>/dev/null || echo "")
        local all_aliases=$(grep -E "^alias ath-" "$ATHALIA_ROOT/setup/alias-unified.sh" | sed 's/alias //;s/=.*//' 2>/dev/null || echo "")
        reply=($popular_aliases $all_aliases)
    }
elif [ -n "$BASH_VERSION" ]; then
    complete -W "$(jq -r '.module_usage | to_entries | sort_by(.value) | reverse | .[0:10] | .[] | .key' "$LEARNING_DB" 2>/dev/null || echo "")" ath-
fi

# === INITIALISATION ===

# Initialiser le syst√®me au chargement
init_learning_db

# Message de bienvenue intelligent
echo -e "${BLUE}üöÄ ATHALIA INTELLIGENT SYSTEM charg√© !${NC}"
echo -e "${CYAN}üí° Tapez 'ath-help-intelligent' pour l'aide contextuelle${NC}"
echo -e "${CYAN}üîç Tapez 'ath-diagnostic' pour le diagnostic complet${NC}"
echo -e "${CYAN}üîÑ Tapez 'ath-update-intelligent' pour la mise √† jour automatique${NC}"

# Enregistrer le chargement du syst√®me
record_action "system_load" true "Chargement du syst√®me intelligent" 
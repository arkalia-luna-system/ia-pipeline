#!/usr/bin/env python3
"""
Orchestrateur unifi√© pour Athalia
Coordination centralis√©e de tous les modules
"""

import json
import logging
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

import yaml

# Imports des modules Athalia
from .ai_robust import RobustAI
from .auto_cicd import AutoCICD
from .auto_cleaner import AutoCleaner
from .auto_documenter import AutoDocumenter
from .auto_tester import AutoTester
from .code_linter import CodeLinter
from .correction_optimizer import CorrectionOptimizer
from .generation import generate_project
from .security_auditor import SecurityAuditor

logger = logging.getLogger(__name__)


class UnifiedOrchestrator:
    """Orchestrateur unifi√© pour Athalia"""

    def __init__(self, project_path: str = "."):
        self.project_path = Path(project_path)
        self.workflow_results = {
            "status": "idle",
            "steps_completed": [],
            "errors": [],
            "warnings": [],
            "metrics": {},
            "artifacts": {},
        }

        # Initialiser les modules
        self.robust_ai = None
        self.security_auditor = None
        self.code_linter = None
        self.correction_optimizer = None
        self.auto_tester = None
        self.auto_documenter = None
        self.auto_cleaner = None
        self.auto_cicd = None

    def initialize_modules(self):
        """Initialise tous les modules"""
        try:
            self.robust_ai = RobustAI()
            self.security_auditor = SecurityAuditor(str(self.project_path))
            self.code_linter = CodeLinter(str(self.project_path))
            self.correction_optimizer = CorrectionOptimizer()
            self.auto_tester = AutoTester(str(self.project_path))
            self.auto_documenter = AutoDocumenter(str(self.project_path))
            self.auto_cleaner = AutoCleaner(str(self.project_path))
            self.auto_cicd = AutoCICD(str(self.project_path))

            self.workflow_results["status"] = "initialized"
            logger.info("‚úÖ Tous les modules initialis√©s")

        except Exception as e:
            self.workflow_results["errors"].append(
                f"Erreur initialisation modules: {e}"
            )
            logger.error(f"‚ùå Erreur initialisation: {e}")

    def run_full_workflow(self, blueprint: Dict[str, Any]) -> Dict[str, Any]:
        """Ex√©cute le workflow complet"""
        logger.info("üöÄ D√©marrage du workflow unifi√©")
        self.workflow_results["status"] = "running"

        try:
            # √âtape 1: G√©n√©ration du projet
            self._step_generate_project(blueprint)

            # √âtape 2: Audit de s√©curit√©
            self._step_security_audit()

            # √âtape 3: Linting du code
            self._step_code_linting()

            # √âtape 4: Optimisation des corrections
            self._step_correction_optimization()

            # √âtape 5: Tests automatiques
            self._step_auto_testing()

            # √âtape 6: Documentation automatique
            self._step_auto_documentation()

            # √âtape 7: Nettoyage automatique
            self._step_auto_cleaning()

            # √âtape 8: CI/CD automatique
            self._step_auto_cicd()

            self.workflow_results["status"] = "completed"
            logger.info("‚úÖ Workflow termin√© avec succ√®s")

        except Exception as e:
            self.workflow_results["status"] = "failed"
            self.workflow_results["errors"].append(f"Erreur workflow: {e}")
            logger.error(f"‚ùå Erreur workflow: {e}")

        return self.workflow_results

    def _step_generate_project(self, blueprint: Dict[str, Any]):
        """√âtape 1: G√©n√©ration du projet"""
        logger.info("üìÅ G√©n√©ration du projet...")

        try:
            project_path = generate_project(blueprint, self.project_path)
            self.workflow_results["steps_completed"].append("project_generation")
            self.workflow_results["artifacts"]["project_path"] = project_path
            logger.info(f"‚úÖ Projet g√©n√©r√©: {project_path}")

        except Exception as e:
            self.workflow_results["errors"].append(f"Erreur g√©n√©ration projet: {e}")
            raise

    def _step_security_audit(self):
        """√âtape 2: Audit de s√©curit√©"""
        logger.info("üîí Audit de s√©curit√©...")

        try:
            if self.security_auditor:
                security_results = self.security_auditor.run()
                self.workflow_results["steps_completed"].append("security_audit")
                self.workflow_results["artifacts"]["security_report"] = security_results
                logger.info("‚úÖ Audit de s√©curit√© termin√©")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur audit s√©curit√©: {e}")

    def _step_code_linting(self):
        """√âtape 3: Linting du code"""
        logger.info("üìè Linting du code...")

        try:
            if self.code_linter:
                lint_results = self.code_linter.run()
                self.workflow_results["steps_completed"].append("code_linting")
                self.workflow_results["artifacts"]["lint_report"] = lint_results
                logger.info("‚úÖ Linting termin√©")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur linting: {e}")

    def _step_correction_optimization(self):
        """√âtape 4: Optimisation des corrections"""
        logger.info("üîß Optimisation des corrections...")

        try:
            if self.correction_optimizer:
                # Optimiser les corrections bas√©es sur les rapports pr√©c√©dents
                optimization_results = self.correction_optimizer.get_correction_stats()
                self.workflow_results["steps_completed"].append(
                    "correction_optimization"
                )
                self.workflow_results["artifacts"][
                    "optimization_stats"
                ] = optimization_results
                logger.info("‚úÖ Optimisation termin√©e")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur optimisation: {e}")

    def _step_auto_testing(self):
        """√âtape 5: Tests automatiques"""
        logger.info("üß™ Tests automatiques...")

        try:
            if self.auto_tester:
                test_results = self.auto_tester.run_tests()
                self.workflow_results["steps_completed"].append("auto_testing")
                self.workflow_results["artifacts"]["test_results"] = test_results
                logger.info("‚úÖ Tests automatiques termin√©s")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur tests automatiques: {e}")

    def _step_auto_documentation(self):
        """√âtape 6: Documentation automatique"""
        logger.info("üìö Documentation automatique...")

        try:
            if self.auto_documenter:
                doc_results = self.auto_documenter.generate_documentation()
                self.workflow_results["steps_completed"].append("auto_documentation")
                self.workflow_results["artifacts"]["documentation"] = doc_results
                logger.info("‚úÖ Documentation g√©n√©r√©e")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur documentation: {e}")

    def _step_auto_cleaning(self):
        """√âtape 7: Nettoyage automatique"""
        logger.info("üßπ Nettoyage automatique...")

        try:
            if self.auto_cleaner:
                clean_results = self.auto_cleaner.clean_project()
                self.workflow_results["steps_completed"].append("auto_cleaning")
                self.workflow_results["artifacts"]["cleaning_report"] = clean_results
                logger.info("‚úÖ Nettoyage termin√©")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur nettoyage: {e}")

    def _step_auto_cicd(self):
        """√âtape 8: CI/CD automatique"""
        logger.info("üöÄ Configuration CI/CD...")

        try:
            if self.auto_cicd:
                cicd_results = self.auto_cicd.setup_cicd()
                self.workflow_results["steps_completed"].append("auto_cicd")
                self.workflow_results["artifacts"]["cicd_config"] = cicd_results
                logger.info("‚úÖ CI/CD configur√©")

        except Exception as e:
            self.workflow_results["warnings"].append(f"Erreur CI/CD: {e}")

    def generate_workflow_report(self) -> str:
        """G√©n√®re un rapport du workflow"""
        report = []
        report.append("# Rapport Workflow Unifi√© Athalia")
        report.append("")

        report.append(f"## Statut: {self.workflow_results['status'].upper()}")
        report.append(f"## Date: {datetime.now().isoformat()}")
        report.append("")

        report.append("## √âtapes Compl√©t√©es")
        for step in self.workflow_results["steps_completed"]:
            report.append(f"- ‚úÖ {step}")
        report.append("")

        if self.workflow_results["artifacts"]:
            report.append("## Art√©facts G√©n√©r√©s")
            for artifact, value in self.workflow_results["artifacts"].items():
                report.append(f"- **{artifact}**: {type(value).__name__}")
        report.append("")

        if self.workflow_results["errors"]:
            report.append("## Erreurs")
            for error in self.workflow_results["errors"]:
                report.append(f"- ‚ùå {error}")
            report.append("")

        if self.workflow_results["warnings"]:
            report.append("## Avertissements")
            for warning in self.workflow_results["warnings"]:
                report.append(f"- ‚ö†Ô∏è {warning}")
            report.append("")

        if self.workflow_results["metrics"]:
            report.append("## M√©triques")
            for metric, value in self.workflow_results["metrics"].items():
                report.append(f"- **{metric}**: {value}")

        return "\n".join(report)

    def save_workflow_results(self, output_path: str = "workflow_results.json"):
        """Sauvegarde les r√©sultats du workflow"""
        try:
            with open(output_path, "w", encoding="utf-8") as f:
                json.dump(self.workflow_results, f, indent=2, default=str)
            logger.info(f"‚úÖ R√©sultats sauvegard√©s: {output_path}")
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde: {e}")


def run_unified_workflow(
    blueprint: Dict[str, Any], project_path: str = "."
) -> Dict[str, Any]:
    """Fonction utilitaire pour ex√©cuter le workflow unifi√©"""
    orchestrator = UnifiedOrchestrator(project_path)
    orchestrator.initialize_modules()
    return orchestrator.run_full_workflow(blueprint)

#!/usr/bin/env python3
"""
üéØ ORCHESTRATEUR UNIFI√â ATHALIA
================================
Orchestrateur unifi√© qui combine :
- Industrialisation compl√®te (athalia_orchestrator)
- Intelligence et apprentissage (intelligent_orchestrator)
- Coordination de tous les modules Athalia
- Gestion des t√¢ches et pr√©dictions
- Optimisation automatique du code
"""

import logging
import json
import sqlite3
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional, Set, Tuple
from dataclasses import dataclass, asdict
import argparse

# Imports des modules Athalia
from .advanced_analytics import AdvancedAnalytics
from .auto_cicd import AutoCICD
from .auto_cleaner import AutoCleaner
from .auto_documenter import AutoDocumenter
from .auto_tester import AutoTester
from .code_linter import CodeLinter
from .intelligent_auditor import IntelligentAuditor
from .project_importer import ProjectImporter
from .security_auditor import SecurityAuditor
from .intelligent_analyzer import IntelligentAnalyzer

# Imports robotiques (optionnels)
from .analytics import analyze_project, generate_heatmap_data, generate_technical_debt_analysis, generate_analytics_html
from .cleanup import clean_old_tests_and_caches, clean_macos_files
from .cli import cli, generate
from .main import main
from .security import security_audit_project
from .onboarding import generate_onboarding_md, generate_onboard_cli, generate_onboarding_html_advanced
from .plugins_manager import run_all_plugins
from .ready_check import open_patch, check_ready
from .dashboard import main
from .audit import Audit
from .config_manager import ConfigManager
from .correction_optimizer import CorrectionOptimizer
# from .generation import FlowerAnimation  # Classe non disponible
from .intelligent_memory import IntelligentMemory
from .logger_advanced import AthaliaLogger
from .pattern_detector import PatternDetector
from .performance_analyzer import PerformanceAnalyzer
try:
    from .robotics.reachy_auditor import ReachyAuditor
    from .robotics.ros2_validator import ROS2Validator
    from .robotics.docker_robotics import DockerRoboticsManager
    from .robotics.rust_analyzer import RustAnalyzer
    from .robotics.robotics_ci import RoboticsCI
    ROBOTICS_AVAILABLE = True
except ImportError:
    ROBOTICS_AVAILABLE = False

# Imports de distillation (optionnels)
try:
    from .distillation.response_distiller import ResponseDistiller
    from .distillation.audit_distiller import AuditDistiller
    from .distillation.correction_distiller import CorrectionDistiller
    from .distillation.adaptive_distillation import AdaptiveDistiller
    from .distillation.code_genetics import CodeGenetics
    from .distillation.predictive_cache import PredictiveCache
    DISTILLATION_AVAILABLE = True
except ImportError:
    DISTILLATION_AVAILABLE = False

# Imports IA robuste (optionnels)
try:
    from .ai_robust import RobustAI, AIModel, PromptContext
    AI_ROBUST_AVAILABLE = True
except ImportError:
    AI_ROBUST_AVAILABLE = False

logger = logging.getLogger(__name__)

@dataclass
class OrchestrationTask:
    """T√¢che d'orchestration unifi√©e"""
    task_id: str
    task_type: str  # 'industrialization', 'analysis', 'correction', 'optimization', 'prediction'
    target_path: str
    priority: int  # 1-5 (1 = critique, 5 = faible)
    status: str  # 'pending', 'running', 'completed', 'failed'
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None

@dataclass
class IntelligentInsight:
    """Insight intelligent unifi√©"""
    insight_type: str  # 'prediction', 'optimization', 'warning', 'suggestion', 'industrialization'
    title: str
    description: str
    confidence: float
    priority: str  # 'low', 'medium', 'high', 'critical'
    suggested_action: str
    estimated_impact: str
    code_location: Optional[str] = None

@dataclass
class IndustrializationStep:
    """√âtape d'industrialisation"""
    name: str
    status: str  # 'pending', 'running', 'completed', 'failed'
    result: Optional[Dict[str, Any]] = None
    duration: Optional[float] = None
    error: Optional[str] = None

class UnifiedOrchestrator:
    """
    Orchestrateur unifi√© Athalia
    Combine industrialisation compl√®te et intelligence avanc√©e
    """
    
    def __init__(self, root_path: str = None):
        self.root_path = Path(root_path or Path.cwd())
        self.db_path = self.root_path / "data" / "unified_orchestration.db"
        
        # Cr√©er les dossiers n√©cessaires
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Initialiser la base de donn√©es
        self._init_database()
        
        # Configuration par d√©faut
        self.config = {
            "audit": True,
            "lint": True,
            "security": True,
            "analytics": True,
            "docs": True,
            "cicd": False,
            "robotics": False,
            "intelligence": True,
            "predictions": True,
            "optimizations": True,
            "learning": True
        }
        
        # Initialiser les modules intelligents
        self.intelligent_analyzer = IntelligentAnalyzer(self.root_path)
        
        # Cache pour les performances
        self._task_cache = {}
        self._insight_cache = {}
        self._predictive_cache = None
        
        # √âtat d'ex√©cution
        self._running_tasks = set()
        self._completed_tasks = {}
        self._failed_tasks = {}
        
        logger.info(f"üéØ Unified Orchestrator initialis√© dans {self.root_path}")
    
    def _init_database(self):
        """Initialiser la base de donn√©es unifi√©e"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # Table des t√¢ches d'orchestration
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orchestration_tasks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    task_id TEXT UNIQUE NOT NULL,
                    task_type TEXT NOT NULL,
                    target_path TEXT NOT NULL,
                    priority INTEGER NOT NULL,
                    status TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    started_at TEXT,
                    completed_at TEXT,
                    result TEXT,
                    error TEXT
                )
            """)
            
            # Table des insights intelligents
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS intelligent_insights (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    insight_type TEXT NOT NULL,
                    title TEXT NOT NULL,
                    description TEXT NOT NULL,
                    confidence REAL NOT NULL,
                    priority TEXT NOT NULL,
                    suggested_action TEXT NOT NULL,
                    estimated_impact TEXT NOT NULL,
                    code_location TEXT,
                    created_at TEXT NOT NULL,
                    applied BOOLEAN DEFAULT 0,
                    applied_at TEXT
                )
            """)
            
            # Table des √©tapes d'industrialisation
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS industrialization_steps (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    project_path TEXT NOT NULL,
                    step_name TEXT NOT NULL,
                    status TEXT NOT NULL,
                    result TEXT,
                    duration REAL,
                    error TEXT,
                    timestamp TEXT NOT NULL
                )
            """)
            
            # Table des m√©triques d'orchestration
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS orchestration_metrics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    metric_name TEXT NOT NULL,
                    metric_value REAL NOT NULL,
                    timestamp TEXT NOT NULL,
                    context TEXT
                )
            """)
            
            conn.commit()
    
    def orchestrate_project_complete(self, project_path: str, 
                                   config: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        Orchestration compl√®te d'un projet
        Combine industrialisation et intelligence
        """
        project_path = Path(project_path)
        
        if config:
            self.config.update(config)
        
        logger.info(f"üéØ Orchestration unifi√©e du projet: {project_path.name}")
        logger.info("=" * 80)
        
        results = {
            "project_path": str(project_path),
            "orchestration_timestamp": datetime.now().isoformat(),
            "config": self.config,
            "industrialization_steps": {},
            "intelligent_analysis": {},
            "predictions": [],
            "optimizations": [],
            "insights": [],
            "learning_data": {},
            "final_report": ""
        }
        
        # PHASE 1: INDUSTRIALISATION
        if any([self.config["audit"], self.config["lint"], self.config["security"], 
                self.config["analytics"], self.config["docs"], self.config["cicd"]]):
            logger.info("üè≠ PHASE 1: Industrialisation")
            industrialization_results = self._run_industrialization(project_path)
            results["industrialization_steps"] = industrialization_results
        
        # PHASE 2: ANALYSE INTELLIGENTE
        if self.config["intelligence"]:
            logger.info("üß† PHASE 2: Analyse intelligente")
            intelligent_results = self.intelligent_analyzer.analyze_project_comprehensive(project_path)
            results["intelligent_analysis"] = intelligent_results
        
        # PHASE 3: PR√âDICTIONS ET OPTIMISATIONS
        if self.config["predictions"] or self.config["optimizations"]:
            logger.info("üîÆ PHASE 3: Pr√©dictions et optimisations")
            predictions = self._generate_predictions(project_path)
            optimizations = self._generate_optimizations(project_path)
            results["predictions"] = predictions
            results["optimizations"] = optimizations
            results["insights"].extend(predictions + optimizations)
        
        # PHASE 4: APPRENTISSAGE
        if self.config["learning"]:
            logger.info("üìö PHASE 4: Apprentissage et insights")
            learning_data = self._learn_from_results(results)
            results["learning_data"] = learning_data
        
        # G√©n√©ration du rapport final
        final_report = self._generate_unified_report(results)
        results["final_report"] = final_report
        
        # Sauvegarde des r√©sultats
        self._save_unified_results(results)
        
        logger.info("=" * 80)
        logger.info("‚úÖ ORCHESTRATION UNIFI√âE TERMIN√âE !")
        logger.info("=" * 80)
        
        return results
    
    def _run_industrialization(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter l'industrialisation compl√®te"""
        steps = {}
        
        # √âtape 1: Audit intelligent
        if self.config["audit"]:
            logger.info("üîç √âtape 1: Audit intelligent")
            audit_result = self._run_audit(project_path)
            steps["audit"] = audit_result
        
        # √âtape 2: Linting avanc√©
        if self.config["lint"]:
            logger.info("üßπ √âtape 2: Linting avanc√©")
            lint_result = self._run_linting(project_path)
            steps["lint"] = lint_result
        
        # √âtape 3: Audit s√©curit√©
        if self.config["security"]:
            logger.info("üîí √âtape 3: Audit s√©curit√©")
            security_result = self._run_security_audit(project_path)
            steps["security"] = security_result
        
        # √âtape 4: Analytics avanc√©e
        if self.config["analytics"]:
            logger.info("üìä √âtape 4: Analytics avanc√©e")
            analytics_result = self._run_analytics(project_path)
            steps["analytics"] = analytics_result
        
        # √âtape 5: Nettoyage automatique
        logger.info("üßπ √âtape 5: Nettoyage automatique")
        cleanup_result = self._run_cleanup(project_path)
        steps["cleanup"] = cleanup_result
        
        # √âtape 6: Documentation automatique
        if self.config["docs"]:
            logger.info("üìö √âtape 6: Documentation automatique")
            docs_result = self._run_documentation(project_path)
            steps["docs"] = docs_result
        
        # √âtape 7: Tests automatiques
        logger.info("üß™ √âtape 7: Tests automatiques")
        tests_result = self._run_testing(project_path)
        steps["tests"] = tests_result
        
        # √âtape 8: CI/CD automatique
        if self.config["cicd"]:
            logger.info("üöÄ √âtape 8: CI/CD automatique")
            cicd_result = self._run_cicd(project_path)
            steps["cicd"] = cicd_result
        
        # √âtape 9: Audit robotique (si activ√©)
        if self.config["robotics"] and ROBOTICS_AVAILABLE:
            logger.info("ü§ñ √âtape 9: Audit robotique")
            robotics_result = self._run_robotics_audit(project_path)
            steps["robotics"] = robotics_result
        
        return steps
    
    def _run_audit(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter l'audit intelligent"""
        try:
            auditor = IntelligentAuditor(str(project_path))
            result = auditor.run()
            return {
                "status": "completed",
                "result": result,
                "passed": result.get("score", 0) >= 80
            }
        except Exception as e:
            logger.error(f"Erreur lors de l'audit: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_linting(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter le linting"""
        try:
            linter = CodeLinter(str(project_path), auto_fix=self.config.get("lint", False))
            result = linter.run()
            return {
                "status": "completed",
                "result": result,
                "passed": result.get("score", 0) >= 80
            }
        except Exception as e:
            logger.error(f"Erreur lors du linting: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_security_audit(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter l'audit de s√©curit√©"""
        try:
            security_auditor = SecurityAuditor(str(project_path))
            result = security_auditor.run()
            return {
                "status": "completed",
                "result": result,
                "passed": result.get("score", 0) >= 80
            }
        except Exception as e:
            logger.error(f"Erreur lors de l'audit de s√©curit√©: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_analytics(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter l'analytics"""
        try:
            analytics = AdvancedAnalytics(str(project_path))
            result = analytics.run()
            return {
                "status": "completed",
                "result": result,
                "passed": True
            }
        except Exception as e:
            logger.error(f"Erreur lors de l'analytics: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_cleanup(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter le nettoyage"""
        try:
            cleaner = AutoCleaner(str(project_path))
            result = cleaner.run()
            return {
                "status": "completed",
                "result": result,
                "passed": True
            }
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_documentation(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter la documentation"""
        try:
            documenter = AutoDocumenter(str(project_path))
            result = documenter.run()
            return {
                "status": "completed",
                "result": result,
                "passed": True
            }
        except Exception as e:
            logger.error(f"Erreur lors de la documentation: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_testing(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter les tests"""
        try:
            tester = AutoTester(str(project_path))
            result = tester.run()
            return {
                "status": "completed",
                "result": result,
                "passed": result.get("passed", False)
            }
        except Exception as e:
            logger.error(f"Erreur lors des tests: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_cicd(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter le CI/CD"""
        try:
            cicd = AutoCICD(str(project_path))
            result = cicd.run()
            return {
                "status": "completed",
                "result": result,
                "passed": True
            }
        except Exception as e:
            logger.error(f"Erreur lors du CI/CD: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _run_robotics_audit(self, project_path: Path) -> Dict[str, Any]:
        """Ex√©cuter l'audit robotique"""
        try:
            results = {}
            
            # Audit Reachy
            reachy_auditor = ReachyAuditor(str(project_path))
            results["reachy"] = reachy_auditor.audit_complete()
            
            # Validation ROS2
            ros2_validator = ROS2Validator(str(project_path))
            results["ros2"] = ros2_validator.validate_workspace()
            
            # Gestion Docker
            docker_manager = DockerRoboticsManager(str(project_path))
            results["docker"] = docker_manager.manage_containers()
            
            # Analyse Rust
            rust_analyzer = RustAnalyzer(str(project_path))
            results["rust"] = rust_analyzer.analyze_rust_code()
            
            # CI robotique
            robotics_ci = RoboticsCI(str(project_path))
            results["ci"] = robotics_ci.setup_robotics_ci()
            
            return {
                "status": "completed",
                "result": results,
                "passed": True
            }
        except Exception as e:
            logger.error(f"Erreur lors de l'audit robotique: {e}")
            return {
                "status": "failed",
                "error": str(e),
                "passed": False
            }
    
    def _generate_predictions(self, project_path: Path) -> List[IntelligentInsight]:
        """G√©n√©rer des pr√©dictions intelligentes"""
        insights = []
        
        # Pr√©dictions bas√©es sur l'analyse du projet
        try:
            # Pr√©dire les probl√®mes de performance
            if project_path.exists():
                python_files = list(project_path.rglob("*.py"))
                if len(python_files) > 100:
                    insights.append(IntelligentInsight(
                        insight_type="prediction",
                        title="Projet volumineux d√©tect√©",
                        description=f"Le projet contient {len(python_files)} fichiers Python",
                        confidence=0.8,
                        priority="medium",
                        suggested_action="Consid√©rer la modularisation",
                        estimated_impact="Am√©lioration de la maintenabilit√©"
                    ))
        except Exception as e:
            logger.warning(f"Erreur lors de la g√©n√©ration de pr√©dictions: {e}")
        
        return insights
    
    def _generate_optimizations(self, project_path: Path) -> List[IntelligentInsight]:
        """G√©n√©rer des optimisations intelligentes"""
        insights = []
        
        # Optimisations bas√©es sur l'analyse
        try:
            # Sugg√©rer des optimisations de structure
            insights.append(IntelligentInsight(
                insight_type="optimization",
                title="Optimisation de structure recommand√©e",
                description="Consid√©rer la r√©organisation des modules",
                confidence=0.7,
                priority="medium",
                suggested_action="Refactoriser la structure du projet",
                estimated_impact="Am√©lioration de 15-20%"
            ))
        except Exception as e:
            logger.warning(f"Erreur lors de la g√©n√©ration d'optimisations: {e}")
        
        return insights
    
    def _learn_from_results(self, results: Dict[str, Any]) -> Dict[str, Any]:
        """Apprendre des r√©sultats d'orchestration"""
        learning_data = {
            "timestamp": datetime.now().isoformat(),
            "project_insights": [],
            "performance_metrics": {},
            "recommendations": []
        }
        
        # Analyser les r√©sultats d'industrialisation
        if "industrialization_steps" in results:
            steps = results["industrialization_steps"]
            for step_name, step_result in steps.items():
                if step_result.get("passed", False):
                    learning_data["project_insights"].append(f"√âtape {step_name} r√©ussie")
                else:
                    learning_data["recommendations"].append(f"Am√©liorer l'√©tape {step_name}")
        
        # Analyser les r√©sultats intelligents
        if "intelligent_analysis" in results:
            analysis = results["intelligent_analysis"]
            if hasattr(analysis, 'overall_score'):
                learning_data["performance_metrics"]["overall_score"] = analysis.overall_score
        
        return learning_data
    
    def _generate_unified_report(self, results: Dict[str, Any]) -> str:
        """G√©n√©rer un rapport unifi√©"""
        report_lines = []
        report_lines.append("# üéØ RAPPORT D'ORCHESTRATION UNIFI√âE ATHALIA")
        report_lines.append("=" * 80)
        report_lines.append(f"**Projet** : {results['project_path']}")
        report_lines.append(f"**Date** : {results['orchestration_timestamp']}")
        report_lines.append("")
        
        # R√©sum√© des √©tapes d'industrialisation
        if "industrialization_steps" in results:
            report_lines.append("## üè≠ INDUSTRIALISATION")
            steps = results["industrialization_steps"]
            for step_name, step_result in steps.items():
                status = "‚úÖ" if step_result.get("passed", False) else "‚ùå"
                report_lines.append(f"- {status} {step_name}")
        
        # R√©sum√© de l'analyse intelligente
        if "intelligent_analysis" in results:
            analysis = results["intelligent_analysis"]
            if hasattr(analysis, 'overall_score'):
                report_lines.append(f"\n## üß† ANALYSE INTELLIGENTE")
                report_lines.append(f"- **Score global** : {analysis.overall_score:.1f}/100")
        
        # Pr√©dictions et optimisations
        if results.get("predictions") or results.get("optimizations"):
            report_lines.append(f"\n## üîÆ PR√âDICTIONS ET OPTIMISATIONS")
            for insight in results.get("predictions", []) + results.get("optimizations", []):
                report_lines.append(f"- **{insight.title}** : {insight.description}")
        
        return "\n".join(report_lines)
    
    def _save_unified_results(self, results: Dict[str, Any]):
        """Sauvegarder les r√©sultats unifi√©s"""
        try:
            # Sauvegarder dans la base de donn√©es
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Sauvegarder les √©tapes d'industrialisation
                for step_name, step_result in results.get("industrialization_steps", {}).items():
                    cursor.execute("""
                        INSERT INTO industrialization_steps 
                        (project_path, step_name, status, result, duration, error, timestamp)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    """, (
                        results["project_path"],
                        step_name,
                        step_result.get("status", "unknown"),
                        json.dumps(step_result.get("result", {})),
                        step_result.get("duration"),
                        step_result.get("error"),
                        datetime.now().isoformat()
                    ))
                
                conn.commit()
            
            # Sauvegarder le rapport JSON
            report_file = self.root_path / "data" / f"unified_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, default=str)
            
            logger.info(f"üìÑ Rapport sauvegard√©: {report_file}")
            
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde: {e}")
    
    def get_orchestration_insights(self) -> Dict[str, Any]:
        """Obtenir des insights d'orchestration"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # Statistiques des t√¢ches
                cursor.execute("SELECT COUNT(*) FROM orchestration_tasks")
                total_tasks = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM orchestration_tasks WHERE status = 'completed'")
                completed_tasks = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM intelligent_insights")
                total_insights = cursor.fetchone()[0]
                
                return {
                    "total_tasks": total_tasks,
                    "completed_tasks": completed_tasks,
                    "success_rate": (completed_tasks / total_tasks * 100) if total_tasks > 0 else 0,
                    "total_insights": total_insights
                }
        except Exception as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des insights: {e}")
            return {}

def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(description="Orchestrateur unifi√© Athalia")
    parser.add_argument("project_path", help="Chemin du projet √† orchestrer")
    parser.add_argument("--config", help="Fichier de configuration JSON")
    parser.add_argument("--audit", action="store_true", help="Activer l'audit")
    parser.add_argument("--lint", action="store_true", help="Activer le linting")
    parser.add_argument("--security", action="store_true", help="Activer l'audit de s√©curit√©")
    parser.add_argument("--analytics", action="store_true", help="Activer l'analytics")
    parser.add_argument("--docs", action="store_true", help="Activer la documentation")
    parser.add_argument("--cicd", action="store_true", help="Activer le CI/CD")
    parser.add_argument("--robotics", action="store_true", help="Activer l'audit robotique")
    parser.add_argument("--intelligence", action="store_true", help="Activer l'analyse intelligente")
    parser.add_argument("--predictions", action="store_true", help="Activer les pr√©dictions")
    parser.add_argument("--optimizations", action="store_true", help="Activer les optimisations")
    parser.add_argument("--learning", action="store_true", help="Activer l'apprentissage")
    
    args = parser.parse_args()
    
    # Configuration
    config = {}
    if args.config:
        with open(args.config, 'r') as f:
            config = json.load(f)
    
    # Override avec les arguments
    if args.audit: config["audit"] = True
    if args.lint: config["lint"] = True
    if args.security: config["security"] = True
    if args.analytics: config["analytics"] = True
    if args.docs: config["docs"] = True
    if args.cicd: config["cicd"] = True
    if args.robotics: config["robotics"] = True
    if args.intelligence: config["intelligence"] = True
    if args.predictions: config["predictions"] = True
    if args.optimizations: config["optimizations"] = True
    if args.learning: config["learning"] = True
    
    # Ex√©cuter l'orchestration
    orchestrator = UnifiedOrchestrator()
    results = orchestrator.orchestrate_project_complete(args.project_path, config)
    
    # Afficher le rapport
    print(results["final_report"])

if __name__ == "__main__":
    main() 
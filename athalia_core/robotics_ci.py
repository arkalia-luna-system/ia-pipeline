#!/usr/bin/env python3
"""
Module de CI/CD pour projets robotics
Int√©gration continue pour ROS2, Rust et projets robotics
"""

from pathlib import Path
from typing import Dict, Any, List, Optional
import subprocess
import json
import yaml
import logging
import xml.etree.ElementTree as ET

logger = logging.getLogger(__name__)


class RoboticsCI:
    """Syst√®me de CI/CD pour projets robotics"""

    def __init__(self, project_path: str = "."):
        self.project_path = Path(project_path)
        self.ci_results = {
            "build_status": "unknown",
            "test_status": "unknown",
            "lint_status": "unknown",
            "security_status": "unknown",
            "deployment_status": "unknown",
            "errors": [],
            "warnings": [],
            "metrics": {}
        }

    def run_full_pipeline(self) -> Dict[str, Any]:
        """Ex√©cute le pipeline CI/CD complet"""
        logger.info(f"üöÄ D√©marrage du pipeline CI/CD pour {self.project_path.name}")

        # √âtapes du pipeline
        self._check_project_structure()
        self._run_build()
        self._run_tests()
        self._run_linting()
        self._run_security_scan()
        self._run_deployment_check()

        # Calcul du score global
        self._calculate_ci_score()

        return self.ci_results

    def _check_project_structure(self):
        """V√©rifie la structure du projet robotics"""
        required_files = []
        
        # D√©tecter le type de projet
        if (self.project_path / "package.xml").exists():
            # Projet ROS2
            required_files = ["package.xml", "setup.py", "CMakeLists.txt"]
        elif (self.project_path / "Cargo.toml").exists():
            # Projet Rust
            required_files = ["Cargo.toml", "src/"]
        elif (self.project_path / "package.json").exists():
            # Projet Node.js
            required_files = ["package.json"]
        
        missing_files = []
        for file in required_files:
            if isinstance(file, str):
                if not (self.project_path / file).exists():
                    missing_files.append(file)
            else:  # Directory
                if not (self.project_path / file).is_dir():
                    missing_files.append(file)
        
        if missing_files:
            self.ci_results["errors"].append(f"Fichiers requis manquants: {missing_files}")
            self.ci_results["build_status"] = "failed"

    def _run_build(self):
        """Ex√©cute la compilation du projet"""
        try:
            if (self.project_path / "Cargo.toml").exists():
                # Build Rust
                result = subprocess.run(
                    ["cargo", "build", "--release"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode == 0:
                    self.ci_results["build_status"] = "success"
                else:
                    self.ci_results["build_status"] = "failed"
                    self.ci_results["errors"].append(f"Build Rust √©chou√©: {result.stderr}")
            
            elif (self.project_path / "package.xml").exists():
                # Build ROS2
                result = subprocess.run(
                    ["colcon", "build"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode == 0:
                    self.ci_results["build_status"] = "success"
                else:
                    self.ci_results["build_status"] = "failed"
                    self.ci_results["errors"].append(f"Build ROS2 √©chou√©: {result.stderr}")
            
            else:
                # Build Python standard
                result = subprocess.run(
                    ["python", "-m", "pip", "install", "-e", "."],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode == 0:
                    self.ci_results["build_status"] = "success"
                else:
                    self.ci_results["build_status"] = "failed"
                    self.ci_results["errors"].append(f"Build Python √©chou√©: {result.stderr}")
        
        except subprocess.TimeoutExpired:
            self.ci_results["build_status"] = "failed"
            self.ci_results["errors"].append("Build timeout")
        except Exception as e:
            self.ci_results["build_status"] = "failed"
            self.ci_results["errors"].append(f"Erreur build: {e}")

    def _run_tests(self):
        """Ex√©cute les tests"""
        try:
            if (self.project_path / "Cargo.toml").exists():
                # Tests Rust
                result = subprocess.run(
                    ["cargo", "test"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode == 0:
                    self.ci_results["test_status"] = "success"
                else:
                    self.ci_results["test_status"] = "failed"
                    self.ci_results["errors"].append(f"Tests Rust √©chou√©s: {result.stderr}")
            
            elif (self.project_path / "package.xml").exists():
                # Tests ROS2
                result = subprocess.run(
                    ["colcon", "test"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode == 0:
                    self.ci_results["test_status"] = "success"
                else:
                    self.ci_results["test_status"] = "failed"
                    self.ci_results["errors"].append(f"Tests ROS2 √©chou√©s: {result.stderr}")
            
            else:
                # Tests Python
                result = subprocess.run(
                    ["python", "-m", "pytest"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=300
                )
                if result.returncode == 0:
                    self.ci_results["test_status"] = "success"
                else:
                    self.ci_results["test_status"] = "failed"
                    self.ci_results["errors"].append(f"Tests Python √©chou√©s: {result.stderr}")
        
        except subprocess.TimeoutExpired:
            self.ci_results["test_status"] = "failed"
            self.ci_results["errors"].append("Tests timeout")
        except Exception as e:
            self.ci_results["test_status"] = "failed"
            self.ci_results["errors"].append(f"Erreur tests: {e}")

    def _run_linting(self):
        """Ex√©cute le linting"""
        try:
            if (self.project_path / "Cargo.toml").exists():
                # Lint Rust
                result = subprocess.run(
                    ["cargo", "clippy"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=120
                )
                if result.returncode == 0:
                    self.ci_results["lint_status"] = "success"
                else:
                    self.ci_results["lint_status"] = "failed"
                    self.ci_results["warnings"].append(f"Lint Rust: {result.stderr}")
            
            else:
                # Lint Python
                result = subprocess.run(
                    ["flake8", "."],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=120
                )
                if result.returncode == 0:
                    self.ci_results["lint_status"] = "success"
                else:
                    self.ci_results["lint_status"] = "failed"
                    self.ci_results["warnings"].append(f"Lint Python: {result.stdout}")
        
        except subprocess.TimeoutExpired:
            self.ci_results["lint_status"] = "failed"
            self.ci_results["warnings"].append("Lint timeout")
        except Exception as e:
            self.ci_results["lint_status"] = "failed"
            self.ci_results["warnings"].append(f"Erreur lint: {e}")

    def _run_security_scan(self):
        """Ex√©cute le scan de s√©curit√©"""
        try:
            if (self.project_path / "Cargo.toml").exists():
                # Audit Rust
                result = subprocess.run(
                    ["cargo", "audit"],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=120
                )
                if result.returncode == 0:
                    self.ci_results["security_status"] = "success"
                else:
                    self.ci_results["security_status"] = "failed"
                    self.ci_results["warnings"].append(f"Audit Rust: {result.stderr}")
            
            else:
                # Scan Python
                result = subprocess.run(
                    ["bandit", "-r", "."],
                    cwd=self.project_path,
                    capture_output=True,
                    text=True,
                    timeout=120
                )
                if result.returncode == 0:
                    self.ci_results["security_status"] = "success"
                else:
                    self.ci_results["security_status"] = "failed"
                    self.ci_results["warnings"].append(f"Scan s√©curit√©: {result.stdout}")
        
        except subprocess.TimeoutExpired:
            self.ci_results["security_status"] = "failed"
            self.ci_results["warnings"].append("Scan s√©curit√© timeout")
        except Exception as e:
            self.ci_results["security_status"] = "failed"
            self.ci_results["warnings"].append(f"Erreur scan s√©curit√©: {e}")

    def _run_deployment_check(self):
        """V√©rifie la pr√©paration au d√©ploiement"""
        try:
            # V√©rifier les fichiers de configuration
            config_files = ["docker-compose.yml", "Dockerfile", "deploy.yaml"]
            found_configs = []
            
            for config_file in config_files:
                if (self.project_path / config_file).exists():
                    found_configs.append(config_file)
            
            if found_configs:
                self.ci_results["deployment_status"] = "ready"
                self.ci_results["metrics"]["config_files"] = found_configs
            else:
                self.ci_results["deployment_status"] = "not_ready"
                self.ci_results["warnings"].append("Aucun fichier de d√©ploiement trouv√©")
        
        except Exception as e:
            self.ci_results["deployment_status"] = "failed"
            self.ci_results["errors"].append(f"Erreur v√©rification d√©ploiement: {e}")

    def _calculate_ci_score(self):
        """Calcule le score global de CI/CD"""
        score = 100
        
        # P√©nalit√©s par statut
        status_penalties = {
            "failed": 25,
            "unknown": 10,
            "not_ready": 5
        }
        
        for status in [self.ci_results["build_status"], 
                      self.ci_results["test_status"],
                      self.ci_results["lint_status"],
                      self.ci_results["security_status"]]:
            score -= status_penalties.get(status, 0)
        
        # P√©nalit√©s pour erreurs et avertissements
        score -= len(self.ci_results["errors"]) * 5
        score -= len(self.ci_results["warnings"]) * 2
        
        self.ci_results["metrics"]["ci_score"] = max(0, score)

    def generate_ci_report(self) -> str:
        """G√©n√®re un rapport de CI/CD"""
        report = []
        report.append("# Rapport CI/CD Robotics")
        report.append("")
        
        report.append("## Statuts")
        report.append(f"- üèóÔ∏è Build: {self.ci_results['build_status']}")
        report.append(f"- üß™ Tests: {self.ci_results['test_status']}")
        report.append(f"- üìè Lint: {self.ci_results['lint_status']}")
        report.append(f"- üîí S√©curit√©: {self.ci_results['security_status']}")
        report.append(f"- üöÄ D√©ploiement: {self.ci_results['deployment_status']}")
        report.append("")
        
        report.append(f"## Score CI/CD: {self.ci_results['metrics'].get('ci_score', 0)}/100")
        report.append("")
        
        if self.ci_results["errors"]:
            report.append("## Erreurs")
            for error in self.ci_results["errors"]:
                report.append(f"- ‚ùå {error}")
            report.append("")
        
        if self.ci_results["warnings"]:
            report.append("## Avertissements")
            for warning in self.ci_results["warnings"]:
                report.append(f"- ‚ö†Ô∏è {warning}")
            report.append("")
        
        if self.ci_results["metrics"]:
            report.append("## M√©triques")
            for key, value in self.ci_results["metrics"].items():
                report.append(f"- {key}: {value}")
        
        return "\n".join(report)


def run_robotics_ci(project_path: str = ".") -> Dict[str, Any]:
    """Fonction utilitaire pour ex√©cuter la CI/CD robotics"""
    ci = RoboticsCI(project_path)
    return ci.run_full_pipeline() 
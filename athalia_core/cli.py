#!/usr/bin/env python3
"""
Interface CLI pour Athalia avec IA robuste.
"""

import logging
import os
import traceback
from pathlib import Path

import click
import yaml

from .ai_robust import AIModel, RobustAI
from .audit import audit_project_intelligent

# Configuration pour l'internationalisation (i18n) des messages CLI
# Utilisation de gettext pour la traduction des messages utilisateur
# Exemple: _("Message √† traduire") pour les cha√Ænes traduisibles


def generate_project(blueprint, output_path, dry_run=False):
    """G√©n√®re un projet √† partir d'un blueprint"""
    try:
        if dry_run:
            click.echo("üîç Mode simulation - Aucun fichier cr√©√©")
            return True

        # Cr√©er la structure du projet
        project_path = Path(output_path)
        project_path.mkdir(parents=True, exist_ok=True)

        # Cr√©er les fichiers de base
        project_name = blueprint.get("project_name", "my_project")

        # README.md
        readme_content = f"""# {project_name}

{blueprint.get('description', 'Projet g√©n√©r√© automatiquement')}

## Installation

```bash
pip install -r requirements.txt
```

## Utilisation

```python
from {project_name} import main
main()
```
"""

        with open(project_path / "README.md", "w") as f:
            f.write(readme_content)

        # requirements.txt
        dependencies = blueprint.get("dependencies", [])
        if dependencies:
            with open(project_path / "requirements.txt", "w") as f:
                f.write("\n".join(dependencies))

        # main.py
        main_content = f"""#!/usr/bin/env python3
\"\"\"
{project_name} - Projet g√©n√©r√© automatiquement
\"\"\"

def main():
    \"\"\"Fonction principale\"\"\"
    print("Hello from {project_name}!")

if __name__ == "__main__":
    main()
"""

        with open(project_path / "main.py", "w") as f:
            f.write(main_content)

        return True

    except Exception as e:
        click.echo(f"‚ùå Erreur lors de la g√©n√©ration: {e}")
        return False


@click.group()
@click.option("--verbose", "-v", is_flag=True, help="Mode verbeux")
def cli(verbose):
    """Athalia-G√©n√©rateur de projets IA intelligent."""
    if verbose:
        logging.basicConfig(level=logging.INFO)
    else:
        logging.basicConfig(level=logging.WARNING)


@cli.command()
@click.argument("idea")
@click.option("--output", "-o", default="./generated_project", help="Dossier de sortie")
@click.option("--dry-run", is_flag=True, help="Mode simulation")
def generate(idea, output, dry_run):
    """G√©n√®re un projet complet √† partir dune id√©e."""
    try:
        click.echo(f"üöÄ G√©n√©ration du projet: {idea}")

        if dry_run:
            click.echo("üîç Mode simulation activ√©")

        # 1. G√©n√©rer le blueprint avec lIA robuste
        click.echo("ü§ñ G√©n√©ration du blueprint avec IA robuste...")
        ai = RobustAI()
        blueprint = ai.generate_blueprint(idea)

        if not blueprint:
            click.echo("‚ùå Impossible de g√©n√©rer le blueprint")
            return

        click.echo(f"‚úÖ Blueprint g√©n√©r√©: {blueprint.get('project_type', 'Projet')}")

        # 2. G√©n√©rer le projet complet

        # Cr√©er le dossier de sortie s'il n'existe pas
        os.makedirs(output, exist_ok=True)

        # Variable non utilis√©e supprim√©e
        result = generate_project(blueprint, output, dry_run=dry_run)

        if result:
            if not dry_run:
                click.echo(f"‚úÖ Projet g√©n√©r√© dans: {output}")
            else:
                click.echo("‚úÖ Simulation termin√©e")
        else:
            click.echo("‚ùå Erreur lors de la g√©n√©ration du projet")

    except Exception as e:
        click.echo(f"‚ùå Erreur: {e}")
        click.echo(f"üîç D√©tails: {traceback.format_exc()}")


@cli.command()
@click.argument("project_path")
def audit(project_path):
    """Audit intelligent dun projet existant."""
    try:
        click.echo(f"üîç Audit du projet: {project_path}")

        results = audit_project_intelligent(project_path)

        click.echo(f"üìä Score global: {results.get('global_score', 0)}/100")
        click.echo(f"üìÅ Fichiers analys√©s: {len(results.get('files', []))}")
        click.echo(f"‚ö†Ô∏è  Probl√®mes d√©tect√©s: {len(results.get('issues', []))}")
        click.echo(f"üí° Suggestions: {len(results.get('suggestions', []))}")

        # Sauvegarder le rapport
        report_path = Path(project_path) / "audit_report.yaml"
        with open(report_path, "w") as f:
            yaml.dump(results, f, default_flow_style=False)

        click.echo(f"üìÑ Rapport sauvegard√©: {report_path}")

    except Exception as e:
        click.echo(f"‚ùå Erreur: {e}")


@cli.command()
def ai_status():
    """Affiche le statut de lIA robuste."""
    try:
        ai = RobustAI()
        click.echo("ü§ñ Statut de lIA robuste")
        click.echo("=" * 40)

        # Mod√®les disponibles
        click.echo(f"üìã Mod√®les d√©tect√©s: {len(ai.available_models)}")
        for model in ai.available_models:
            status = "‚úÖ" if model != AIModel.MOCK else "üîÑ"
            click.echo(f"  {status} {model.value}")

        # Cha√Æne de fallback
        click.echo(f"\nüîÑ Cha√Æne de fallback ({len(ai.fallback_chain)} mod√®les):")
        for index, model in enumerate(ai.fallback_chain, 1):
            click.echo(f"  {index}. {model.value}")

        # Templates de prompts
        click.echo(f"\nüìù Templates de prompts: {len(ai.prompt_templates)}")
        for context in ai.prompt_templates.keys():
            click.echo(f"  ‚Ä¢ {context}")

        click.echo("\n‚ú® IA robuste pr√™te √† lemploi!")

    except ImportError:
        click.echo("‚ùå Module ai_robust non disponible")
    except Exception as e:
        click.echo(f"‚ùå Erreur: {e}")


@cli.command()
@click.argument("idea")
def test_ai(idea):
    """Teste lIA robuste avec une id√©e de projet."""
    try:
        ai = RobustAI()
        click.echo(f"üß™ Test IA robuste: {idea}")
        click.echo("=" * 50)

        # Test de g√©n√©ration de blueprint
        click.echo("üìã G√©n√©ration de blueprint...")
        blueprint = ai.generate_blueprint(idea)

        click.echo("‚úÖ Blueprint g√©n√©r√©:")
        click.echo(f"  ‚Ä¢ Nom: {blueprint.get('project_name', 'N/A')}")
        click.echo(f"  ‚Ä¢ Type: {blueprint.get('project_type', 'N/A')}")
        click.echo(f"  ‚Ä¢ Modules: {len(blueprint.get('modules', []))}")
        click.echo(f"  ‚Ä¢ D√©pendances: {len(blueprint.get('dependencies', []))}")

        # Test de revue de code
        click.echo("\nüîç Test de revue de code...")
        test_code = """
def hello_world():
    print("Hello World")
    return True
"""
        review = ai.review_code(
            code=test_code, filename="test.py", project_type="python", current_score=50
        )

        click.echo("‚úÖ Revue g√©n√©r√©e:")
        click.echo(f"  ‚Ä¢ Score: {review.get('score', 'N/A')}")
        click.echo(f"  ‚Ä¢ Probl√®mes: {len(review.get('issues', []))}")
        click.echo(f"  ‚Ä¢ Suggestions: {len(review.get('suggestions', []))}")

        # Test de documentation
        click.echo("\nüìö Test de g√©n√©ration de documentation...")
        doc = ai.generate_documentation(
            project_name="test", project_type="python", modules=["api", "web"]
        )

        click.echo(f"‚úÖ Documentation g√©n√©r√©e ({len(doc)} caract√®res)")

        click.echo("\nüéâ Tous les tests IA robuste r√©ussis!")

    except ImportError:
        click.echo("‚ùå Module ai_robust non disponible")
    except Exception as e:
        click.echo(f"‚ùå Erreur: {e}")


if __name__ == "__main__":
    cli()

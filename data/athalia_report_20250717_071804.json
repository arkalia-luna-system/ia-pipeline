{
  "project": ".",
  "timestamp": "2025-07-17T07:17:19.529384",
  "config": {
    "audit": true,
    "clean": false,
    "document": true,
    "test": true,
    "cicd": false,
    "dry_run": true,
    "auto_fix": false,
    "lang": "fr"
  },
  "steps": {
    "audit": {
      "success": true,
      "data": {
        "project_info": {
          "name": "",
          "type": "Python",
          "size": {
            "total_files": 8414,
            "total_lines": 23870,
            "code_files": 90
          },
          "languages": [
            "Python"
          ],
          "dependencies": {
            "python": [
              "pyyaml>=6.0",
              "requests>=2.28.0",
              "jinja2>=3.1.0",
              "click>=8.1.0",
              "rich>=13.0.0",
              "psutil>=5.9.0",
              "anthropic>=0.7.0",
              "openai>=1.0.0",
              "pytest>=7.0.0",
              "pytest-cov>=4.0.0",
              "pytest-mock>=3.10.0",
              "mkdocs>=1.4.0",
              "mkdocs-material>=9.0.0",
              "streamlit>=1.28.0",
              "plotly>=5.15.0",
              "matplotlib>=3.7.0",
              "python-dotenv>=1.0.0",
              "tqdm>=4.65.0",
              "colorama>=0.4.6",
              "black>=23.0.0",
              "flake8>=6.0.0",
              "mypy>=1.0.0"
            ]
          },
          "last_modified": "2025-07-17 07:17:23"
        },
        "code_quality": {
          "complexity": {
            "average": 16.31111111111111,
            "maximum": 122,
            "status": "⚠️ Élevée"
          },
          "style": {
            "issues": [
              "Indentation: athalia.py:2",
              "Indentation: athalia.py:3",
              "Indentation: athalia.py:4",
              "Indentation: athalia.py:5",
              "Indentation: athalia.py:13",
              "Indentation: athalia.py:15",
              "Indentation: athalia.py:17",
              "Indentation: athalia.py:28",
              "Indentation: athalia.py:48",
              "Indentation: athalia.py:56",
              "Indentation: athalia.py:226",
              "Indentation: setup.py:2",
              "Indentation: setup.py:3",
              "Indentation: setup.py:4",
              "Indentation: setup.py:22",
              "Indentation: setup.py:86",
              "Indentation: athalia_new.py:2",
              "Indentation: athalia_new.py:3",
              "Indentation: athalia_new.py:4",
              "Indentation: athalia_new.py:5",
              "Indentation: athalia_new.py:13",
              "Indentation: athalia_new.py:125",
              "Indentation: athalia_unified.py:2",
              "Indentation: athalia_unified.py:3",
              "Indentation: athalia_unified.py:4",
              "Indentation: athalia_unified.py:5",
              "Indentation: athalia_unified.py:14",
              "Indentation: athalia_unified.py:15",
              "Indentation: athalia_unified.py:23",
              "Indentation: athalia_unified.py:43",
              "Indentation: athalia_unified.py:294",
              "Indentation: test_unified.py:2",
              "Indentation: test_unified.py:3",
              "Indentation: test_unified.py:4",
              "Indentation: test_unified.py:5",
              "Ligne trop longue: test_unified.py:60",
              "Ligne trop longue: test_unified.py:64",
              "Ligne trop longue: test_unified.py:68",
              "Ligne trop longue: test_unified.py:72",
              "Indentation: test_unified.py:175",
              "Indentation: test_final.py:2",
              "Indentation: test_final.py:3",
              "Indentation: test_final.py:4",
              "Indentation: test_final.py:5",
              "Ligne trop longue: test_final.py:64",
              "Ligne trop longue: test_final.py:76",
              "Indentation: test_final.py:194",
              "Indentation: demo_athalia.py:2",
              "Indentation: demo_athalia.py:3",
              "Indentation: demo_athalia.py:4",
              "Indentation: demo_athalia.py:5",
              "Indentation: demo_athalia.py:13",
              "Indentation: demo_athalia.py:149",
              "Indentation: athalia_quick_start.py:2",
              "Indentation: athalia_quick_start.py:3",
              "Indentation: athalia_quick_start.py:4",
              "Indentation: athalia_quick_start.py:276",
              "Indentation: hello_plugin.py:1",
              "Indentation: hello_plugin.py:2",
              "Indentation: hello_plugin.py:3",
              "Indentation: export_docker_plugin.py:1",
              "Indentation: export_docker_plugin.py:2",
              "Indentation: export_docker_plugin.py:3",
              "Indentation: export_docker_plugin.py:43",
              "Indentation: export_docker_plugin.py:51",
              "Indentation: test_ath_context_prompt_semantic.py:6",
              "Indentation: test_ath_context_prompt_semantic.py:7",
              "Indentation: test_ath_context_prompt_semantic.py:8",
              "Indentation: test_ath_context_prompt_semantic.py:9",
              "Indentation: test_ath_context_prompt_semantic.py:10",
              "Indentation: test_ath_context_prompt_semantic.py:12",
              "Indentation: test_ath_context_prompt_semantic.py:13",
              "Indentation: test_ath_context_prompt_semantic.py:15",
              "Ligne trop longue: test_ath_context_prompt_semantic.py:18",
              "Indentation: test_ath_dev_boost.py:7",
              "Indentation: test_ath_dev_boost.py:8",
              "Indentation: test_ath_dev_boost.py:9",
              "Indentation: test_ath_dev_boost.py:10",
              "Indentation: test_ath_dev_boost.py:11",
              "Indentation: test_ath_dev_boost.py:13",
              "Indentation: test_ath_dev_boost.py:15",
              "Indentation: test_ath_dev_boost.py:21",
              "Indentation: test_ath_dev_boost.py:28",
              "Indentation: test_ath_dev_boost_menu.py:7",
              "Indentation: test_ath_dev_boost_menu.py:8",
              "Indentation: test_ath_dev_boost_menu.py:9",
              "Indentation: test_ath_dev_boost_menu.py:10",
              "Indentation: test_ath_dev_boost_menu.py:11",
              "Indentation: test_ath_dev_boost_menu.py:13",
              "Indentation: test_ath_dev_boost_menu.py:15",
              "Indentation: test_ath_dev_boost_menu.py:21",
              "Indentation: test_ath_dev_boost_menu.py:28",
              "Indentation: test_audit_intelligent.py:1",
              "Indentation: test_audit_intelligent.py:2",
              "Indentation: test_audit_intelligent.py:3",
              "Indentation: test_audit_intelligent.py:31",
              "Indentation: test_audit_intelligent.py:32",
              "Indentation: test_audit_intelligent.py:38",
              "Indentation: test_audit_intelligent.py:39",
              "Indentation: test_audit_intelligent.py:59",
              "Indentation: test_audit_intelligent.py:62",
              "Indentation: test_audit_intelligent.py:69",
              "Indentation: test_audit_intelligent.py:70",
              "Indentation: test_audit_intelligent.py:74",
              "Indentation: test_plugins.py:1",
              "Indentation: test_plugins.py:2",
              "Indentation: test_plugins.py:3",
              "Indentation: test_continue_models.py:6",
              "Indentation: test_continue_models.py:7",
              "Indentation: test_continue_models.py:8",
              "Indentation: test_continue_models.py:9",
              "Indentation: test_continue_models.py:21",
              "Indentation: test_analytics.py:1",
              "Indentation: test_analytics.py:2",
              "Indentation: test_analytics.py:3",
              "Indentation: test_analytics.py:14",
              "Indentation: test_ai_robust.py:1",
              "Indentation: test_ai_robust.py:2",
              "Indentation: test_ai_robust.py:3",
              "Indentation: test_ai_robust.py:72",
              "Indentation: test_plugins_validator.py:14",
              "Indentation: test_plugins_validator.py:31",
              "Indentation: test_ai_robust_integration.py:1",
              "Indentation: test_ai_robust_integration.py:2",
              "Indentation: test_ai_robust_integration.py:3",
              "Indentation: test_ai_robust_integration.py:34",
              "Indentation: test_athalia_orchestrator.py:2",
              "Indentation: test_athalia_orchestrator.py:3",
              "Indentation: test_athalia_orchestrator.py:4",
              "Indentation: test_athalia_orchestrator.py:14",
              "Indentation: test_athalia_orchestrator.py:35",
              "Indentation: test_athalia_orchestrator.py:37",
              "Indentation: test_athalia_orchestrator.py:174",
              "Indentation: test_auto_correction_avancee.py:2",
              "Indentation: test_auto_correction_avancee.py:11",
              "Indentation: test_auto_correction_avancee.py:46",
              "Indentation: test_auto_correction_avancee.py:65",
              "Indentation: test_profils_utilisateur_avances.py:2",
              "Indentation: test_profils_utilisateur_avances.py:11",
              "Indentation: test_profils_utilisateur_avances.py:73",
              "Indentation: test_dashboard_unifie.py:2",
              "Indentation: test_dashboard_unifie.py:11",
              "Indentation: test_dashboard_unifie.py:74",
              "Indentation: test_dashboard_unifie_simple.py:2",
              "Indentation: test_dashboard_unifie_simple.py:11",
              "Indentation: test_dashboard_unifie_simple.py:74",
              "Indentation: auto_correction_avancee.py:2",
              "Indentation: auto_correction_avancee.py:3",
              "Indentation: auto_correction_avancee.py:4",
              "Indentation: auto_correction_avancee.py:5",
              "Indentation: auto_correction_avancee.py:16",
              "Ligne trop longue: auto_correction_avancee.py:258",
              "Ligne trop longue: auto_correction_avancee.py:513",
              "Indentation: auto_correction_avancee.py:582",
              "Indentation: profils_utilisateur_avances.py:2",
              "Indentation: profils_utilisateur_avances.py:3",
              "Indentation: profils_utilisateur_avances.py:4",
              "Indentation: profils_utilisateur_avances.py:5",
              "Indentation: profils_utilisateur_avances.py:16",
              "Indentation: profils_utilisateur_avances.py:410",
              "Indentation: dashboard_unifie.py:2",
              "Indentation: dashboard_unifie.py:3",
              "Indentation: dashboard_unifie.py:4",
              "Indentation: dashboard_unifie.py:5",
              "Indentation: dashboard_unifie.py:20",
              "Ligne trop longue: dashboard_unifie.py:327",
              "Ligne trop longue: dashboard_unifie.py:338",
              "Indentation: dashboard_unifie.py:351",
              "Indentation: dashboard_unifie.py:352",
              "Indentation: dashboard_unifie.py:353",
              "Indentation: dashboard_unifie.py:437",
              "Indentation: dashboard_unifie.py:438",
              "Indentation: dashboard_unifie.py:489",
              "Indentation: dashboard_unifie.py:490",
              "Indentation: dashboard_unifie.py:491",
              "Indentation: dashboard_unifie.py:543",
              "Indentation: dashboard_unifie_simple.py:2",
              "Indentation: dashboard_unifie_simple.py:3",
              "Indentation: dashboard_unifie_simple.py:4",
              "Indentation: dashboard_unifie_simple.py:5",
              "Indentation: dashboard_unifie_simple.py:16",
              "Ligne trop longue: dashboard_unifie_simple.py:238",
              "Ligne trop longue: dashboard_unifie_simple.py:249",
              "Indentation: dashboard_unifie_simple.py:259",
              "Indentation: dashboard_unifie_simple.py:260",
              "Indentation: dashboard_unifie_simple.py:261",
              "Indentation: dashboard_unifie_simple.py:353",
              "Indentation: dashboard_unifie_simple.py:354",
              "Indentation: dashboard_unifie_simple.py:391",
              "Indentation: dashboard_unifie_simple.py:392",
              "Indentation: dashboard_unifie_simple.py:393",
              "Indentation: dashboard_unifie_simple.py:445",
              "Indentation: orchestrateur_principal.py:2",
              "Indentation: orchestrateur_principal.py:3",
              "Indentation: orchestrateur_principal.py:4",
              "Indentation: orchestrateur_principal.py:5",
              "Indentation: orchestrateur_principal.py:28",
              "Indentation: orchestrateur_principal.py:379",
              "Indentation: main.py:1",
              "Indentation: main.py:2",
              "Ligne trop longue: test_booster_ia_VioletTwistAI.py:6",
              "Indentation: main.py:1",
              "Indentation: main.py:2",
              "Indentation: main.py:3",
              "Indentation: main.py:7",
              "Indentation: main.py:22",
              "Indentation: main.py:29",
              "Indentation: main.py:1",
              "Indentation: main.py:2",
              "Indentation: main.py:3",
              "Indentation: main.py:7",
              "Indentation: main.py:22",
              "Indentation: main.py:29",
              "Indentation: ath_context_prompt.py:10",
              "Ligne trop longue: ath_context_prompt.py:32",
              "Indentation: ath_context_prompt.py:41",
              "Indentation: ath_context_prompt.py:43",
              "Indentation: ath_context_prompt.py:44",
              "Indentation: ath_context_prompt.py:53",
              "Indentation: ath_context_prompt.py:54",
              "Indentation: ath_context_prompt.py:55",
              "Indentation: ath_context_prompt.py:56",
              "Indentation: ath_context_prompt.py:182",
              "Indentation: ath_context_prompt.py:10",
              "Ligne trop longue: ath_context_prompt.py:32",
              "Indentation: ath_context_prompt.py:41",
              "Indentation: ath_context_prompt.py:43",
              "Indentation: ath_context_prompt.py:44",
              "Indentation: ath_context_prompt.py:53",
              "Indentation: ath_context_prompt.py:54",
              "Indentation: ath_context_prompt.py:55",
              "Indentation: ath_context_prompt.py:56",
              "Indentation: ath_context_prompt.py:182",
              "Indentation: __init__.py:1",
              "Indentation: __init__.py:2",
              "Indentation: __init__.py:3",
              "Indentation: __init__.py:4",
              "Indentation: __init__.py:6",
              "Indentation: __init__.py:7",
              "Indentation: __init__.py:8",
              "Indentation: __init__.py:9",
              "Indentation: __init__.py:10",
              "Indentation: __init__.py:16",
              "Indentation: __init__.py:18",
              "Indentation: ci.py:1",
              "Indentation: ci.py:2",
              "Indentation: ci.py:3",
              "Ligne trop longue: ci.py:13",
              "Ligne trop longue: cleanup.py:15",
              "Indentation: dashboard.py:1",
              "Indentation: dashboard.py:2",
              "Indentation: dashboard.py:3",
              "Indentation: dashboard.py:31",
              "Indentation: dashboard.py:32",
              "Indentation: dashboard.py:48",
              "Indentation: dashboard.py:49",
              "Ligne trop longue: dashboard.py:60",
              "Ligne trop longue: dashboard.py:71",
              "Ligne trop longue: dashboard.py:72",
              "Ligne trop longue: dashboard.py:125",
              "Indentation: dashboard.py:142",
              "Indentation: dashboard.py:143",
              "Indentation: generation.py:1",
              "Indentation: generation.py:2",
              "Indentation: generation.py:3",
              "Ligne trop longue: generation.py:51",
              "Ligne trop longue: generation.py:162",
              "Ligne trop longue: generation.py:205",
              "Ligne trop longue: generation.py:251",
              "Ligne trop longue: generation.py:270",
              "Ligne trop longue: generation.py:292",
              "Ligne trop longue: generation.py:566",
              "Indentation: generation.py:636",
              "Indentation: generation.py:637",
              "Indentation: generation.py:642",
              "Indentation: generation.py:658",
              "Indentation: generation.py:665",
              "Indentation: generation.py:667",
              "Indentation: generation.py:670",
              "Indentation: generation.py:671",
              "Indentation: generation.py:675",
              "Indentation: generation.py:690",
              "Indentation: generation.py:697",
              "Indentation: generation.py:699",
              "Indentation: generation.py:703",
              "Indentation: generation.py:704",
              "Indentation: generation.py:709",
              "Indentation: generation.py:711",
              "Ligne trop longue: generation.py:748",
              "Ligne trop longue: generation.py:787",
              "Ligne trop longue: generation.py:788",
              "Ligne trop longue: generation.py:839",
              "Ligne trop longue: generation.py:861",
              "Ligne trop longue: generation.py:862",
              "Ligne trop longue: generation.py:920",
              "Ligne trop longue: generation.py:925",
              "Indentation: main.py:1",
              "Indentation: main.py:2",
              "Indentation: main.py:3",
              "Ligne trop longue: main.py:10",
              "Ligne trop longue: main.py:80",
              "Ligne trop longue: main.py:81",
              "Indentation: main.py:198",
              "Indentation: analytics.py:1",
              "Indentation: analytics.py:2",
              "Indentation: analytics.py:3",
              "Indentation: analytics.py:123",
              "Indentation: analytics.py:124",
              "Indentation: analytics.py:125",
              "Indentation: analytics.py:138",
              "Indentation: analytics.py:139",
              "Ligne trop longue: analytics.py:145",
              "Indentation: analytics.py:171",
              "Indentation: analytics.py:239",
              "Indentation: analytics.py:240",
              "Indentation: onboarding.py:1",
              "Indentation: onboarding.py:2",
              "Indentation: onboarding.py:3",
              "Ligne trop longue: onboarding.py:24",
              "Indentation: onboarding.py:31",
              "Indentation: onboarding.py:32",
              "Indentation: onboarding.py:33",
              "Indentation: onboarding.py:34",
              "Indentation: onboarding.py:35",
              "Indentation: onboarding.py:36",
              "Indentation: onboarding.py:37",
              "Indentation: onboarding.py:38",
              "Indentation: onboarding.py:39",
              "Indentation: onboarding.py:40",
              "Indentation: onboarding.py:41",
              "Indentation: onboarding.py:42",
              "Ligne trop longue: onboarding.py:43",
              "Indentation: onboarding.py:43",
              "Indentation: onboarding.py:44",
              "Indentation: onboarding.py:45",
              "Indentation: audit.py:1",
              "Indentation: audit.py:2",
              "Indentation: audit.py:3",
              "Indentation: audit.py:4",
              "Indentation: audit.py:351",
              "Indentation: audit.py:352",
              "Indentation: audit.py:354",
              "Indentation: audit.py:355",
              "Indentation: audit.py:356",
              "Indentation: audit.py:357",
              "Indentation: audit.py:358",
              "Indentation: audit.py:359",
              "Indentation: audit.py:360",
              "Indentation: audit.py:362",
              "Indentation: audit.py:363",
              "Indentation: audit.py:364",
              "Indentation: audit.py:365",
              "Indentation: audit.py:367",
              "Indentation: audit.py:368",
              "Indentation: audit.py:369",
              "Indentation: security.py:1",
              "Indentation: security.py:2",
              "Indentation: security.py:3",
              "Indentation: plugins_manager.py:1",
              "Indentation: plugins_manager.py:2",
              "Indentation: plugins_manager.py:3",
              "Indentation: plugins_manager.py:7",
              "Indentation: ai_robust.py:1",
              "Indentation: ai_robust.py:2",
              "Indentation: ai_robust.py:3",
              "Indentation: ai_robust.py:82",
              "Indentation: ai_robust.py:84",
              "Indentation: ai_robust.py:85",
              "Indentation: ai_robust.py:86",
              "Indentation: ai_robust.py:87",
              "Indentation: ai_robust.py:89",
              "Indentation: ai_robust.py:90",
              "Indentation: ai_robust.py:92",
              "Indentation: ai_robust.py:93",
              "Indentation: ai_robust.py:94",
              "Indentation: ai_robust.py:95",
              "Indentation: ai_robust.py:96",
              "Indentation: ai_robust.py:97",
              "Indentation: ai_robust.py:98",
              "Indentation: ai_robust.py:99",
              "Indentation: ai_robust.py:100",
              "Indentation: ai_robust.py:102",
              "Indentation: ai_robust.py:103",
              "Indentation: ai_robust.py:104",
              "Indentation: ai_robust.py:105",
              "Indentation: ai_robust.py:106",
              "Indentation: ai_robust.py:107",
              "Indentation: ai_robust.py:108",
              "Indentation: ai_robust.py:109",
              "Indentation: ai_robust.py:110",
              "Indentation: ai_robust.py:111",
              "Indentation: ai_robust.py:112",
              "Indentation: ai_robust.py:113",
              "Indentation: ai_robust.py:118",
              "Indentation: ai_robust.py:119",
              "Indentation: ai_robust.py:122",
              "Indentation: ai_robust.py:124",
              "Indentation: ai_robust.py:125",
              "Indentation: ai_robust.py:127",
              "Indentation: ai_robust.py:128",
              "Indentation: ai_robust.py:129",
              "Indentation: ai_robust.py:130",
              "Indentation: ai_robust.py:132",
              "Indentation: ai_robust.py:133",
              "Indentation: ai_robust.py:135",
              "Indentation: ai_robust.py:136",
              "Indentation: ai_robust.py:137",
              "Indentation: ai_robust.py:138",
              "Indentation: ai_robust.py:139",
              "Indentation: ai_robust.py:140",
              "Indentation: ai_robust.py:141",
              "Indentation: ai_robust.py:143",
              "Indentation: ai_robust.py:144",
              "Indentation: ai_robust.py:145",
              "Indentation: ai_robust.py:146",
              "Indentation: ai_robust.py:149",
              "Indentation: ai_robust.py:152",
              "Indentation: ai_robust.py:155",
              "Indentation: ai_robust.py:156",
              "Indentation: ai_robust.py:159",
              "Indentation: ai_robust.py:161",
              "Indentation: ai_robust.py:162",
              "Indentation: ai_robust.py:163",
              "Indentation: ai_robust.py:164",
              "Indentation: ai_robust.py:166",
              "Indentation: ai_robust.py:167",
              "Indentation: ai_robust.py:169",
              "Indentation: ai_robust.py:170",
              "Indentation: ai_robust.py:171",
              "Indentation: ai_robust.py:172",
              "Indentation: ai_robust.py:173",
              "Indentation: ai_robust.py:174",
              "Indentation: ai_robust.py:175",
              "Indentation: ai_robust.py:176",
              "Indentation: ai_robust.py:178",
              "Indentation: ai_robust.py:179",
              "Indentation: ai_robust.py:180",
              "Indentation: ai_robust.py:181",
              "Indentation: ai_robust.py:182",
              "Indentation: ai_robust.py:183",
              "Indentation: ai_robust.py:186",
              "Indentation: ai_robust.py:188",
              "Indentation: ai_robust.py:189",
              "Indentation: ai_robust.py:190",
              "Indentation: ai_robust.py:191",
              "Indentation: ai_robust.py:193",
              "Indentation: ai_robust.py:194",
              "Indentation: ai_robust.py:196",
              "Indentation: ai_robust.py:197",
              "Indentation: ai_robust.py:198",
              "Indentation: ai_robust.py:199",
              "Indentation: ai_robust.py:200",
              "Indentation: ai_robust.py:201",
              "Indentation: ai_robust.py:203",
              "Indentation: ai_robust.py:204",
              "Indentation: ai_robust.py:213",
              "Indentation: ai_robust.py:214",
              "Indentation: ai_robust.py:217",
              "Indentation: ai_robust.py:219",
              "Indentation: ai_robust.py:220",
              "Indentation: ai_robust.py:221",
              "Indentation: ai_robust.py:222",
              "Indentation: ai_robust.py:224",
              "Indentation: ai_robust.py:225",
              "Indentation: ai_robust.py:227",
              "Indentation: ai_robust.py:228",
              "Indentation: ai_robust.py:229",
              "Indentation: ai_robust.py:230",
              "Indentation: ai_robust.py:231",
              "Indentation: ai_robust.py:232",
              "Indentation: ai_robust.py:233",
              "Indentation: ai_robust.py:235",
              "Indentation: ai_robust.py:236",
              "Indentation: ai_robust.py:237",
              "Indentation: ai_robust.py:243",
              "Indentation: ai_robust.py:246",
              "Indentation: ai_robust.py:247",
              "Indentation: ai_robust.py:392",
              "Indentation: ai_robust.py:395",
              "Indentation: ai_robust.py:396",
              "Indentation: ai_robust.py:397",
              "Indentation: ai_robust.py:400",
              "Indentation: ai_robust.py:403",
              "Indentation: ai_robust.py:406",
              "Indentation: ai_robust.py:407",
              "Indentation: ai_robust.py:416",
              "Indentation: cli.py:1",
              "Indentation: cli.py:2",
              "Indentation: cli.py:3",
              "Indentation: cli.py:13",
              "Indentation: cli.py:14",
              "Indentation: cli.py:22",
              "Indentation: cli.py:23",
              "Indentation: cli.py:24",
              "Indentation: cli.py:25",
              "Indentation: cli.py:64",
              "Indentation: cli.py:65",
              "Indentation: cli.py:89",
              "Indentation: cli.py:121",
              "Indentation: cli.py:122",
              "Indentation: cli.py:147",
              "Indentation: cli.py:177",
              "Indentation: project_importer.py:1",
              "Indentation: project_importer.py:3",
              "Indentation: project_importer.py:4",
              "Indentation: project_importer.py:12",
              "Indentation: project_importer.py:259",
              "Indentation: project_importer.py:261",
              "Indentation: intelligent_auditor.py:2",
              "Indentation: intelligent_auditor.py:3",
              "Indentation: intelligent_auditor.py:4",
              "Indentation: intelligent_auditor.py:5",
              "Indentation: intelligent_auditor.py:701",
              "Indentation: intelligent_auditor.py:702",
              "Indentation: intelligent_auditor.py:703",
              "Indentation: intelligent_auditor.py:705",
              "Indentation: intelligent_auditor.py:707",
              "Indentation: intelligent_auditor.py:713",
              "Indentation: intelligent_auditor.py:714",
              "Indentation: intelligent_auditor.py:715",
              "Indentation: intelligent_auditor.py:716",
              "Indentation: intelligent_auditor.py:717",
              "Indentation: intelligent_auditor.py:719",
              "Indentation: intelligent_auditor.py:720",
              "Indentation: intelligent_auditor.py:754",
              "Indentation: auto_cleaner.py:2",
              "Indentation: auto_cleaner.py:3",
              "Indentation: auto_cleaner.py:4",
              "Indentation: auto_cleaner.py:5",
              "Indentation: auto_cleaner.py:295",
              "Indentation: auto_cleaner.py:296",
              "Indentation: auto_cleaner.py:297",
              "Indentation: auto_cleaner.py:299",
              "Indentation: auto_cleaner.py:305",
              "Indentation: auto_cleaner.py:306",
              "Indentation: auto_cleaner.py:422",
              "Indentation: auto_documenter.py:2",
              "Indentation: auto_documenter.py:3",
              "Indentation: auto_documenter.py:4",
              "Indentation: auto_documenter.py:5",
              "Ligne trop longue: auto_documenter.py:39",
              "Indentation: auto_documenter.py:291",
              "Indentation: auto_documenter.py:295",
              "Indentation: auto_documenter.py:296",
              "Indentation: auto_documenter.py:297",
              "Indentation: auto_documenter.py:298",
              "Indentation: auto_documenter.py:299",
              "Indentation: auto_documenter.py:300",
              "Indentation: auto_documenter.py:306",
              "Indentation: auto_documenter.py:323",
              "Indentation: auto_documenter.py:325",
              "Indentation: auto_documenter.py:326",
              "Indentation: auto_documenter.py:329",
              "Indentation: auto_documenter.py:330",
              "Indentation: auto_documenter.py:334",
              "Indentation: auto_documenter.py:344",
              "Indentation: auto_documenter.py:348",
              "Indentation: auto_documenter.py:349",
              "Indentation: auto_documenter.py:353",
              "Indentation: auto_documenter.py:376",
              "Indentation: auto_documenter.py:378",
              "Indentation: auto_documenter.py:381",
              "Indentation: auto_documenter.py:382",
              "Indentation: auto_documenter.py:386",
              "Indentation: auto_documenter.py:387",
              "Indentation: auto_documenter.py:388",
              "Indentation: auto_documenter.py:389",
              "Indentation: auto_documenter.py:390",
              "Indentation: auto_documenter.py:394",
              "Indentation: auto_documenter.py:396",
              "Indentation: auto_documenter.py:397",
              "Indentation: auto_documenter.py:398",
              "Indentation: auto_documenter.py:409",
              "Indentation: auto_documenter.py:413",
              "Indentation: auto_documenter.py:461",
              "Indentation: auto_documenter.py:465",
              "Indentation: auto_documenter.py:466",
              "Indentation: auto_documenter.py:470",
              "Indentation: auto_documenter.py:471",
              "Indentation: auto_documenter.py:472",
              "Indentation: auto_documenter.py:476",
              "Indentation: auto_documenter.py:478",
              "Indentation: auto_documenter.py:480",
              "Indentation: auto_documenter.py:485",
              "Indentation: auto_documenter.py:488",
              "Indentation: auto_documenter.py:492",
              "Indentation: auto_documenter.py:493",
              "Indentation: auto_documenter.py:494",
              "Indentation: auto_documenter.py:496",
              "Indentation: auto_documenter.py:497",
              "Indentation: auto_documenter.py:498",
              "Indentation: auto_documenter.py:511",
              "Indentation: auto_documenter.py:515",
              "Indentation: auto_documenter.py:516",
              "Indentation: auto_documenter.py:517",
              "Indentation: auto_documenter.py:518",
              "Indentation: auto_documenter.py:519",
              "Indentation: auto_documenter.py:523",
              "Indentation: auto_documenter.py:525",
              "Indentation: auto_documenter.py:528",
              "Indentation: auto_documenter.py:529",
              "Indentation: auto_documenter.py:533",
              "Indentation: auto_documenter.py:535",
              "Indentation: auto_documenter.py:537",
              "Indentation: auto_documenter.py:542",
              "Indentation: auto_documenter.py:545",
              "Indentation: auto_documenter.py:549",
              "Indentation: auto_documenter.py:591",
              "Indentation: auto_documenter.py:596",
              "Indentation: auto_documenter.py:599",
              "Indentation: auto_documenter.py:602",
              "Indentation: auto_documenter.py:603",
              "Indentation: auto_documenter.py:604",
              "Indentation: auto_documenter.py:608",
              "Indentation: auto_documenter.py:609",
              "Indentation: auto_documenter.py:611",
              "Indentation: auto_documenter.py:614",
              "Indentation: auto_documenter.py:618",
              "Indentation: auto_documenter.py:619",
              "Indentation: auto_documenter.py:620",
              "Indentation: auto_documenter.py:621",
              "Indentation: auto_documenter.py:625",
              "Indentation: auto_documenter.py:626",
              "Indentation: auto_documenter.py:627",
              "Indentation: auto_documenter.py:628",
              "Indentation: auto_documenter.py:630",
              "Indentation: auto_documenter.py:631",
              "Indentation: auto_documenter.py:632",
              "Indentation: auto_documenter.py:677",
              "Indentation: auto_documenter.py:678",
              "Indentation: auto_documenter.py:679",
              "Indentation: auto_documenter.py:683",
              "Indentation: auto_documenter.py:684",
              "Indentation: auto_documenter.py:685",
              "Indentation: auto_documenter.py:687",
              "Indentation: auto_documenter.py:688",
              "Indentation: auto_documenter.py:689",
              "Indentation: auto_documenter.py:728",
              "Indentation: auto_tester.py:2",
              "Indentation: auto_tester.py:3",
              "Indentation: auto_tester.py:4",
              "Indentation: auto_tester.py:5",
              "Indentation: auto_tester.py:133",
              "Indentation: auto_tester.py:134",
              "Indentation: auto_tester.py:135",
              "Indentation: auto_tester.py:136",
              "Indentation: auto_tester.py:144",
              "Indentation: auto_tester.py:146",
              "Indentation: auto_tester.py:148",
              "Indentation: auto_tester.py:163",
              "Indentation: auto_tester.py:176",
              "Indentation: auto_tester.py:192",
              "Indentation: auto_tester.py:206",
              "Indentation: auto_tester.py:209",
              "Indentation: auto_tester.py:211",
              "Indentation: auto_tester.py:221",
              "Indentation: auto_tester.py:222",
              "Indentation: auto_tester.py:223",
              "Indentation: auto_tester.py:224",
              "Indentation: auto_tester.py:234",
              "Indentation: auto_tester.py:276",
              "Indentation: auto_tester.py:278",
              "Indentation: auto_tester.py:290",
              "Indentation: auto_tester.py:291",
              "Indentation: auto_tester.py:292",
              "Indentation: auto_tester.py:293",
              "Indentation: auto_tester.py:304",
              "Indentation: auto_tester.py:360",
              "Indentation: auto_tester.py:362",
              "Indentation: auto_tester.py:396",
              "Indentation: auto_tester.py:397",
              "Indentation: auto_tester.py:398",
              "Indentation: auto_tester.py:399",
              "Indentation: auto_tester.py:400",
              "Indentation: auto_tester.py:405",
              "Indentation: auto_tester.py:406",
              "Indentation: auto_tester.py:410",
              "Indentation: auto_tester.py:411",
              "Indentation: auto_tester.py:422",
              "Indentation: auto_tester.py:425",
              "Indentation: auto_tester.py:426",
              "Indentation: auto_tester.py:429",
              "Indentation: auto_tester.py:430",
              "Indentation: auto_tester.py:433",
              "Indentation: auto_tester.py:434",
              "Indentation: auto_tester.py:437",
              "Indentation: auto_tester.py:438",
              "Indentation: auto_tester.py:440",
              "Indentation: auto_tester.py:441",
              "Indentation: auto_tester.py:520",
              "Indentation: auto_tester.py:521",
              "Indentation: auto_tester.py:522",
              "Indentation: auto_tester.py:524",
              "Indentation: auto_tester.py:526",
              "Indentation: auto_tester.py:531",
              "Indentation: auto_tester.py:536",
              "Indentation: auto_tester.py:541",
              "Indentation: auto_tester.py:542",
              "Indentation: auto_tester.py:548",
              "Indentation: auto_tester.py:550",
              "Indentation: auto_tester.py:551",
              "Indentation: auto_tester.py:552",
              "Indentation: auto_tester.py:553",
              "Indentation: auto_tester.py:555",
              "Indentation: auto_tester.py:556",
              "Indentation: auto_tester.py:557",
              "Indentation: auto_tester.py:558",
              "Indentation: auto_tester.py:560",
              "Indentation: auto_tester.py:561",
              "Indentation: auto_tester.py:592",
              "Indentation: auto_cicd.py:2",
              "Indentation: auto_cicd.py:3",
              "Indentation: auto_cicd.py:4",
              "Indentation: auto_cicd.py:5",
              "Ligne trop longue: auto_cicd.py:241",
              "Indentation: auto_cicd.py:274",
              "Indentation: auto_cicd.py:276",
              "Indentation: auto_cicd.py:279",
              "Indentation: auto_cicd.py:282",
              "Indentation: auto_cicd.py:285",
              "Indentation: auto_cicd.py:288",
              "Indentation: auto_cicd.py:291",
              "Indentation: auto_cicd.py:292",
              "Indentation: auto_cicd.py:295",
              "Indentation: auto_cicd.py:297",
              "Indentation: auto_cicd.py:300",
              "Indentation: auto_cicd.py:303",
              "Indentation: auto_cicd.py:306",
              "Indentation: auto_cicd.py:309",
              "Indentation: auto_cicd.py:312",
              "Indentation: auto_cicd.py:313",
              "Indentation: auto_cicd.py:337",
              "Indentation: auto_cicd.py:338",
              "Indentation: auto_cicd.py:339",
              "Indentation: auto_cicd.py:340",
              "Indentation: auto_cicd.py:341",
              "Indentation: auto_cicd.py:342",
              "Indentation: auto_cicd.py:343",
              "Indentation: auto_cicd.py:344",
              "Indentation: auto_cicd.py:345",
              "Indentation: auto_cicd.py:346",
              "Indentation: auto_cicd.py:347",
              "Indentation: auto_cicd.py:348",
              "Indentation: auto_cicd.py:349",
              "Indentation: auto_cicd.py:350",
              "Indentation: auto_cicd.py:351",
              "Indentation: auto_cicd.py:352",
              "Indentation: auto_cicd.py:353",
              "Indentation: auto_cicd.py:354",
              "Indentation: auto_cicd.py:355",
              "Indentation: auto_cicd.py:356",
              "Indentation: auto_cicd.py:357",
              "Indentation: auto_cicd.py:358",
              "Indentation: auto_cicd.py:359",
              "Indentation: auto_cicd.py:360",
              "Indentation: auto_cicd.py:361",
              "Indentation: auto_cicd.py:362",
              "Indentation: auto_cicd.py:363",
              "Indentation: auto_cicd.py:364",
              "Indentation: auto_cicd.py:365",
              "Indentation: auto_cicd.py:366",
              "Indentation: auto_cicd.py:367",
              "Indentation: auto_cicd.py:368",
              "Indentation: auto_cicd.py:445",
              "Indentation: auto_cicd.py:447",
              "Indentation: auto_cicd.py:450",
              "Indentation: auto_cicd.py:451",
              "Indentation: auto_cicd.py:452",
              "Indentation: auto_cicd.py:455",
              "Indentation: auto_cicd.py:456",
              "Indentation: auto_cicd.py:462",
              "Indentation: auto_cicd.py:463",
              "Indentation: auto_cicd.py:464",
              "Indentation: auto_cicd.py:467",
              "Indentation: auto_cicd.py:468",
              "Indentation: auto_cicd.py:470",
              "Indentation: auto_cicd.py:471",
              "Indentation: auto_cicd.py:472",
              "Ligne trop longue: auto_cicd.py:476",
              "Indentation: auto_cicd.py:534",
              "Indentation: auto_cicd.py:535",
              "Indentation: auto_cicd.py:536",
              "Indentation: auto_cicd.py:538",
              "Indentation: auto_cicd.py:540",
              "Indentation: auto_cicd.py:541",
              "Indentation: auto_cicd.py:542",
              "Indentation: auto_cicd.py:543",
              "Indentation: auto_cicd.py:545",
              "Indentation: auto_cicd.py:547",
              "Indentation: auto_cicd.py:550",
              "Indentation: auto_cicd.py:556",
              "Indentation: auto_cicd.py:561",
              "Indentation: auto_cicd.py:565",
              "Indentation: auto_cicd.py:568",
              "Indentation: auto_cicd.py:570",
              "Indentation: auto_cicd.py:577",
              "Indentation: auto_cicd.py:582",
              "Indentation: auto_cicd.py:587",
              "Indentation: auto_cicd.py:588",
              "Indentation: auto_cicd.py:615",
              "Indentation: athalia_orchestrator.py:2",
              "Indentation: athalia_orchestrator.py:3",
              "Indentation: athalia_orchestrator.py:4",
              "Indentation: athalia_orchestrator.py:5",
              "Indentation: athalia_orchestrator.py:16",
              "Indentation: athalia_orchestrator.py:26",
              "Indentation: athalia_orchestrator.py:264",
              "Indentation: athalia_orchestrator.py:265",
              "Indentation: athalia_orchestrator.py:266",
              "Indentation: athalia_orchestrator.py:268",
              "Indentation: athalia_orchestrator.py:269",
              "Indentation: athalia_orchestrator.py:270",
              "Indentation: athalia_orchestrator.py:272",
              "Indentation: athalia_orchestrator.py:274",
              "Ligne trop longue: athalia_orchestrator.py:312",
              "Indentation: athalia_orchestrator.py:354",
              "Indentation: athalia_orchestrator.py:356",
              "Indentation: athalia_orchestrator.py:371",
              "Indentation: athalia_orchestrator.py:377",
              "Indentation: athalia_orchestrator.py:379",
              "Indentation: athalia_orchestrator.py:380",
              "Indentation: athalia_orchestrator.py:381",
              "Indentation: athalia_orchestrator.py:382",
              "Indentation: athalia_orchestrator.py:383",
              "Indentation: athalia_orchestrator.py:385",
              "Indentation: athalia_orchestrator.py:387",
              "Indentation: athalia_orchestrator.py:388",
              "Indentation: athalia_orchestrator.py:389",
              "Indentation: athalia_orchestrator.py:390",
              "Indentation: athalia_orchestrator.py:392",
              "Indentation: athalia_orchestrator.py:393",
              "Indentation: athalia_orchestrator.py:394",
              "Indentation: athalia_orchestrator.py:395",
              "Indentation: athalia_orchestrator.py:535",
              "Indentation: code_linter.py:2",
              "Indentation: code_linter.py:3",
              "Indentation: code_linter.py:4",
              "Indentation: code_linter.py:5",
              "Indentation: code_linter.py:6",
              "Indentation: code_linter.py:134",
              "Indentation: security_auditor.py:2",
              "Indentation: security_auditor.py:3",
              "Indentation: security_auditor.py:4",
              "Indentation: security_auditor.py:5",
              "Indentation: security_auditor.py:6",
              "Ligne trop longue: security_auditor.py:93",
              "Ligne trop longue: security_auditor.py:95",
              "Indentation: security_auditor.py:115",
              "Indentation: advanced_analytics.py:2",
              "Indentation: advanced_analytics.py:3",
              "Indentation: advanced_analytics.py:4",
              "Indentation: advanced_analytics.py:5",
              "Indentation: advanced_analytics.py:198",
              "Indentation: advanced_analytics.py:199",
              "Indentation: advanced_analytics.py:200",
              "Indentation: advanced_analytics.py:208",
              "Indentation: advanced_analytics.py:209",
              "Ligne trop longue: advanced_analytics.py:227",
              "Indentation: advanced_analytics.py:240",
              "Indentation: advanced_analytics.py:241",
              "Indentation: advanced_analytics.py:242",
              "Indentation: advanced_analytics.py:253",
              "Indentation: advanced_analytics.py:255",
              "Indentation: advanced_analytics.py:256",
              "Indentation: advanced_analytics.py:257",
              "Indentation: advanced_analytics.py:258",
              "Indentation: advanced_analytics.py:259",
              "Indentation: advanced_analytics.py:260",
              "Indentation: advanced_analytics.py:261",
              "Indentation: advanced_analytics.py:263",
              "Indentation: advanced_analytics.py:264",
              "Indentation: advanced_analytics.py:265",
              "Indentation: advanced_analytics.py:266",
              "Indentation: advanced_analytics.py:268",
              "Indentation: advanced_analytics.py:269",
              "Indentation: advanced_analytics.py:270",
              "Indentation: advanced_analytics.py:272",
              "Indentation: advanced_analytics.py:273",
              "Indentation: advanced_analytics.py:274",
              "Indentation: advanced_analytics.py:281",
              "Indentation: auto_documenter_fixed.py:2",
              "Indentation: auto_documenter_fixed.py:3",
              "Indentation: auto_documenter_fixed.py:4",
              "Indentation: auto_documenter_fixed.py:5",
              "Indentation: auto_documenter_fixed.py:157",
              "Indentation: auto_documenter_fixed.py:161",
              "Indentation: auto_documenter_fixed.py:163",
              "Indentation: auto_documenter_fixed.py:164",
              "Indentation: auto_documenter_fixed.py:167",
              "Indentation: auto_documenter_fixed.py:168",
              "Indentation: auto_documenter_fixed.py:172",
              "Indentation: auto_documenter_fixed.py:174",
              "Indentation: auto_documenter_fixed.py:175",
              "Indentation: auto_documenter_fixed.py:179",
              "Indentation: auto_documenter_fixed.py:180",
              "Indentation: auto_documenter_fixed.py:181",
              "Indentation: auto_documenter_fixed.py:185",
              "Indentation: auto_documenter_fixed.py:186",
              "Indentation: auto_documenter_fixed.py:187",
              "Indentation: auto_documenter_fixed.py:191",
              "Indentation: auto_documenter_fixed.py:193",
              "Indentation: auto_documenter_fixed.py:194",
              "Indentation: auto_documenter_fixed.py:195",
              "Indentation: auto_documenter_fixed.py:207",
              "Indentation: auto_documenter_fixed.py:212",
              "Indentation: auto_documenter_fixed.py:214",
              "Indentation: auto_documenter_fixed.py:215",
              "Indentation: auto_documenter_fixed.py:222",
              "Indentation: auto_documenter_fixed.py:227",
              "Indentation: auto_documenter_fixed.py:229",
              "Indentation: auto_documenter_fixed.py:230",
              "Indentation: auto_documenter_fixed.py:236",
              "Indentation: auto_documenter_fixed.py:237",
              "Indentation: auto_documenter_fixed.py:249",
              "Indentation: auto_documenter_fixed.py:250",
              "Indentation: auto_documenter_fixed.py:254",
              "Indentation: auto_documenter_fixed.py:255",
              "Indentation: auto_documenter_fixed.py:256",
              "Indentation: auto_documenter_fixed.py:257",
              "Indentation: auto_documenter_fixed.py:258",
              "Indentation: auto_documenter_fixed.py:260",
              "Indentation: auto_documenter_fixed.py:261",
              "Indentation: auto_documenter_fixed.py:262",
              "Indentation: auto_documenter_fixed.py:263",
              "Indentation: auto_documenter_fixed.py:265",
              "Indentation: auto_documenter_fixed.py:266",
              "Indentation: auto_documenter_fixed.py:268",
              "Indentation: auto_documenter_fixed.py:269",
              "Indentation: auto_documenter_fixed.py:270",
              "Indentation: auto_documenter_fixed.py:271",
              "Indentation: auto_documenter_fixed.py:273",
              "Indentation: auto_documenter_fixed.py:274",
              "Indentation: auto_documenter_fixed.py:275",
              "Indentation: auto_documenter_fixed.py:277",
              "Indentation: auto_documenter_fixed.py:281",
              "Indentation: auto_documenter_fixed.py:282",
              "Indentation: auto_documenter_fixed.py:283",
              "Indentation: auto_documenter_fixed.py:285",
              "Indentation: auto_documenter_fixed.py:286",
              "Indentation: auto_documenter_fixed.py:287",
              "Indentation: auto_documenter_fixed.py:299",
              "Indentation: auto_documenter_fixed.py:303",
              "Indentation: auto_documenter_fixed.py:304",
              "Indentation: auto_documenter_fixed.py:305",
              "Indentation: auto_documenter_fixed.py:306",
              "Indentation: auto_documenter_fixed.py:307",
              "Indentation: auto_documenter_fixed.py:311",
              "Indentation: auto_documenter_fixed.py:333",
              "Indentation: auto_documenter_fixed.py:334",
              "Indentation: auto_documenter_fixed.py:335",
              "Indentation: auto_documenter_fixed.py:336",
              "Indentation: auto_documenter_fixed.py:340",
              "Indentation: auto_documenter_fixed.py:341",
              "Indentation: auto_documenter_fixed.py:342",
              "Indentation: auto_documenter_fixed.py:344",
              "Indentation: auto_documenter_fixed.py:345",
              "Indentation: auto_documenter_fixed.py:346",
              "Indentation: auto_documenter_fixed.py:382",
              "Indentation: auto_documenter_fixed.py:383",
              "Indentation: auto_documenter_fixed.py:384",
              "Indentation: auto_documenter_fixed.py:388",
              "Indentation: auto_documenter_fixed.py:389",
              "Indentation: auto_documenter_fixed.py:390",
              "Indentation: auto_documenter_fixed.py:392",
              "Indentation: auto_documenter_fixed.py:393",
              "Indentation: auto_documenter_fixed.py:394",
              "Indentation: auto_documenter_fixed.py:418",
              "Indentation: __init__.py:3",
              "Indentation: __init__.py:4",
              "Indentation: __init__.py:5",
              "Indentation: __init__.py:6",
              "Indentation: __init__.py:11",
              "Indentation: project_types.py:1",
              "Indentation: project_types.py:2",
              "Indentation: project_types.py:3",
              "Indentation: project_classifier.py:1",
              "Indentation: project_classifier.py:2",
              "Indentation: project_classifier.py:3",
              "Indentation: project_classifier.py:4",
              "Ligne trop longue: project_classifier.py:23",
              "Indentation: __init__.py:5",
              "Indentation: __init__.py:7",
              "Indentation: artistic_templates.py:1",
              "Indentation: artistic_templates.py:2",
              "Indentation: artistic_templates.py:3",
              "Indentation: artistic_templates.py:4",
              "Indentation: artistic_templates.py:13",
              "Indentation: artistic_templates.py:14",
              "Indentation: artistic_templates.py:15",
              "Indentation: artistic_templates.py:90",
              "Indentation: artistic_templates.py:92",
              "Indentation: artistic_templates.py:95",
              "Indentation: artistic_templates.py:96",
              "Indentation: artistic_templates.py:97",
              "Indentation: artistic_templates.py:154",
              "Indentation: artistic_templates.py:156",
              "Indentation: artistic_templates.py:159",
              "Indentation: artistic_templates.py:160",
              "Indentation: artistic_templates.py:161",
              "Indentation: artistic_templates.py:234",
              "Indentation: artistic_templates.py:236",
              "Indentation: artistic_templates.py:239",
              "Indentation: artistic_templates.py:240",
              "Indentation: artistic_templates.py:241",
              "Indentation: artistic_templates.py:283",
              "Indentation: artistic_templates.py:285",
              "Indentation: base_templates.py:1",
              "Indentation: base_templates.py:2",
              "Indentation: base_templates.py:3",
              "Indentation: base_templates.py:8",
              "Indentation: base_templates.py:12",
              "Indentation: base_templates.py:15",
              "Indentation: base_templates.py:16",
              "Indentation: base_templates.py:17",
              "Indentation: base_templates.py:18",
              "Indentation: base_templates.py:27",
              "Indentation: base_templates.py:28",
              "Indentation: base_templates.py:35",
              "Indentation: base_templates.py:36",
              "Indentation: base_templates.py:38",
              "Indentation: base_templates.py:40",
              "Indentation: base_templates.py:49",
              "Indentation: base_templates.py:79",
              "Indentation: base_templates.py:84",
              "Indentation: base_templates.py:89",
              "Indentation: base_templates.py:92",
              "Indentation: base_templates.py:95",
              "Indentation: base_templates.py:96",
              "Indentation: base_templates.py:101",
              "Indentation: base_templates.py:163",
              "Indentation: base_templates.py:171",
              "Indentation: base_templates.py:173",
              "Indentation: base_templates.py:176",
              "Indentation: base_templates.py:177",
              "Indentation: base_templates.py:185",
              "Indentation: base_templates.py:343",
              "Indentation: base_templates.py:359",
              "Indentation: base_templates.py:361",
              "Indentation: api_templates.py:9",
              "Indentation: api_templates.py:11",
              "Indentation: api_templates.py:17",
              "Indentation: api_templates.py:19",
              "Indentation: api_templates.py:20",
              "Indentation: api_templates.py:22",
              "Indentation: api_templates.py:26",
              "Indentation: api_templates.py:30",
              "Indentation: api_templates.py:43",
              "Indentation: api_templates.py:47",
              "Indentation: api_templates.py:54",
              "Indentation: api_templates.py:62",
              "Indentation: api_templates.py:71",
              "Indentation: api_templates.py:73",
              "Indentation: fr.py:1",
              "Indentation: fr.py:7",
              "Indentation: en.py:1",
              "Indentation: en.py:7"
            ],
            "status": "⚠️ Améliorable"
          },
          "documentation": {
            "coverage": 77.35470941883767,
            "documented": 386,
            "total": 499,
            "status": "✅ Bon"
          },
          "naming": {
            "issues": [
              "Fonction: setUp dans test_auto_correction_avancee.py",
              "Fonction: tearDown dans test_auto_correction_avancee.py",
              "Fonction: setUp dans test_profils_utilisateur_avances.py",
              "Fonction: tearDown dans test_profils_utilisateur_avances.py",
              "Fonction: setUp dans test_dashboard_unifie.py",
              "Fonction: tearDown dans test_dashboard_unifie.py",
              "Fonction: setUp dans test_dashboard_unifie_simple.py",
              "Fonction: tearDown dans test_dashboard_unifie_simple.py",
              "Classe: Violette_gameManager dans main.py",
              "Classe: Ai_playerManager dans main.py"
            ],
            "status": "⚠️ Améliorable"
          }
        },
        "security": {
          "vulnerabilities": [
            "Utilisation d'os.system(): test_audit_intelligent.py",
            "Mot de passe en dur: test_audit_intelligent.py",
            "Clé API en dur: test_audit_intelligent.py",
            "Utilisation d'os.system(): test_security.py",
            "Mot de passe en dur: test_security.py",
            "Utilisation d'eval(): audit.py",
            "Utilisation d'exec(): audit.py",
            "Utilisation d'os.system(): audit.py",
            "Utilisation d'eval(): intelligent_auditor.py",
            "Utilisation d'exec(): intelligent_auditor.py",
            "Utilisation d'os.system(): intelligent_auditor.py",
            "Utilisation de subprocess.call(): intelligent_auditor.py"
          ],
          "secrets": [
            "Secret détecté: result_tests.log",
            "Secret détecté: types.data.json",
            "Secret détecté: types.meta.json",
            "Secret détecté: typing_extensions.data.json",
            "Secret détecté: typing_extensions.meta.json",
            "Secret détecté: typing.data.json",
            "Secret détecté: re.data.json",
            "Secret détecté: zipimport.data.json",
            "Secret détecté: typing.meta.json",
            "Secret détecté: zipimport.meta.json",
            "Secret détecté: subprocess.data.json",
            "Secret détecté: subprocess.meta.json",
            "Secret détecté: sre_parse.data.json",
            "Secret détecté: sre_parse.meta.json",
            "Secret détecté: sre_constants.data.json",
            "Secret détecté: sre_constants.meta.json",
            "Secret détecté: sre_compile.data.json",
            "Secret détecté: sre_compile.meta.json",
            "Secret détecté: resource.data.json",
            "Secret détecté: resource.meta.json",
            "Secret détecté: re.meta.json",
            "Secret détecté: posixpath.data.json",
            "Secret détecté: posixpath.meta.json",
            "Secret détecté: pathlib.data.json",
            "Secret détecté: pathlib.meta.json",
            "Secret détecté: io.data.json",
            "Secret détecté: io.meta.json",
            "Secret détecté: enum.data.json",
            "Secret détecté: enum.meta.json",
            "Secret détecté: genericpath.data.json",
            "Secret détecté: genericpath.meta.json",
            "Secret détecté: ast.data.json",
            "Secret détecté: dataclasses.data.json",
            "Secret détecté: dataclasses.meta.json",
            "Secret détecté: contextlib.data.json",
            "Secret détecté: contextlib.meta.json",
            "Secret détecté: codecs.data.json",
            "Secret détecté: codecs.meta.json",
            "Secret détecté: ast.meta.json",
            "Secret détecté: abc.data.json",
            "Secret détecté: _io.meta.json",
            "Secret détecté: abc.meta.json",
            "Secret détecté: _sitebuiltins.meta.json",
            "Secret détecté: _io.data.json",
            "Secret détecté: _frozen_importlib.data.json",
            "Secret détecté: _ast.data.json",
            "Secret détecté: _ast.meta.json",
            "Secret détecté: _frozen_importlib_external.data.json",
            "Secret détecté: zlib.meta.json",
            "Secret détecté: _frozen_importlib_external.meta.json",
            "Secret détecté: _frozen_importlib.meta.json",
            "Secret détecté: _collections_abc.data.json",
            "Secret détecté: _collections_abc.meta.json",
            "Secret détecté: _codecs.data.json",
            "Secret détecté: _codecs.meta.json",
            "Secret détecté: copyreg.data.json",
            "Secret détecté: pickle.data.json",
            "Secret détecté: builtins.meta.json",
            "Secret détecté: _pickle.meta.json",
            "Secret détecté: math.meta.json",
            "Secret détecté: signal.data.json",
            "Secret détecté: signal.meta.json",
            "Secret détecté: copyreg.meta.json",
            "Secret détecté: _queue.data.json",
            "Secret détecté: time.meta.json",
            "Secret détecté: string.meta.json",
            "Secret détecté: _ssl.meta.json",
            "Secret détecté: pickle.meta.json",
            "Secret détecté: _thread.meta.json",
            "Secret détecté: threading.meta.json",
            "Secret détecté: datetime.data.json",
            "Secret détecté: datetime.meta.json",
            "Secret détecté: _queue.meta.json",
            "Secret détecté: _bz2.meta.json",
            "Secret détecté: _weakrefset.data.json",
            "Secret détecté: _weakrefset.meta.json",
            "Secret détecté: ipaddress.meta.json",
            "Secret détecté: tempfile.meta.json",
            "Secret détecté: test_ath_context_prompt_semantic.meta.json",
            "Secret détecté: _ctypes.meta.json",
            "Secret détecté: selectors.data.json",
            "Secret détecté: _ctypes.data.json",
            "Secret détecté: selectors.meta.json",
            "Secret détecté: _contextvars.meta.json",
            "Secret détecté: _contextvars.data.json",
            "Secret détecté: _stat.meta.json",
            "Secret détecté: ipaddress.data.json",
            "Secret détecté: select.meta.json",
            "Secret détecté: _warnings.data.json",
            "Secret détecté: _compression.meta.json",
            "Secret détecté: _warnings.meta.json",
            "Secret détecté: opcode.data.json",
            "Secret détecté: opcode.meta.json",
            "Secret détecté: _socket.data.json",
            "Secret détecté: _socket.meta.json",
            "Secret détecté: select.data.json",
            "Secret détecté: base64.data.json",
            "Secret détecté: socket.data.json",
            "Secret détecté: base64.meta.json",
            "Secret détecté: socket.meta.json",
            "Secret détecté: profile.meta.json",
            "Secret détecté: _lsprof.meta.json",
            "Secret détecté: token.meta.json",
            "Secret détecté: math.data.json",
            "Secret détecté: binascii.data.json",
            "Secret détecté: binascii.meta.json",
            "Secret détecté: mimetypes.data.json",
            "Secret détecté: mimetypes.meta.json",
            "Secret détecté: ssl.meta.json",
            "Secret détecté: __future__.data.json",
            "Secret détecté: __future__.meta.json",
            "Secret détecté: _weakref.meta.json",
            "Secret détecté: weakref.meta.json",
            "Secret détecté: gettext.data.json",
            "Secret détecté: gettext.meta.json",
            "Secret détecté: pprint.data.json",
            "Secret détecté: pprint.meta.json",
            "Secret détecté: gzip.meta.json",
            "Secret détecté: stat.meta.json",
            "Secret détecté: keyword.data.json",
            "Secret détecté: contextvars.meta.json",
            "Secret détecté: keyword.meta.json",
            "Secret détecté: bz2.meta.json",
            "Secret détecté: _operator.data.json",
            "Secret détecté: _operator.meta.json",
            "Secret détecté: contextvars.data.json",
            "Secret détecté: operator.data.json",
            "Secret détecté: operator.meta.json",
            "Secret détecté: queue.meta.json",
            "Secret détecté: _hashlib.data.json",
            "Secret détecté: errno.meta.json",
            "Secret détecté: _hashlib.meta.json",
            "Secret détecté: dis.meta.json",
            "Secret détecté: _blake2.data.json",
            "Secret détecté: _blake2.meta.json",
            "Secret détecté: hmac.meta.json",
            "Secret détecté: warnings.meta.json",
            "Secret détecté: array.meta.json",
            "Secret détecté: _stat.data.json",
            "Secret détecté: cProfile.meta.json",
            "Secret détecté: itertools.data.json",
            "Secret détecté: mmap.meta.json",
            "Secret détecté: itertools.meta.json",
            "Secret détecté: hashlib.meta.json",
            "Secret détecté: functools.data.json",
            "Secret détecté: tarfile.meta.json",
            "Secret détecté: functools.meta.json",
            "Secret détecté: pstats.meta.json",
            "Secret détecté: marshal.data.json",
            "Secret détecté: marshal.meta.json",
            "Secret détecté: errno.data.json",
            "Secret détecté: _imp.meta.json",
            "Secret détecté: shutil.meta.json",
            "Secret détecté: cmd.meta.json",
            "Secret détecté: numbers.data.json",
            "Secret détecté: numbers.meta.json",
            "Secret détecté: _asyncio.meta.json",
            "Secret détecté: _random.data.json",
            "Secret détecté: _random.meta.json",
            "Secret détecté: sysconfig.meta.json",
            "Secret détecté: fnmatch.data.json",
            "Secret détecté: _struct.meta.json",
            "Secret détecté: fnmatch.meta.json",
            "Secret détecté: hmac.data.json",
            "Secret détecté: dis.data.json",
            "Secret détecté: _bisect.meta.json",
            "Secret détecté: pdb.meta.json",
            "Secret détecté: fractions.meta.json",
            "Secret détecté: _decimal.meta.json",
            "Secret détecté: decimal.meta.json",
            "Secret détecté: inspect.meta.json",
            "Secret détecté: hashlib.data.json",
            "Secret détecté: random.data.json",
            "Secret détecté: random.meta.json",
            "Secret détecté: stat.data.json",
            "Secret détecté: _locale.meta.json",
            "Secret détecté: _decimal.data.json",
            "Secret détecté: pkgutil.meta.json",
            "Secret détecté: linecache.meta.json",
            "Secret détecté: decimal.data.json",
            "Secret détecté: ntpath.meta.json",
            "Secret détecté: uuid.meta.json",
            "Secret détecté: bdb.meta.json",
            "Secret détecté: atexit.meta.json",
            "Secret détecté: traceback.meta.json",
            "Secret détecté: unicodedata.meta.json",
            "Secret détecté: gc.meta.json",
            "Secret détecté: inspect.data.json",
            "Secret détecté: platform.meta.json",
            "Secret détecté: glob.meta.json",
            "Secret détecté: fractions.data.json",
            "Secret détecté: shlex.meta.json",
            "Secret détecté: copy.meta.json",
            "Secret détecté: textwrap.meta.json",
            "Secret détecté: struct.meta.json",
            "Secret détecté: reprlib.meta.json",
            "Secret détecté: argparse.meta.json",
            "Secret détecté: tokenize.meta.json",
            "Secret détecté: bisect.meta.json",
            "Secret détecté: locale.meta.json",
            "Secret détecté: plistlib.meta.json",
            "Secret détecté: sysconfig.data.json",
            "Secret détecté: doctest.meta.json",
            "Secret détecté: __main__.meta.json",
            "Secret détecté: _struct.data.json",
            "Secret détecté: token.data.json",
            "Secret détecté: _bisect.data.json",
            "Secret détecté: array.data.json",
            "Secret détecté: mmap.data.json",
            "Secret détecté: _locale.data.json",
            "Secret détecté: linecache.data.json",
            "Secret détecté: __main__.data.json",
            "Secret détecté: pkgutil.data.json",
            "Secret détecté: ntpath.data.json",
            "Secret détecté: _imp.data.json",
            "Secret détecté: cmd.data.json",
            "Secret détecté: uuid.data.json",
            "Secret détecté: atexit.data.json",
            "Secret détecté: unicodedata.data.json",
            "Secret détecté: bdb.data.json",
            "Secret détecté: gc.data.json",
            "Secret détecté: traceback.data.json",
            "Secret détecté: platform.data.json",
            "Secret détecté: shlex.data.json",
            "Secret détecté: glob.data.json",
            "Secret détecté: copy.data.json",
            "Secret détecté: textwrap.data.json",
            "Secret détecté: argparse.data.json",
            "Secret détecté: reprlib.data.json",
            "Secret détecté: struct.data.json",
            "Secret détecté: tokenize.data.json",
            "Secret détecté: bisect.data.json",
            "Secret détecté: plistlib.data.json",
            "Secret détecté: locale.data.json",
            "Secret détecté: pdb.data.json",
            "Secret détecté: doctest.data.json",
            "Secret détecté: winreg.data.json",
            "Secret détecté: winreg.meta.json",
            "Secret détecté: termios.data.json",
            "Secret détecté: termios.meta.json",
            "Secret détecté: msvcrt.data.json",
            "Secret détecté: msvcrt.meta.json",
            "Secret détecté: difflib.data.json",
            "Secret détecté: difflib.meta.json",
            "Secret détecté: tty.data.json",
            "Secret détecté: tty.meta.json",
            "Secret détecté: test_audit.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: path.data.json",
            "Secret détecté: path.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: readers.data.json",
            "Secret détecté: readers.meta.json",
            "Secret détecté: machinery.data.json",
            "Secret détecté: machinery.meta.json",
            "Secret détecté: _bootstrap_external.meta.json",
            "Secret détecté: abc.data.json",
            "Secret détecté: _bootstrap_external.data.json",
            "Secret détecté: abc.meta.json",
            "Secret détecté: _abc.data.json",
            "Secret détecté: _bootstrap.data.json",
            "Secret détecté: _bootstrap.meta.json",
            "Secret détecté: _abc.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: util.meta.json",
            "Secret détecté: util.data.json",
            "Secret détecté: _meta.data.json",
            "Secret détecté: _meta.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: policy.data.json",
            "Secret détecté: policy.meta.json",
            "Secret détecté: message.data.json",
            "Secret détecté: message.meta.json",
            "Secret détecté: header.data.json",
            "Secret détecté: header.meta.json",
            "Secret détecté: errors.data.json",
            "Secret détecté: errors.meta.json",
            "Secret détecté: contentmanager.data.json",
            "Secret détecté: contentmanager.meta.json",
            "Secret détecté: charset.data.json",
            "Secret détecté: charset.meta.json",
            "Secret détecté: _policybase.data.json",
            "Secret détecté: _policybase.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: parser.meta.json",
            "Secret détecté: utils.data.json",
            "Secret détecté: utils.meta.json",
            "Secret détecté: feedparser.meta.json",
            "Secret détecté: feedparser.data.json",
            "Secret détecté: parser.data.json",
            "Secret détecté: abc.meta.json",
            "Secret détecté: abc.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: importlib.data.json",
            "Secret détecté: importlib.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: tokens.meta.json",
            "Secret détecté: events.meta.json",
            "Secret détecté: error.meta.json",
            "Secret détecté: nodes.meta.json",
            "Secret détecté: scanner.meta.json",
            "Secret détecté: parser.meta.json",
            "Secret détecté: reader.meta.json",
            "Secret détecté: _yaml.meta.json",
            "Secret détecté: emitter.meta.json",
            "Secret détecté: cyaml.meta.json",
            "Secret détecté: resolver.meta.json",
            "Secret détecté: composer.meta.json",
            "Secret détecté: serializer.meta.json",
            "Secret détecté: representer.meta.json",
            "Secret détecté: dumper.meta.json",
            "Secret détecté: constructor.meta.json",
            "Secret détecté: loader.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: shared_memory.data.json",
            "Secret détecté: shared_memory.meta.json",
            "Secret détecté: spawn.data.json",
            "Secret détecté: spawn.meta.json",
            "Secret détecté: process.data.json",
            "Secret détecté: process.meta.json",
            "Secret détecté: pool.data.json",
            "Secret détecté: queues.data.json",
            "Secret détecté: pool.meta.json",
            "Secret détecté: queues.meta.json",
            "Secret détecté: connection.data.json",
            "Secret détecté: connection.meta.json",
            "Secret détecté: util.data.json",
            "Secret détecté: util.meta.json",
            "Secret détecté: popen_spawn_win32.data.json",
            "Secret détecté: popen_spawn_win32.meta.json",
            "Secret détecté: popen_fork.data.json",
            "Secret détecté: popen_fork.meta.json",
            "Secret détecté: reduction.data.json",
            "Secret détecté: reduction.meta.json",
            "Secret détecté: popen_spawn_posix.data.json",
            "Secret détecté: popen_spawn_posix.meta.json",
            "Secret détecté: popen_forkserver.data.json",
            "Secret détecté: popen_forkserver.meta.json",
            "Secret détecté: sharedctypes.data.json",
            "Secret détecté: sharedctypes.meta.json",
            "Secret détecté: managers.data.json",
            "Secret détecté: managers.meta.json",
            "Secret détecté: synchronize.data.json",
            "Secret détecté: synchronize.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: context.data.json",
            "Secret détecté: context.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _endian.data.json",
            "Secret détecté: _endian.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _collections.meta.json",
            "Secret détecté: _version.meta.json",
            "Secret détecté: fields.meta.json",
            "Secret détecté: filepost.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: _base_connection.meta.json",
            "Secret détecté: connection.meta.json",
            "Secret détecté: response.meta.json",
            "Secret détecté: _request_methods.meta.json",
            "Secret détecté: connectionpool.meta.json",
            "Secret détecté: poolmanager.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: socks.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: probe.meta.json",
            "Secret détecté: util.meta.json",
            "Secret détecté: wait.meta.json",
            "Secret détecté: url.meta.json",
            "Secret détecté: ssl_match_hostname.meta.json",
            "Secret détecté: ssltransport.meta.json",
            "Secret détecté: retry.meta.json",
            "Secret détecté: request.meta.json",
            "Secret détecté: timeout.meta.json",
            "Secret détecté: response.meta.json",
            "Secret détecté: ssl_.meta.json",
            "Secret détecté: proxy.meta.json",
            "Secret détecté: connection.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _base.data.json",
            "Secret détecté: _base.meta.json",
            "Secret détecté: thread.data.json",
            "Secret détecté: thread.meta.json",
            "Secret détecté: process.data.json",
            "Secret détecté: process.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: cookies.meta.json",
            "Secret détecté: cookies.data.json",
            "Secret détecté: client.meta.json",
            "Secret détecté: client.data.json",
            "Secret détecté: cookiejar.meta.json",
            "Secret détecté: cookiejar.data.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: parse.meta.json",
            "Secret détecté: error.meta.json",
            "Secret détecté: parse.data.json",
            "Secret détecté: response.meta.json",
            "Secret détecté: response.data.json",
            "Secret détecté: request.meta.json",
            "Secret détecté: error.data.json",
            "Secret détecté: request.data.json",
            "Secret détecté: threads.data.json",
            "Secret détecté: threads.meta.json",
            "Secret détecté: exceptions.data.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: coroutines.data.json",
            "Secret détecté: coroutines.meta.json",
            "Secret détecté: mixins.data.json",
            "Secret détecté: mixins.meta.json",
            "Secret détecté: selector_events.data.json",
            "Secret détecté: selector_events.meta.json",
            "Secret détecté: subprocess.data.json",
            "Secret détecté: subprocess.meta.json",
            "Secret détecté: protocols.data.json",
            "Secret détecté: protocols.meta.json",
            "Secret détecté: unix_events.data.json",
            "Secret détecté: streams.data.json",
            "Secret détecté: unix_events.meta.json",
            "Secret détecté: transports.data.json",
            "Secret détecté: streams.meta.json",
            "Secret détecté: transports.meta.json",
            "Secret détecté: tasks.data.json",
            "Secret détecté: runners.data.json",
            "Secret détecté: tasks.meta.json",
            "Secret détecté: runners.meta.json",
            "Secret détecté: queues.data.json",
            "Secret détecté: queues.meta.json",
            "Secret détecté: locks.data.json",
            "Secret détecté: locks.meta.json",
            "Secret détecté: futures.data.json",
            "Secret détecté: futures.meta.json",
            "Secret détecté: events.data.json",
            "Secret détecté: base_events.data.json",
            "Secret détecté: events.meta.json",
            "Secret détecté: base_events.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _speedups.meta.json",
            "Secret détecté: _native.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _identifier.meta.json",
            "Secret détecté: utils.meta.json",
            "Secret détecté: nodes.meta.json",
            "Secret détecté: async_utils.meta.json",
            "Secret détecté: bccache.meta.json",
            "Secret détecté: debug.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: lexer.meta.json",
            "Secret détecté: visitor.meta.json",
            "Secret détecté: loaders.meta.json",
            "Secret détecté: tests.meta.json",
            "Secret détecté: ext.meta.json",
            "Secret détecté: runtime.meta.json",
            "Secret détecté: optimizer.meta.json",
            "Secret détecté: filters.meta.json",
            "Secret détecté: idtracking.meta.json",
            "Secret détecté: defaults.meta.json",
            "Secret détecté: parser.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: compiler.meta.json",
            "Secret détecté: environment.meta.json",
            "Secret détecté: sandbox.meta.json",
            "Secret détecté: hooks.meta.json",
            "Secret détecté: structures.meta.json",
            "Secret détecté: status_codes.meta.json",
            "Secret détecté: packages.meta.json",
            "Secret détecté: __version__.meta.json",
            "Secret détecté: cookies.meta.json",
            "Secret détecté: compat.meta.json",
            "Secret détecté: auth.meta.json",
            "Secret détecté: utils.meta.json",
            "Secret détecté: adapters.meta.json",
            "Secret détecté: sessions.meta.json",
            "Secret détecté: models.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: api.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: encoder.data.json",
            "Secret détecté: encoder.meta.json",
            "Secret détecté: decoder.meta.json",
            "Secret détecté: decoder.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.data.json",
            "Secret détecté: audit.meta.json",
            "Secret détecté: plugins_validator.meta.json",
            "Secret détecté: security.meta.json",
            "Secret détecté: onboarding.meta.json",
            "Secret détecté: generation.meta.json",
            "Secret détecté: ai_robust.meta.json",
            "Secret détecté: ci.meta.json",
            "Secret détecté: project_importer.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: plugins_manager.meta.json",
            "Secret détecté: analytics.meta.json",
            "Secret détecté: auto_tester.meta.json",
            "Secret détecté: auto_fixer.meta.json",
            "Secret détecté: intelligent_auditor.meta.json",
            "Secret détecté: profiles.meta.json",
            "Secret détecté: ready_check.meta.json",
            "Secret détecté: dashboard.meta.json",
            "Secret détecté: cleanup.meta.json",
            "Secret détecté: security_auditor.meta.json",
            "Secret détecté: auto_cicd.meta.json",
            "Secret détecté: auto_cleaner.meta.json",
            "Secret détecté: code_linter.meta.json",
            "Secret détecté: advanced_analytics.meta.json",
            "Secret détecté: auto_documenter.meta.json",
            "Secret détecté: fr.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: en.meta.json",
            "Secret détecté: base_templates.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: artistic_templates.meta.json",
            "Secret détecté: api_templates.meta.json",
            "Secret détecté: project_classifier.meta.json",
            "Secret détecté: project_types.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _expired_attrs_2_0.meta.json",
            "Secret détecté: _globals.meta.json",
            "Secret détecté: version.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: _pytesttester.meta.json",
            "Secret détecté: __config__.meta.json",
            "Secret détecté: dtypes.meta.json",
            "Secret détecté: _array_api_info.meta.json",
            "Secret détecté: ctypeslib.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: matlib.meta.json",
            "Secret détecté: _convertions.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: overrides.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: utils.meta.json",
            "Secret détecté: _version.meta.json",
            "Secret détecté: introspect.meta.json",
            "Secret détecté: format.meta.json",
            "Secret détecté: _datasource.meta.json",
            "Secret détecté: _utils_impl.meta.json",
            "Secret détecté: _arrayterator_impl.meta.json",
            "Secret détecté: _array_utils_impl.meta.json",
            "Secret détecté: _ufunclike_impl.meta.json",
            "Secret détecté: npyio.meta.json",
            "Secret détecté: _type_check_impl.meta.json",
            "Secret détecté: _twodim_base_impl.meta.json",
            "Secret détecté: _stride_tricks_impl.meta.json",
            "Secret détecté: _shape_base_impl.meta.json",
            "Secret détecté: _polynomial_impl.meta.json",
            "Secret détecté: _npyio_impl.meta.json",
            "Secret détecté: _nanfunctions_impl.meta.json",
            "Secret détecté: _function_base_impl.meta.json",
            "Secret détecté: _index_tricks_impl.meta.json",
            "Secret détecté: _arraysetops_impl.meta.json",
            "Secret détecté: _histograms_impl.meta.json",
            "Secret détecté: stride_tricks.meta.json",
            "Secret détecté: _arraypad_impl.meta.json",
            "Secret détecté: mixins.meta.json",
            "Secret détecté: array_utils.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _scimath_impl.meta.json",
            "Secret détecté: scimath.meta.json",
            "Secret détecté: _shape.meta.json",
            "Secret détecté: _char_codes.meta.json",
            "Secret détecté: _nested_sequence.meta.json",
            "Secret détecté: _nbit_base.meta.json",
            "Secret détecté: _nbit.meta.json",
            "Secret détecté: _dtype_like.meta.json",
            "Secret détecté: _scalars.meta.json",
            "Secret détecté: _add_docstring.meta.json",
            "Secret détecté: _ufunc.meta.json",
            "Secret détecté: _array_like.meta.json",
            "Secret détecté: _extended_precision.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _callable.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _type_aliases.meta.json",
            "Secret détecté: shape_base.meta.json",
            "Secret détecté: numerictypes.meta.json",
            "Secret détecté: numeric.meta.json",
            "Secret détecté: multiarray.meta.json",
            "Secret détecté: einsumfunc.meta.json",
            "Secret détecté: arrayprint.meta.json",
            "Secret détecté: _ufunc_config.meta.json",
            "Secret détecté: _asarray.meta.json",
            "Secret détecté: fromnumeric.meta.json",
            "Secret détecté: function_base.meta.json",
            "Secret détecté: records.meta.json",
            "Secret détecté: _internal.meta.json",
            "Secret détecté: strings.meta.json",
            "Secret détecté: defchararray.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: defmatrix.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: extras.meta.json",
            "Secret détecté: core.meta.json",
            "Secret détecté: mrecords.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _polytypes.meta.json",
            "Secret détecté: polyutils.meta.json",
            "Secret détecté: _polybase.meta.json",
            "Secret détecté: laguerre.meta.json",
            "Secret détecté: hermite_e.meta.json",
            "Secret détecté: hermite.meta.json",
            "Secret détecté: legendre.meta.json",
            "Secret détecté: chebyshev.meta.json",
            "Secret détecté: polynomial.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: bit_generator.meta.json",
            "Secret détecté: mtrand.meta.json",
            "Secret détecté: _sfc64.meta.json",
            "Secret détecté: _philox.meta.json",
            "Secret détecté: _pcg64.meta.json",
            "Secret détecté: _mt19937.meta.json",
            "Secret détecté: _generator.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _helper.meta.json",
            "Secret détecté: _pocketfft.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _linalg.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: macos.meta.json",
            "Secret détecté: version.meta.json",
            "Secret détecté: api.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _version.meta.json",
            "Secret détecté: _exceptions.meta.json",
            "Secret détecté: _suppress.meta.json",
            "Secret détecté: _formatting.meta.json",
            "Secret détecté: _catch.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _warnings.meta.json",
            "Secret détecté: _version.meta.json",
            "Secret détecté: _tracing.meta.json",
            "Secret détecté: _result.meta.json",
            "Secret détecté: _hooks.meta.json",
            "Secret détecté: _callers.meta.json",
            "Secret détecté: _manager.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _structures.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: version.meta.json",
            "Secret détecté: version.data.json",
            "Secret détecté: _elffile.meta.json",
            "Secret détecté: _musllinux.meta.json",
            "Secret détecté: _manylinux.meta.json",
            "Secret détecté: tags.meta.json",
            "Secret détecté: utils.meta.json",
            "Secret détecté: specifiers.meta.json",
            "Secret détecté: _tokenizer.meta.json",
            "Secret détecté: requirements.meta.json",
            "Secret détecté: _parser.meta.json",
            "Secret détecté: markers.meta.json",
            "Secret détecté: specifiers.data.json",
            "Secret détecté: markers.data.json",
            "Secret détecté: requirements.data.json",
            "Secret détecté: _version.meta.json",
            "Secret détecté: tracemalloc.meta.json",
            "Secret détecté: _argcomplete.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: stash.meta.json",
            "Secret détecté: freeze_support.meta.json",
            "Secret détecté: scope.meta.json",
            "Secret détecté: compat.meta.json",
            "Secret détecté: warning_types.meta.json",
            "Secret détecté: deprecated.meta.json",
            "Secret détecté: outcomes.meta.json",
            "Secret détecté: timing.meta.json",
            "Secret détecté: pathlib.meta.json",
            "Secret détecté: python_api.meta.json",
            "Secret détecté: hookspec.meta.json",
            "Secret détecté: reports.meta.json",
            "Secret détecté: raises.meta.json",
            "Secret détecté: nodes.meta.json",
            "Secret détecté: pytester_assertions.meta.json",
            "Secret détecté: terminal.meta.json",
            "Secret détecté: runner.meta.json",
            "Secret détecté: main.meta.json",
            "Secret détecté: python.meta.json",
            "Secret détecté: fixtures.meta.json",
            "Secret détecté: recwarn.meta.json",
            "Secret détecté: cacheprovider.meta.json",
            "Secret détecté: monkeypatch.meta.json",
            "Secret détecté: capture.meta.json",
            "Secret détecté: tmpdir.meta.json",
            "Secret détecté: doctest.meta.json",
            "Secret détecté: logging.meta.json",
            "Secret détecté: debugging.meta.json",
            "Secret détecté: pytester.meta.json",
            "Secret détecté: unraisableexception.meta.json",
            "Secret détecté: legacypath.meta.json",
            "Secret détecté: warnings.meta.json",
            "Secret détecté: helpconfig.meta.json",
            "Secret détecté: pprint.meta.json",
            "Secret détecté: wcwidth.meta.json",
            "Secret détecté: saferepr.meta.json",
            "Secret détecté: terminalwriter.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: expression.meta.json",
            "Secret détecté: structures.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: findpaths.meta.json",
            "Secret détecté: compat.meta.json",
            "Secret détecté: argparsing.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: source.meta.json",
            "Secret détecté: code.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: util.meta.json",
            "Secret détecté: truncate.meta.json",
            "Secret détecté: rewrite.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: _parse.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: result.data.json",
            "Secret détecté: mock.data.json",
            "Secret détecté: result.meta.json",
            "Secret détecté: mock.meta.json",
            "Secret détecté: _log.meta.json",
            "Secret détecté: case.meta.json",
            "Secret détecté: case.data.json",
            "Secret détecté: suite.meta.json",
            "Secret détecté: suite.data.json",
            "Secret détecté: main.meta.json",
            "Secret détecté: signals.data.json",
            "Secret détecté: signals.meta.json",
            "Secret détecté: async_case.data.json",
            "Secret détecté: async_case.meta.json",
            "Secret détecté: runner.data.json",
            "Secret détecté: runner.meta.json",
            "Secret détecté: loader.data.json",
            "Secret détecté: loader.meta.json",
            "Secret détecté: main.data.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: constants.meta.json",
            "Secret détecté: surflock.meta.json",
            "Secret détecté: colordict.meta.json",
            "Secret détecté: bufferproxy.meta.json",
            "Secret détecté: base.meta.json",
            "Secret détecté: scrap.meta.json",
            "Secret détecté: math.meta.json",
            "Secret détecté: joystick.meta.json",
            "Secret détecté: event.meta.json",
            "Secret détecté: _common.meta.json",
            "Secret détecté: rect.meta.json",
            "Secret détecté: color.meta.json",
            "Secret détecté: fastevent.meta.json",
            "Secret détecté: time.meta.json",
            "Secret détecté: surface.meta.json",
            "Secret détecté: rwobject.meta.json",
            "Secret détecté: mixer_music.meta.json",
            "Secret détecté: version.meta.json",
            "Secret détecté: key.meta.json",
            "Secret détecté: pixelarray.meta.json",
            "Secret détecté: transform.meta.json",
            "Secret détecté: mask.meta.json",
            "Secret détecté: cursors.meta.json",
            "Secret détecté: image.meta.json",
            "Secret détecté: font.meta.json",
            "Secret détecté: draw.meta.json",
            "Secret détecté: display.meta.json",
            "Secret détecté: sysfont.meta.json",
            "Secret détecté: sprite.meta.json",
            "Secret détecté: mouse.meta.json",
            "Secret détecté: pixelcopy.meta.json",
            "Secret détecté: surfarray.meta.json",
            "Secret détecté: mixer.meta.json",
            "Secret détecté: sndarray.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: _compat.meta.json",
            "Secret détecté: globals.meta.json",
            "Secret détecté: utils.meta.json",
            "Secret détecté: exceptions.meta.json",
            "Secret détecté: _termui_impl.meta.json",
            "Secret détecté: parser.meta.json",
            "Secret détecté: formatting.meta.json",
            "Secret détecté: types.meta.json",
            "Secret détecté: termui.meta.json",
            "Secret détecté: core.meta.json",
            "Secret détecté: shell_completion.meta.json",
            "Secret détecté: decorators.meta.json",
            "Secret détecté: __init__.meta.json",
            "Secret détecté: FETCH_HEAD",
            "Secret détecté: ORIG_HEAD",
            "Secret détecté: main",
            "Secret détecté: gh-pages",
            "Secret détecté: main",
            "Secret détecté: gh-pages",
            "Secret détecté: HEAD",
            "Secret détecté: main",
            "Secret détecté: gh-pages",
            "Secret détecté: main",
            "Secret détecté: gh-pages"
          ],
          "permissions": {
            "sensitive_files": [],
            "status": "✅ Sécurisé"
          }
        },
        "performance": {
          "file_sizes": {
            "total_size_mb": 213.82898044586182,
            "large_files": [
              "builtins.data.json: 1.8MB",
              "__init__.data.json: 5.3MB",
              "fromnumeric.data.json: 1.1MB",
              "c732888e1ba080420e679975e02991d3bd6a02: 1.4MB",
              "a895ffbc25af788961a6c519287c07afa35fe5: 4.6MB",
              "d4c4b149880d2262e2865859d87f69d5997f80: 6.8MB",
              "65a09dde5dcb295649bf9f3f6c9a0263f55e0b: 5.4MB",
              "8d7e7e94824d3fb012e2e8cdd230e838b04124: 3.7MB",
              "ae7808d75d57881ecc2da874aea5af9c212139: 70.4MB",
              "ff43e256910ae8d54a36332b044869b26230fb: 2.8MB",
              "45bcc1be6b595dd1e6984b028163bb8b650287: 2.4MB",
              "3cd241aae4c8a0087e6b7b14c4f9b981df3bd6: 6.7MB",
              "933f02a7424df07a79118b7f6d9af29ed11454: 6.1MB",
              "b8225756a9f247fe4ecd92d9d57079f0fe2a34: 1.5MB",
              "27ce990a58c626bc7cb7dea7cb9ee94b4784c5: 2.1MB"
            ],
            "status": "⚠️ Optimisable"
          },
          "imports": {
            "total_imports": 470,
            "unique_imports": 97,
            "status": "⚠️ Nombreux"
          },
          "memory_usage": {
            "estimated_mb": 0.07321176528930665,
            "status": "✅ Faible"
          }
        },
        "documentation": {
          "readme": {
            "exists": true,
            "score": 2,
            "status": "⚠️ Incomplet"
          },
          "api_docs": {
            "files": [
              "docs/USER_GUIDE.md",
              "docs/DEVELOPER_GUIDE.md",
              "docs/API_REFERENCE.md",
              "docs/PLUGINS_GUIDE.md",
              "docs/FAQ.md"
            ],
            "status": "✅ Présent"
          },
          "inline_docs": {
            "coverage": 77.35470941883767,
            "documented": 386,
            "total": 499,
            "status": "✅ Bon"
          },
          "guides": {
            "files": [],
            "status": "❌ Manquant"
          }
        },
        "testing": {
          "coverage": {
            "test_files": 48,
            "source_files": 92,
            "ratio": 0.5217391304347826,
            "status": "✅ Bon"
          },
          "test_files": [
            "test_unified.py",
            "._test_unified.py",
            "test_final.py",
            "._test_final.py",
            "tests/test_ath_context_prompt_semantic.py",
            "tests/test_ath_dev_boost.py",
            "tests/test_ath_dev_boost_menu.py",
            "tests/test_audit_intelligent.py",
            "tests/test_ci.py",
            "tests/test_ready_check.py",
            "tests/test_plugins.py",
            "tests/test_cleanup.py",
            "tests/._test_ready_check.py",
            "tests/test_continue_models.py",
            "tests/test_analytics.py",
            "tests/test_dashboard.py",
            "tests/test_i18n.py",
            "tests/test_generation.py",
            "tests/test_ai_robust.py",
            "tests/test_onboarding.py",
            "tests/._test_i18n.py",
            "tests/test_security.py",
            "tests/test_plugins_validator.py",
            "tests/test_ai_robust_integration.py",
            "tests/._test_plugins_validator.py",
            "tests/test_project_importer.py",
            "tests/._test_project_importer.py",
            "tests/test_auto_fixer.py",
            "tests/._test_auto_fixer.py",
            "tests/test_profiles.py",
            "tests/._test_profiles.py",
            "tests/._test_analytics.py",
            "tests/test_athalia_orchestrator.py",
            "tests/._test_athalia_orchestrator.py",
            "tests/test_auto_correction_avancee.py",
            "tests/._test_auto_correction_avancee.py",
            "tests/test_profils_utilisateur_avances.py",
            "tests/._test_profils_utilisateur_avances.py",
            "tests/test_dashboard_unifie.py",
            "tests/._test_dashboard_unifie.py",
            "tests/test_dashboard_unifie_simple.py",
            "tests/._test_dashboard_unifie_simple.py"
          ],
          "test_quality": {
            "issues": [
              "Pas d'assertions: test_unified.py",
              "Pas d'assertions: test_final.py",
              "Pas de fonctions test: test_ath_context_prompt_semantic.py",
              "Pas de fonctions test: test_ath_dev_boost.py",
              "Pas de fonctions test: test_ath_dev_boost_menu.py"
            ],
            "status": "⚠️ Améliorable"
          }
        },
        "structure": {
          "organization": {
            "score": 2,
            "found_directories": [
              ".benchmarks",
              "plugins",
              "logs",
              "tests",
              ".github",
              "blueprints_history",
              "modules",
              ".mypy_cache",
              ".pytest_cache",
              "VioletTwistAI",
              "agents",
              "docs",
              "prompts",
              "dashboard",
              "setup",
              "tasks",
              "templates",
              "athalia_core",
              ".git",
              "mon-projet"
            ],
            "status": "⚠️ À améliorer"
          },
          "naming": {
            "issues": [
              "Fichier caché: .benchmarks",
              "Fichier caché: ._dashboard.md",
              "Fichier caché: ._result_tests.log",
              "Fichier caché: .github",
              "Fichier caché: ._dashboard.html",
              "Fichier caché: ._athalia.py",
              "Fichier caché: .mypy_cache",
              "Fichier caché: .pytest_cache",
              "Fichier caché: ._audit_arkalia_quest.txt",
              "Fichier caché: ._modules",
              "Fichier caché: ._test_dashboard.html",
              "Fichier caché: ._athalia_new.py",
              "Fichier caché: ._profils_utilisateur.db",
              "Fichier caché: ._athalia_analytics.db",
              "Fichier caché: ._RAPPORT_FINAL.md",
              "Fichier caché: ._dashboard",
              "Fichier caché: ._athalia_unified.py",
              "Fichier caché: ._README_UNIFIED.md",
              "Fichier caché: ._test_unified.py",
              "Fichier caché: ._test_final.py",
              "Fichier caché: ._demo_athalia.py",
              "Fichier caché: ._INVENTAIRE_COMPLET.md",
              "Fichier caché: ._athalia_quick_start.py",
              "Fichier caché: ._mon-projet",
              "Fichier caché: ._export_docker_plugin.py",
              "Fichier caché: ._export_docker_plugin.cpython-310.pyc",
              "Fichier caché: .keep",
              "Fichier caché: ._test_ready_check.py",
              "Fichier caché: ._test_i18n.py",
              "Fichier caché: ._test_plugins_validator.py",
              "Fichier caché: ._test_project_importer.py",
              "Fichier caché: ._test_auto_fixer.py",
              "Fichier caché: ._test_profiles.py",
              "Fichier caché: ._test_analytics.py",
              "Fichier caché: ._test_athalia_orchestrator.py",
              "Fichier caché: ._test_auto_correction_avancee.py",
              "Fichier caché: ._test_profils_utilisateur_avances.py",
              "Fichier caché: ._test_dashboard_unifie.py",
              "Fichier caché: ._test_dashboard_unifie_simple.py",
              "Fichier caché: ._test_ai_robust_integration.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_i18n.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_plugins_validator.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_ready_check.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_project_importer.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_auto_fixer.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_profiles.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_analytics.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_athalia_orchestrator.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_auto_correction_avancee.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_profils_utilisateur_avances.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_dashboard_unifie.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._test_dashboard_unifie_simple.cpython-310-pytest-8.4.1.pyc",
              "Fichier caché: ._blueprint_ia_project_20250717_041358.yaml",
              "Fichier caché: ._blueprint_ia_project_20250717_043107.yaml",
              "Fichier caché: ._blueprint_ia_project_20250717_052513.yaml",
              "Fichier caché: ._blueprint_TodoListAPI_20250717_053434.yaml",
              "Fichier caché: ._blueprint_my-ai-api_20250717_054051.yaml",
              "Fichier caché: ._blueprint_TodoListAPI-Python_20250717_054627.yaml",
              "Fichier caché: ._blueprint_ia_project_20250717_063132.yaml",
              "Fichier caché: ._auto_correction_avancee.py",
              "Fichier caché: .___pycache__",
              "Fichier caché: ._profils_utilisateur_avances.py",
              "Fichier caché: ._dashboard_unifie.py",
              "Fichier caché: ._dashboard_unifie_simple.py",
              "Fichier caché: ._orchestrateur_principal.py",
              "Fichier caché: ._auto_correction_avancee.cpython-310.pyc",
              "Fichier caché: ._profils_utilisateur_avances.cpython-310.pyc",
              "Fichier caché: ._dashboard_unifie.cpython-310.pyc",
              "Fichier caché: ._dashboard_unifie_simple.cpython-310.pyc",
              "Fichier caché: ._@plugins_snapshot.json",
              "Fichier caché: ._zipimport.data.json",
              "Fichier caché: ._zipimport.meta.json",
              "Fichier caché: ._types.meta.json",
              "Fichier caché: ._typing_extensions.data.json",
              "Fichier caché: ._typing_extensions.meta.json",
              "Fichier caché: ._typing.data.json",
              "Fichier caché: ._typing.meta.json",
              "Fichier caché: ._types.data.json",
              "Fichier caché: ._subprocess.data.json",
              "Fichier caché: ._subprocess.meta.json",
              "Fichier caché: ._sre_parse.data.json",
              "Fichier caché: ._sre_parse.meta.json",
              "Fichier caché: ._sre_constants.data.json",
              "Fichier caché: ._sre_constants.meta.json",
              "Fichier caché: ._sre_compile.data.json",
              "Fichier caché: ._re.data.json",
              "Fichier caché: ._sre_compile.meta.json",
              "Fichier caché: ._resource.data.json",
              "Fichier caché: ._resource.meta.json",
              "Fichier caché: ._re.meta.json",
              "Fichier caché: ._pathlib.data.json",
              "Fichier caché: ._pathlib.meta.json",
              "Fichier caché: ._io.data.json",
              "Fichier caché: ._posixpath.data.json",
              "Fichier caché: ._posixpath.meta.json",
              "Fichier caché: ._io.meta.json",
              "Fichier caché: ._genericpath.data.json",
              "Fichier caché: ._genericpath.meta.json",
              "Fichier caché: ._enum.data.json",
              "Fichier caché: ._ast.data.json",
              "Fichier caché: ._ast.meta.json",
              "Fichier caché: ._enum.meta.json",
              "Fichier caché: ._dataclasses.data.json",
              "Fichier caché: ._dataclasses.meta.json",
              "Fichier caché: ._contextlib.data.json",
              "Fichier caché: ._contextlib.meta.json",
              "Fichier caché: ._codecs.data.json",
              "Fichier caché: ._codecs.meta.json",
              "Fichier caché: ._abc.data.json",
              "Fichier caché: ._abc.meta.json",
              "Fichier caché: .__io.data.json",
              "Fichier caché: .__io.meta.json",
              "Fichier caché: .__sitebuiltins.meta.json",
              "Fichier caché: .__frozen_importlib_external.data.json",
              "Fichier caché: .__frozen_importlib_external.meta.json",
              "Fichier caché: .__sitebuiltins.data.json",
              "Fichier caché: .__frozen_importlib.data.json",
              "Fichier caché: .__ast.meta.json",
              "Fichier caché: .__frozen_importlib.meta.json",
              "Fichier caché: .__collections_abc.data.json",
              "Fichier caché: .__collections_abc.meta.json",
              "Fichier caché: .__codecs.data.json",
              "Fichier caché: .__codecs.meta.json",
              "Fichier caché: .__ast.data.json",
              "Fichier caché: ._builtins.data.json",
              "Fichier caché: ._builtins.meta.json",
              "Fichier caché: ._copyreg.data.json",
              "Fichier caché: ._copyreg.meta.json",
              "Fichier caché: .__pickle.meta.json",
              "Fichier caché: ._pickle.data.json",
              "Fichier caché: ._pickle.meta.json",
              "Fichier caché: .__queue.data.json",
              "Fichier caché: .__pickle.data.json",
              "Fichier caché: .__queue.meta.json",
              "Fichier caché: .__weakrefset.data.json",
              "Fichier caché: .__weakrefset.meta.json",
              "Fichier caché: .__ctypes.meta.json",
              "Fichier caché: ._ipaddress.meta.json",
              "Fichier caché: .__ctypes.data.json",
              "Fichier caché: ._signal.data.json",
              "Fichier caché: ._signal.meta.json",
              "Fichier caché: ._selectors.data.json",
              "Fichier caché: ._selectors.meta.json",
              "Fichier caché: .__contextvars.meta.json",
              "Fichier caché: .__contextvars.data.json",
              "Fichier caché: ._zlib.meta.json",
              "Fichier caché: ._zlib.data.json",
              "Fichier caché: .__bz2.data.json",
              "Fichier caché: .__bz2.meta.json",
              "Fichier caché: .__compression.meta.json",
              "Fichier caché: .__compression.data.json",
              "Fichier caché: .__warnings.meta.json",
              "Fichier caché: .__warnings.data.json",
              "Fichier caché: ._string.data.json",
              "Fichier caché: .__ssl.data.json",
              "Fichier caché: ._string.meta.json",
              "Fichier caché: ._ssl.data.json",
              "Fichier caché: .__socket.data.json",
              "Fichier caché: ._select.meta.json",
              "Fichier caché: .__socket.meta.json",
              "Fichier caché: ._socket.data.json",
              "Fichier caché: ._socket.meta.json",
              "Fichier caché: ._profile.meta.json",
              "Fichier caché: .__lsprof.meta.json",
              "Fichier caché: ._math.meta.json",
              "Fichier caché: ._time.data.json",
              "Fichier caché: ._time.meta.json",
              "Fichier caché: ._tempfile.data.json",
              "Fichier caché: ._profile.data.json",
              "Fichier caché: ._tempfile.meta.json",
              "Fichier caché: .__weakref.data.json",
              "Fichier caché: .__lsprof.data.json",
              "Fichier caché: .__weakref.meta.json",
              "Fichier caché: ._weakref.data.json",
              "Fichier caché: ._ssl.meta.json",
              "Fichier caché: ._weakref.meta.json",
              "Fichier caché: .__thread.meta.json",
              "Fichier caché: .__thread.data.json",
              "Fichier caché: ._threading.meta.json",
              "Fichier caché: ._threading.data.json",
              "Fichier caché: ._contextvars.data.json",
              "Fichier caché: ._contextvars.meta.json",
              "Fichier caché: .__ssl.meta.json",
              "Fichier caché: ._gzip.data.json",
              "Fichier caché: ._gzip.meta.json",
              "Fichier caché: ._warnings.data.json",
              "Fichier caché: ._bz2.data.json",
              "Fichier caché: ._bz2.meta.json",
              "Fichier caché: ._warnings.meta.json",
              "Fichier caché: .__stat.meta.json",
              "Fichier caché: ._cProfile.meta.json",
              "Fichier caché: ._queue.data.json",
              "Fichier caché: ._queue.meta.json",
              "Fichier caché: ._tarfile.data.json",
              "Fichier caché: ._datetime.meta.json",
              "Fichier caché: ._tarfile.meta.json",
              "Fichier caché: ._cProfile.data.json",
              "Fichier caché: ._pstats.meta.json",
              "Fichier caché: ._shutil.data.json",
              "Fichier caché: ._shutil.meta.json",
              "Fichier caché: ._dis.meta.json",
              "Fichier caché: .__asyncio.data.json",
              "Fichier caché: ._cmd.meta.json",
              "Fichier caché: ._pstats.data.json",
              "Fichier caché: .__asyncio.meta.json",
              "Fichier caché: ._base64.meta.json",
              "Fichier caché: ._binascii.meta.json",
              "Fichier caché: ._mimetypes.meta.json",
              "Fichier caché: .___future__.meta.json",
              "Fichier caché: ._gettext.meta.json",
              "Fichier caché: ._opcode.meta.json",
              "Fichier caché: .__hashlib.meta.json",
              "Fichier caché: .__blake2.meta.json",
              "Fichier caché: ._sysconfig.meta.json",
              "Fichier caché: .__random.meta.json",
              "Fichier caché: .__struct.meta.json",
              "Fichier caché: ._keyword.meta.json",
              "Fichier caché: ._token.meta.json",
              "Fichier caché: ._pprint.meta.json",
              "Fichier caché: .__operator.meta.json",
              "Fichier caché: ._operator.meta.json",
              "Fichier caché: ._itertools.meta.json",
              "Fichier caché: ._hashlib.meta.json",
              "Fichier caché: .__bisect.meta.json",
              "Fichier caché: ._functools.meta.json",
              "Fichier caché: ._marshal.meta.json",
              "Fichier caché: ._fnmatch.meta.json",
              "Fichier caché: ._errno.meta.json",
              "Fichier caché: ._numbers.meta.json",
              "Fichier caché: ._argparse.meta.json",
              "Fichier caché: ._array.meta.json",
              "Fichier caché: ._hmac.meta.json",
              "Fichier caché: ._stat.meta.json",
              "Fichier caché: .__decimal.meta.json",
              "Fichier caché: ._decimal.meta.json",
              "Fichier caché: ._inspect.meta.json",
              "Fichier caché: ._fractions.meta.json",
              "Fichier caché: ._random.data.json",
              "Fichier caché: ._random.meta.json",
              "Fichier caché: ._pdb.meta.json",
              "Fichier caché: ._mmap.meta.json",
              "Fichier caché: .__locale.meta.json",
              "Fichier caché: ._linecache.meta.json",
              "Fichier caché: ._pkgutil.meta.json",
              "Fichier caché: ._ntpath.meta.json",
              "Fichier caché: .__imp.meta.json",
              "Fichier caché: ._uuid.meta.json",
              "Fichier caché: ._atexit.meta.json",
              "Fichier caché: ._unicodedata.meta.json",
              "Fichier caché: ._gc.meta.json",
              "Fichier caché: ._traceback.meta.json",
              "Fichier caché: ._platform.meta.json",
              "Fichier caché: ._bdb.meta.json",
              "Fichier caché: ._shlex.meta.json",
              "Fichier caché: ._glob.meta.json",
              "Fichier caché: ._copy.meta.json",
              "Fichier caché: ._textwrap.meta.json",
              "Fichier caché: ._reprlib.meta.json",
              "Fichier caché: ._struct.meta.json",
              "Fichier caché: ._tokenize.meta.json",
              "Fichier caché: ._bisect.meta.json",
              "Fichier caché: ._plistlib.meta.json",
              "Fichier caché: ._locale.meta.json",
              "Fichier caché: ._doctest.meta.json",
              "Fichier caché: .___main__.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._path.data.json",
              "Fichier caché: ._path.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._readers.data.json",
              "Fichier caché: ._readers.meta.json",
              "Fichier caché: ._machinery.data.json",
              "Fichier caché: ._machinery.meta.json",
              "Fichier caché: ._abc.data.json",
              "Fichier caché: ._abc.meta.json",
              "Fichier caché: .__bootstrap_external.data.json",
              "Fichier caché: .__bootstrap_external.meta.json",
              "Fichier caché: .__bootstrap.data.json",
              "Fichier caché: .__bootstrap.meta.json",
              "Fichier caché: .__abc.meta.json",
              "Fichier caché: .__abc.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: ._util.meta.json",
              "Fichier caché: .__meta.data.json",
              "Fichier caché: .__meta.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._policy.data.json",
              "Fichier caché: ._policy.meta.json",
              "Fichier caché: ._message.data.json",
              "Fichier caché: ._message.meta.json",
              "Fichier caché: ._header.data.json",
              "Fichier caché: ._header.meta.json",
              "Fichier caché: ._errors.data.json",
              "Fichier caché: ._errors.meta.json",
              "Fichier caché: ._contentmanager.data.json",
              "Fichier caché: ._contentmanager.meta.json",
              "Fichier caché: ._charset.data.json",
              "Fichier caché: ._charset.meta.json",
              "Fichier caché: .__policybase.data.json",
              "Fichier caché: .__policybase.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._utils.meta.json",
              "Fichier caché: ._feedparser.meta.json",
              "Fichier caché: ._parser.meta.json",
              "Fichier caché: ._abc.data.json",
              "Fichier caché: ._abc.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._importlib.data.json",
              "Fichier caché: ._importlib.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._tokens.meta.json",
              "Fichier caché: ._events.meta.json",
              "Fichier caché: ._error.meta.json",
              "Fichier caché: ._scanner.meta.json",
              "Fichier caché: ._parser.meta.json",
              "Fichier caché: ._reader.meta.json",
              "Fichier caché: ._nodes.meta.json",
              "Fichier caché: ._emitter.meta.json",
              "Fichier caché: ._resolver.meta.json",
              "Fichier caché: ._composer.meta.json",
              "Fichier caché: ._serializer.meta.json",
              "Fichier caché: .__yaml.meta.json",
              "Fichier caché: ._representer.meta.json",
              "Fichier caché: ._dumper.meta.json",
              "Fichier caché: ._loader.meta.json",
              "Fichier caché: ._cyaml.meta.json",
              "Fichier caché: ._constructor.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._shared_memory.data.json",
              "Fichier caché: ._shared_memory.meta.json",
              "Fichier caché: ._spawn.data.json",
              "Fichier caché: ._spawn.meta.json",
              "Fichier caché: ._process.data.json",
              "Fichier caché: ._process.meta.json",
              "Fichier caché: ._queues.data.json",
              "Fichier caché: ._queues.meta.json",
              "Fichier caché: ._connection.data.json",
              "Fichier caché: ._connection.meta.json",
              "Fichier caché: ._util.data.json",
              "Fichier caché: ._util.meta.json",
              "Fichier caché: ._popen_spawn_win32.data.json",
              "Fichier caché: ._popen_spawn_win32.meta.json",
              "Fichier caché: ._popen_fork.data.json",
              "Fichier caché: ._popen_fork.meta.json",
              "Fichier caché: ._reduction.data.json",
              "Fichier caché: ._reduction.meta.json",
              "Fichier caché: ._popen_spawn_posix.data.json",
              "Fichier caché: ._popen_spawn_posix.meta.json",
              "Fichier caché: ._popen_forkserver.data.json",
              "Fichier caché: ._popen_forkserver.meta.json",
              "Fichier caché: ._sharedctypes.data.json",
              "Fichier caché: ._sharedctypes.meta.json",
              "Fichier caché: ._pool.data.json",
              "Fichier caché: ._pool.meta.json",
              "Fichier caché: ._managers.data.json",
              "Fichier caché: ._managers.meta.json",
              "Fichier caché: ._synchronize.data.json",
              "Fichier caché: ._synchronize.meta.json",
              "Fichier caché: ._context.meta.json",
              "Fichier caché: ._context.data.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__endian.data.json",
              "Fichier caché: .__endian.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__version.meta.json",
              "Fichier caché: .__collections.meta.json",
              "Fichier caché: ._fields.meta.json",
              "Fichier caché: ._filepost.meta.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: .__base_connection.meta.json",
              "Fichier caché: ._connection.meta.json",
              "Fichier caché: ._response.meta.json",
              "Fichier caché: .__request_methods.meta.json",
              "Fichier caché: ._connectionpool.meta.json",
              "Fichier caché: ._poolmanager.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._socks.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._probe.meta.json",
              "Fichier caché: ._util.meta.json",
              "Fichier caché: ._wait.meta.json",
              "Fichier caché: ._ssl_match_hostname.meta.json",
              "Fichier caché: ._ssltransport.meta.json",
              "Fichier caché: ._url.meta.json",
              "Fichier caché: ._timeout.meta.json",
              "Fichier caché: ._response.meta.json",
              "Fichier caché: ._request.meta.json",
              "Fichier caché: ._retry.meta.json",
              "Fichier caché: ._proxy.meta.json",
              "Fichier caché: ._ssl_.meta.json",
              "Fichier caché: ._connection.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__base.data.json",
              "Fichier caché: .__base.meta.json",
              "Fichier caché: ._thread.data.json",
              "Fichier caché: ._thread.meta.json",
              "Fichier caché: ._process.data.json",
              "Fichier caché: ._process.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._cookies.meta.json",
              "Fichier caché: ._client.meta.json",
              "Fichier caché: ._cookiejar.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._parse.meta.json",
              "Fichier caché: ._response.meta.json",
              "Fichier caché: ._error.meta.json",
              "Fichier caché: ._request.meta.json",
              "Fichier caché: ._threads.data.json",
              "Fichier caché: ._threads.meta.json",
              "Fichier caché: ._exceptions.data.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: ._coroutines.data.json",
              "Fichier caché: ._coroutines.meta.json",
              "Fichier caché: ._mixins.data.json",
              "Fichier caché: ._mixins.meta.json",
              "Fichier caché: ._selector_events.data.json",
              "Fichier caché: ._selector_events.meta.json",
              "Fichier caché: ._subprocess.data.json",
              "Fichier caché: ._subprocess.meta.json",
              "Fichier caché: ._protocols.data.json",
              "Fichier caché: ._protocols.meta.json",
              "Fichier caché: ._streams.data.json",
              "Fichier caché: ._streams.meta.json",
              "Fichier caché: ._runners.data.json",
              "Fichier caché: ._runners.meta.json",
              "Fichier caché: ._queues.data.json",
              "Fichier caché: ._queues.meta.json",
              "Fichier caché: ._locks.data.json",
              "Fichier caché: ._locks.meta.json",
              "Fichier caché: ._unix_events.data.json",
              "Fichier caché: ._unix_events.meta.json",
              "Fichier caché: ._transports.data.json",
              "Fichier caché: ._transports.meta.json",
              "Fichier caché: ._tasks.data.json",
              "Fichier caché: ._tasks.meta.json",
              "Fichier caché: ._futures.data.json",
              "Fichier caché: ._futures.meta.json",
              "Fichier caché: ._base_events.data.json",
              "Fichier caché: ._base_events.meta.json",
              "Fichier caché: ._events.data.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._events.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__speedups.meta.json",
              "Fichier caché: .__native.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__identifier.meta.json",
              "Fichier caché: ._utils.meta.json",
              "Fichier caché: ._async_utils.meta.json",
              "Fichier caché: ._bccache.meta.json",
              "Fichier caché: ._nodes.meta.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: ._visitor.meta.json",
              "Fichier caché: ._debug.meta.json",
              "Fichier caché: ._lexer.meta.json",
              "Fichier caché: ._runtime.meta.json",
              "Fichier caché: ._loaders.meta.json",
              "Fichier caché: ._tests.meta.json",
              "Fichier caché: ._filters.meta.json",
              "Fichier caché: ._optimizer.meta.json",
              "Fichier caché: ._idtracking.meta.json",
              "Fichier caché: ._parser.meta.json",
              "Fichier caché: ._defaults.meta.json",
              "Fichier caché: ._compiler.meta.json",
              "Fichier caché: ._environment.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._sandbox.meta.json",
              "Fichier caché: ._ext.meta.json",
              "Fichier caché: ._hooks.meta.json",
              "Fichier caché: ._structures.meta.json",
              "Fichier caché: ._status_codes.meta.json",
              "Fichier caché: ._packages.meta.json",
              "Fichier caché: .___version__.meta.json",
              "Fichier caché: ._cookies.meta.json",
              "Fichier caché: ._compat.meta.json",
              "Fichier caché: ._auth.meta.json",
              "Fichier caché: ._adapters.meta.json",
              "Fichier caché: ._sessions.meta.json",
              "Fichier caché: ._models.meta.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: ._utils.meta.json",
              "Fichier caché: ._api.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._encoder.meta.json",
              "Fichier caché: ._decoder.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._audit.data.json",
              "Fichier caché: ._audit.meta.json",
              "Fichier caché: ._plugins_validator.data.json",
              "Fichier caché: ._i18n",
              "Fichier caché: ._generation.data.json",
              "Fichier caché: ._plugins_validator.meta.json",
              "Fichier caché: ._generation.meta.json",
              "Fichier caché: ._security.data.json",
              "Fichier caché: ._security.meta.json",
              "Fichier caché: ._onboarding.data.json",
              "Fichier caché: ._onboarding.meta.json",
              "Fichier caché: ._ai_robust.data.json",
              "Fichier caché: ._ai_robust.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._ci.data.json",
              "Fichier caché: ._analytics.data.json",
              "Fichier caché: ._project_importer.data.json",
              "Fichier caché: ._ci.meta.json",
              "Fichier caché: ._auto_tester.data.json",
              "Fichier caché: ._analytics.meta.json",
              "Fichier caché: ._auto_tester.meta.json",
              "Fichier caché: ._dashboard.data.json",
              "Fichier caché: ._ready_check.data.json",
              "Fichier caché: ._dashboard.meta.json",
              "Fichier caché: ._intelligent_auditor.data.json",
              "Fichier caché: ._auto_fixer.data.json",
              "Fichier caché: ._cleanup.data.json",
              "Fichier caché: ._auto_fixer.meta.json",
              "Fichier caché: ._profiles.data.json",
              "Fichier caché: ._profiles.meta.json",
              "Fichier caché: ._ready_check.meta.json",
              "Fichier caché: ._project_importer.meta.json",
              "Fichier caché: ._intelligent_auditor.meta.json",
              "Fichier caché: ._cleanup.meta.json",
              "Fichier caché: ._security_auditor.data.json",
              "Fichier caché: ._security_auditor.meta.json",
              "Fichier caché: ._auto_cicd.data.json",
              "Fichier caché: ._auto_cicd.meta.json",
              "Fichier caché: ._auto_cleaner.data.json",
              "Fichier caché: ._auto_cleaner.meta.json",
              "Fichier caché: ._code_linter.data.json",
              "Fichier caché: ._code_linter.meta.json",
              "Fichier caché: ._advanced_analytics.data.json",
              "Fichier caché: ._advanced_analytics.meta.json",
              "Fichier caché: ._auto_documenter.data.json",
              "Fichier caché: ._auto_documenter.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._fr.data.json",
              "Fichier caché: ._fr.meta.json",
              "Fichier caché: ._en.data.json",
              "Fichier caché: ._en.meta.json",
              "Fichier caché: ._base_templates.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._api_templates.data.json",
              "Fichier caché: ._api_templates.meta.json",
              "Fichier caché: ._project_classifier.meta.json",
              "Fichier caché: ._project_types.meta.json",
              "Fichier caché: .__globals.meta.json",
              "Fichier caché: .__expired_attrs_2_0.meta.json",
              "Fichier caché: ._version.meta.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: .__pytesttester.meta.json",
              "Fichier caché: .___config__.meta.json",
              "Fichier caché: ._dtypes.meta.json",
              "Fichier caché: .__array_api_info.meta.json",
              "Fichier caché: ._ctypeslib.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._matlib.meta.json",
              "Fichier caché: .__convertions.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._overrides.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._utils.meta.json",
              "Fichier caché: .__version.meta.json",
              "Fichier caché: ._introspect.meta.json",
              "Fichier caché: ._format.meta.json",
              "Fichier caché: .__datasource.meta.json",
              "Fichier caché: .__utils_impl.meta.json",
              "Fichier caché: .__arrayterator_impl.meta.json",
              "Fichier caché: .__array_utils_impl.meta.json",
              "Fichier caché: .__ufunclike_impl.meta.json",
              "Fichier caché: .__type_check_impl.meta.json",
              "Fichier caché: .__twodim_base_impl.meta.json",
              "Fichier caché: .__stride_tricks_impl.meta.json",
              "Fichier caché: .__shape_base_impl.meta.json",
              "Fichier caché: .__polynomial_impl.meta.json",
              "Fichier caché: .__npyio_impl.meta.json",
              "Fichier caché: .__nanfunctions_impl.meta.json",
              "Fichier caché: .__index_tricks_impl.meta.json",
              "Fichier caché: .__histograms_impl.meta.json",
              "Fichier caché: .__function_base_impl.meta.json",
              "Fichier caché: .__arraysetops_impl.meta.json",
              "Fichier caché: .__arraypad_impl.meta.json",
              "Fichier caché: ._stride_tricks.meta.json",
              "Fichier caché: ._npyio.meta.json",
              "Fichier caché: ._mixins.meta.json",
              "Fichier caché: ._array_utils.meta.json",
              "Fichier caché: .__scimath_impl.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._scimath.meta.json",
              "Fichier caché: .__shape.meta.json",
              "Fichier caché: .__char_codes.meta.json",
              "Fichier caché: .__nested_sequence.meta.json",
              "Fichier caché: .__nbit_base.meta.json",
              "Fichier caché: .__nbit.meta.json",
              "Fichier caché: .__dtype_like.meta.json",
              "Fichier caché: .__scalars.meta.json",
              "Fichier caché: .__add_docstring.meta.json",
              "Fichier caché: .__ufunc.meta.json",
              "Fichier caché: .__array_like.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__extended_precision.meta.json",
              "Fichier caché: .__callable.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__type_aliases.meta.json",
              "Fichier caché: ._shape_base.meta.json",
              "Fichier caché: ._numerictypes.meta.json",
              "Fichier caché: ._numeric.meta.json",
              "Fichier caché: ._multiarray.meta.json",
              "Fichier caché: ._einsumfunc.meta.json",
              "Fichier caché: ._arrayprint.meta.json",
              "Fichier caché: .__ufunc_config.meta.json",
              "Fichier caché: .__asarray.meta.json",
              "Fichier caché: ._fromnumeric.meta.json",
              "Fichier caché: ._function_base.meta.json",
              "Fichier caché: ._records.meta.json",
              "Fichier caché: .__internal.meta.json",
              "Fichier caché: ._strings.meta.json",
              "Fichier caché: ._defchararray.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._defmatrix.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._extras.meta.json",
              "Fichier caché: ._core.meta.json",
              "Fichier caché: ._mrecords.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__polytypes.meta.json",
              "Fichier caché: ._polyutils.meta.json",
              "Fichier caché: .__polybase.meta.json",
              "Fichier caché: ._laguerre.meta.json",
              "Fichier caché: ._hermite_e.meta.json",
              "Fichier caché: ._hermite.meta.json",
              "Fichier caché: ._legendre.meta.json",
              "Fichier caché: ._chebyshev.meta.json",
              "Fichier caché: ._polynomial.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._bit_generator.meta.json",
              "Fichier caché: ._mtrand.meta.json",
              "Fichier caché: .__sfc64.meta.json",
              "Fichier caché: .__philox.meta.json",
              "Fichier caché: .__pcg64.meta.json",
              "Fichier caché: .__mt19937.meta.json",
              "Fichier caché: .__generator.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__helper.meta.json",
              "Fichier caché: .__pocketfft.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__linalg.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._version.meta.json",
              "Fichier caché: ._api.meta.json",
              "Fichier caché: ._macos.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__version.meta.json",
              "Fichier caché: .__exceptions.meta.json",
              "Fichier caché: .__suppress.meta.json",
              "Fichier caché: .__formatting.meta.json",
              "Fichier caché: .__catch.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__warnings.meta.json",
              "Fichier caché: .__version.meta.json",
              "Fichier caché: .__tracing.meta.json",
              "Fichier caché: .__result.meta.json",
              "Fichier caché: .__hooks.meta.json",
              "Fichier caché: .__callers.meta.json",
              "Fichier caché: .__manager.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .__structures.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._version.meta.json",
              "Fichier caché: .__elffile.meta.json",
              "Fichier caché: .__musllinux.meta.json",
              "Fichier caché: .__manylinux.meta.json",
              "Fichier caché: ._tags.meta.json",
              "Fichier caché: ._utils.meta.json",
              "Fichier caché: ._specifiers.meta.json",
              "Fichier caché: .__tokenizer.meta.json",
              "Fichier caché: .__parser.meta.json",
              "Fichier caché: ._markers.meta.json",
              "Fichier caché: ._requirements.meta.json",
              "Fichier caché: .__version.meta.json",
              "Fichier caché: ._tracemalloc.meta.json",
              "Fichier caché: .__argcomplete.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._stash.meta.json",
              "Fichier caché: ._freeze_support.meta.json",
              "Fichier caché: ._compat.meta.json",
              "Fichier caché: ._warning_types.meta.json",
              "Fichier caché: ._deprecated.meta.json",
              "Fichier caché: ._outcomes.meta.json",
              "Fichier caché: ._scope.meta.json",
              "Fichier caché: ._pathlib.meta.json",
              "Fichier caché: ._python_api.meta.json",
              "Fichier caché: ._timing.meta.json",
              "Fichier caché: ._hookspec.meta.json",
              "Fichier caché: ._raises.meta.json",
              "Fichier caché: ._nodes.meta.json",
              "Fichier caché: ._reports.meta.json",
              "Fichier caché: ._pytester_assertions.meta.json",
              "Fichier caché: ._terminal.meta.json",
              "Fichier caché: ._runner.meta.json",
              "Fichier caché: ._main.meta.json",
              "Fichier caché: ._fixtures.meta.json",
              "Fichier caché: ._recwarn.meta.json",
              "Fichier caché: ._python.meta.json",
              "Fichier caché: ._monkeypatch.meta.json",
              "Fichier caché: ._capture.meta.json",
              "Fichier caché: ._cacheprovider.meta.json",
              "Fichier caché: ._tmpdir.meta.json",
              "Fichier caché: ._logging.meta.json",
              "Fichier caché: ._doctest.meta.json",
              "Fichier caché: ._debugging.meta.json",
              "Fichier caché: ._pytester.meta.json",
              "Fichier caché: ._legacypath.meta.json",
              "Fichier caché: ._warnings.meta.json",
              "Fichier caché: ._unraisableexception.meta.json",
              "Fichier caché: ._helpconfig.meta.json",
              "Fichier caché: ._pprint.meta.json",
              "Fichier caché: ._wcwidth.meta.json",
              "Fichier caché: ._saferepr.meta.json",
              "Fichier caché: ._terminalwriter.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._expression.meta.json",
              "Fichier caché: ._structures.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: ._findpaths.meta.json",
              "Fichier caché: ._compat.meta.json",
              "Fichier caché: ._argparsing.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._source.meta.json",
              "Fichier caché: ._code.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._util.meta.json",
              "Fichier caché: ._truncate.meta.json",
              "Fichier caché: ._rewrite.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._exceptions.meta.json",
              "Fichier caché: .__parse.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._mock.data.json",
              "Fichier caché: ._mock.meta.json",
              "Fichier caché: ._result.data.json",
              "Fichier caché: ._result.meta.json",
              "Fichier caché: .__log.data.json",
              "Fichier caché: .__log.meta.json",
              "Fichier caché: ._case.data.json",
              "Fichier caché: ._case.meta.json",
              "Fichier caché: ._suite.data.json",
              "Fichier caché: ._suite.meta.json",
              "Fichier caché: ._signals.data.json",
              "Fichier caché: ._signals.meta.json",
              "Fichier caché: ._async_case.data.json",
              "Fichier caché: ._async_case.meta.json",
              "Fichier caché: ._runner.data.json",
              "Fichier caché: ._runner.meta.json",
              "Fichier caché: ._loader.data.json",
              "Fichier caché: ._loader.meta.json",
              "Fichier caché: ._main.data.json",
              "Fichier caché: ._main.meta.json",
              "Fichier caché: .___init__.data.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: .___init__.meta.json",
              "Fichier caché: ._nodeids",
              "Fichier caché: ._lastfailed",
              "Fichier caché: .github",
              "Fichier caché: .keep",
              "Fichier caché: .keep",
              "Fichier caché: .keep",
              "Fichier caché: ._index.html",
              "Fichier caché: .keep",
              "Fichier caché: ._alias.sh",
              "Fichier caché: .keep",
              "Fichier caché: ._generation.py",
              "Fichier caché: ._i18n",
              "Fichier caché: ._plugins_validator.py",
              "Fichier caché: ._ready_check.py",
              "Fichier caché: ._project_importer.py",
              "Fichier caché: ._auto_fixer.py",
              "Fichier caché: ._profiles.py",
              "Fichier caché: ._analytics.py",
              "Fichier caché: ._intelligent_auditor.py",
              "Fichier caché: ._auto_cleaner.py",
              "Fichier caché: ._auto_documenter.py",
              "Fichier caché: ._auto_tester.py",
              "Fichier caché: ._auto_cicd.py",
              "Fichier caché: ._athalia_orchestrator.py",
              "Fichier caché: ._code_linter.py",
              "Fichier caché: ._security_auditor.py",
              "Fichier caché: ._advanced_analytics.py",
              "Fichier caché: ._auto_documenter_fixed.py",
              "Fichier caché: ._project_classifier.py",
              "Fichier caché: ._project_types.py",
              "Fichier caché: ._project_classifier.cpython-310.pyc",
              "Fichier caché: ._project_types.cpython-310.pyc",
              "Fichier caché: ._base_templates.py",
              "Fichier caché: .___init__.py",
              "Fichier caché: ._api_templates.py",
              "Fichier caché: .___init__.cpython-310.pyc",
              "Fichier caché: ._base_templates.cpython-310.pyc",
              "Fichier caché: ._api_templates.cpython-310.pyc",
              "Fichier caché: ._generation.cpython-310.pyc",
              "Fichier caché: ._plugins_validator.cpython-310.pyc",
              "Fichier caché: ._ready_check.cpython-310.pyc",
              "Fichier caché: ._project_importer.cpython-310.pyc",
              "Fichier caché: ._auto_fixer.cpython-310.pyc",
              "Fichier caché: ._profiles.cpython-310.pyc",
              "Fichier caché: ._analytics.cpython-310.pyc",
              "Fichier caché: ._athalia_orchestrator.cpython-310.pyc",
              "Fichier caché: ._intelligent_auditor.cpython-310.pyc",
              "Fichier caché: ._auto_cleaner.cpython-310.pyc",
              "Fichier caché: ._auto_documenter.cpython-310.pyc",
              "Fichier caché: ._auto_tester.cpython-310.pyc",
              "Fichier caché: ._auto_cicd.cpython-310.pyc",
              "Fichier caché: ._code_linter.cpython-310.pyc",
              "Fichier caché: ._security_auditor.cpython-310.pyc",
              "Fichier caché: ._advanced_analytics.cpython-310.pyc",
              "Fichier caché: ._cli.cpython-310.pyc",
              "Fichier caché: ._fr.py",
              "Fichier caché: ._en.py",
              "Fichier caché: .___init__.py",
              "Fichier caché: .___pycache__",
              "Fichier caché: .___init__.cpython-310.pyc",
              "Fichier caché: ._fr.cpython-310.pyc",
              "Fichier caché: ._en.cpython-310.pyc",
              "Fichier caché: ._index",
              "Fichier caché: ._FETCH_HEAD",
              "Fichier caché: ._COMMIT_EDITMSG",
              "Fichier caché: ._main",
              "Fichier caché: ._main",
              "Fichier caché: ._9de29bb2d1d6434b8b29ae775ad8c2e48c5391",
              "Fichier caché: ._217d5c42a573484f3f833ce2ecadde57c42c5e",
              "Fichier caché: ._9777182a350e39a1e5c65fe683782bde7c975c",
              "Fichier caché: ._fe30b81865b10f3eacda1ec7030d1c041d3537",
              "Fichier caché: ._4ca1c4acdd709c132e56dd9932259238e3c5a0",
              "Fichier caché: ._300123d0baeb2bf0edf5e27556c9ea5223318c",
              "Fichier caché: ._b7b41756679f691235005bc230a6185525eb49",
              "Fichier caché: ._72af19a866c293b12a33e523af4ce0b1ac8601",
              "Fichier caché: ._5469034565f990220cdf8bf9f6d81c90998b01",
              "Fichier caché: ._730b9cb3e6c515a12a09c4b82fb63f7a79c280",
              "Fichier caché: ._c9fad5532bec523a7d358254d97f176272a260",
              "Fichier caché: ._152c36d3259c49d41ecf21115c081215e20de9",
              "Fichier caché: ._c3d8243ca1b28a4cc47a6bf835c50f4343be6a",
              "Fichier caché: ._45a1323f9c4c3b0acb2086b04ef6d986f3e3a4",
              "Fichier caché: ._de15ed4c98213e485ff6ddd6f27da80a476c5e",
              "Fichier caché: ._477766e55902d74041d110503675cd4047f737",
              "Fichier caché: ._aa6adb88d48836ba21ec0791382130a6a90c85",
              "Fichier caché: ._351e95e48a325b72b5e199847059b0b9001754",
              "Fichier caché: ._ae0a28effcd9547aed3a0fa45336e0de65d68b",
              "Fichier caché: ._6d4116544fbaa02f513ecb30a59bd25d00cea0",
              "Fichier caché: ._7c56ce6f3adacedc9134322ad261dc21246224",
              "Fichier caché: ._833de6f11de8667c01bafc23aee45d0cc01e09",
              "Fichier caché: ._bff8435243866046d56e5bd27bb36e0e2f89f1",
              "Fichier caché: ._1bf1378e22c3f34e5dc6b7dfab8a625c3c1aff",
              "Fichier caché: ._5d2c7c544d5e98363aeeaa7f8649cf10e8591d",
              "Fichier caché: ._03d588b329602fdd7f8f18ccc4bd42a07e9cc0",
              "Fichier caché: ._16dbbb8b692a3e5c7c0a502ad7bddf9dff50b7",
              "Fichier caché: ._ffb1707159ad41698e288f51bb2a293567f630",
              "Fichier caché: ._997465770a86c695e13b47f85c3d085ba193cb",
              "Fichier caché: ._a73ef425fa39809839233ae3d56ee26d6ef280",
              "Fichier caché: ._1a8077bd4589bb415b9054c42bde1dc4f8ba9f",
              "Fichier caché: ._6c2d7e82fda7df2f436ad5132801c8a745c868",
              "Fichier caché: ._9f5eae9bccafbac7137593e287c8d64ddf47da",
              "Fichier caché: ._28bb8e8926464457662d7b44eddb7fbf8e5e61",
              "Fichier caché: ._207ccc4f28aa73e4955e675829c102ce97aaeb",
              "Fichier caché: ._26a6c1c58e9292c7751f3fe96eb0406dd9228f",
              "Fichier caché: ._7625db738a0c2f23e664ac7c5e0cb61b72637a",
              "Fichier caché: ._42fa76ed8d25ac74c2637de2a82a63de6323f6",
              "Fichier caché: ._f813c6c55043920fbc8273f913e2d29ac0a6c0",
              "Fichier caché: ._fb0cc6a386648602a0b53ab39788f062002c0c",
              "Fichier caché: ._62e90fc11e68a0f1ebcb0bd00e864ee4c97443",
              "Fichier caché: ._5d48f08b5956adddabb4754fd58fa4181c357f",
              "Fichier caché: ._aaadb60c816b31ebbe66c635ea7ac5fdb0313f",
              "Fichier caché: ._baaf03295ca4504129ad326dd5a0668b03e513",
              "Fichier caché: ._9be2061b6e550fab24a1558c080c71f4a6a952",
              "Fichier caché: ._f643fc97fa622eb9b51f2356f5adaa49a16ed1",
              "Fichier caché: ._a1cdbcc2c60ba2530411eb8e7c67cc152b453b",
              "Fichier caché: ._6a3955eff998800ee926d8ff0c8fef0f2cfef8",
              "Fichier caché: ._4bf37ba3911c439f93a6c9467dff07ce95fcc1",
              "Fichier caché: ._8dad92d8c04fa7797c26162b3f088ee4868400",
              "Fichier caché: ._c0ab62940ce6c401f865b3198d10b6021058cc",
              "Fichier caché: ._ef38d757e3a117f6cf71c8313b3c0caa269348",
              "Fichier caché: ._fdbb3538f517e3c20371de7ad2d1022e0f67e4",
              "Fichier caché: ._497d8cef4d0eb5fe66c014543a7a7ef44e3b55",
              "Fichier caché: ._e07dd09a5e44b6adecd573e11879624e201fb8",
              "Fichier caché: ._7f01e8c23ecc4e55fefdaaf54def1809be065f",
              "Fichier caché: ._6ca38d08eccf905c2e1c7d51d48bca2f26613d",
              "Fichier caché: ._5b2651bbcd6f65adbb53a25578508eec656150",
              "Fichier caché: ._eec82099d49d812ff736bcb35847a4b48f36d7",
              "Fichier caché: ._907c6b1d2006cccb292628fad4ce5ee5827aac",
              "Fichier caché: ._02fc19d9b058424fc7ead6084731516ea35368",
              "Fichier caché: ._6944e0194f60e16ccc8ea5241c871355bb9588",
              "Fichier caché: ._ed4443840a585db36fe41babf591f43b7ecbd9",
              "Fichier caché: ._0197137f007b3abeab1acf24ad889b6fc4039d",
              "Fichier caché: ._08fc4d1a84696ad581a3e765af87c5fd8b27e5",
              "Fichier caché: ._HEAD",
              "Fichier caché: ._main",
              "Fichier caché: ._main",
              "Fichier caché: ._dry_run_report.log"
            ],
            "status": "⚠️ Améliorable"
          },
          "modularity": {
            "modules": [
              "plugins",
              "athalia_core",
              "athalia_core/classification",
              "athalia_core/templates",
              "athalia_core/i18n",
              "athalia_core/plugins"
            ],
            "count": 6,
            "status": "✅ Modulaire"
          }
        },
        "recommendations": [
          "🔴 Projet nécessite une refactorisation majeure",
          "🔒 Corriger les vulnérabilités de sécurité détectées",
          "📚 Améliorer la documentation README",
          "⚡ Réduire la complexité cyclomatique",
          "📁 Réorganiser la structure du projet"
        ],
        "score": 45
      },
      "summary": "\n============================================================\n🔍 RAPPORT D'AUDIT INTELLIGENT - \n============================================================\n\n📊 SCORE GLOBAL: 45/100\n\n📋 INFORMATIONS PROJET:\n   • Type: Python\n   • Langages: Python\n   • Taille: 8414 fichiers\n   • Dernière modification: 2025-07-17 07:17:23\n\n🔒 SÉCURITÉ: 12 vulnérabilités détectées\n📚 DOCUMENTATION: ⚠️ Incomplet\n🧪 TESTS: ✅ Bon\n⚡ PERFORMANCE: ⚠️ Optimisable\n📁 STRUCTURE: ⚠️ À améliorer\n\n💡 RECOMMANDATIONS:\n   • 🔴 Projet nécessite une refactorisation majeure\n   • 🔒 Corriger les vulnérabilités de sécurité détectées\n   • 📚 Améliorer la documentation README\n   • ⚡ Réduire la complexité cyclomatique\n   • 📁 Réorganiser la structure du projet\n\n============================================================\n"
    },
    "linting": {
      "flake8": "multiprocessing.pool.RemoteTraceback: \n\"\"\"\nTraceback (most recent call last):\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/multiprocessing/pool.py\", line 125, in worker\n    result = (True, func(*args, **kwds))\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/checker.py\", line 82, in _mp_run\n    ).run_checks()\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/checker.py\", line 526, in run_checks\n    self.run_ast_checks()\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/checker.py\", line 418, in run_ast_checks\n    ast = self.processor.build_ast()\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/processor.py\", line 240, in build_ast\n    return ast.parse(\"\".join(self.lines))\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/ast.py\", line 50, in parse\n    return compile(source, filename, mode, flags,\nValueError: source code string cannot contain null bytes\n\"\"\"\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/Volumes/T7/arkalia-luna-venv/bin/flake8\", line 8, in <module>\n    sys.exit(main())\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/main/cli.py\", line 23, in main\n    app.run(argv)\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/main/application.py\", line 198, in run\n    self._run(argv)\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/main/application.py\", line 187, in _run\n    self.run_checks()\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/main/application.py\", line 103, in run_checks\n    self.file_checker_manager.run()\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/checker.py\", line 235, in run\n    self.run_parallel()\n  File \"/Volumes/T7/arkalia-luna-venv/lib/python3.10/site-packages/flake8/checker.py\", line 204, in run_parallel\n    self.results = list(pool.imap_unordered(_mp_run, self.filenames))\n  File \"/opt/homebrew/opt/pyenv/versions/3.10.14/lib/python3.10/multiprocessing/pool.py\", line 873, in next\n    raise value\nValueError: source code string cannot contain null bytes\n",
      "black": "would reformat /Volumes/T7/athalia-dev-setup/VioletTwistAI/ai_player/main.py\nwould reformat /Volumes/T7/athalia-dev-setup/VioletTwistAI/main.py\nwould reformat /Volumes/T7/athalia-dev-setup/VioletTwistAI/violette_game/main.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/__init__.py\nwould reformat /Volumes/T7/athalia-dev-setup/VioletTwistAI/tests/test_booster_ia_VioletTwistAI.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia.py\nwould reformat /Volumes/T7/athalia-dev-setup/VioletTwistAI/agents/ath_context_prompt.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/analytics.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/ai_robust.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/advanced_analytics.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/auto_fixer.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/classification/__init__.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/ci.py\nwould reformat /Volumes/T7/athalia-dev-setup/agents/ath_context_prompt.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/cleanup.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/auto_documenter_fixed.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/classification/project_types.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/auto_cleaner.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/classification/project_classifier.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/i18n/__init__.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/i18n/en.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/cli.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/i18n/fr.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/dashboard.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/onboarding.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/auto_cicd.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/auto_tester.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/athalia_orchestrator.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/plugins_validator.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/plugins_manager.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/ready_check.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/audit.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/templates/__init__.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/profiles.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/templates/api_templates.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/auto_documenter.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/templates/artistic_templates.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/code_linter.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/security.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/templates/base_templates.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/main.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/security_auditor.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_new.py\nwould reformat /Volumes/T7/athalia-dev-setup/demo_athalia.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_unified.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/project_importer.py\nwould reformat /Volumes/T7/athalia-dev-setup/plugins/hello_plugin.py\nwould reformat /Volumes/T7/athalia-dev-setup/plugins/export_docker_plugin.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_quick_start.py\nwould reformat /Volumes/T7/athalia-dev-setup/modules/dashboard_unifie_simple.py\nwould reformat /Volumes/T7/athalia-dev-setup/setup.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/integration/test_cli_robustesse.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/integration/test_yaml_validity.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/integration/test_end_to_end.py\nwould reformat /Volumes/T7/athalia-dev-setup/modules/dashboard_unifie.py\nwould reformat /Volumes/T7/athalia-dev-setup/test_final.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ai_robust.py\nwould reformat /Volumes/T7/athalia-dev-setup/modules/profils_utilisateur_avances.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ath_context_prompt_semantic.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ath_dev_boost_menu.py\nwould reformat /Volumes/T7/athalia-dev-setup/modules/orchestrateur_principal.py\nwould reformat /Volumes/T7/athalia-dev-setup/test_unified.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ath_dev_boost.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_auto_fixer.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ci.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_cleanup.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ai_robust_integration.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_continue_models.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_auto_correction_avancee.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_analytics.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_dashboard.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_onboarding.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_audit_intelligent.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_plugins.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_i18n.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_profiles.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_dashboard_unifie.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_dashboard_unifie_simple.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_ready_check.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_athalia_orchestrator.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_security.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_plugins_validator.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/intelligent_auditor.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_generation.py\nwould reformat /Volumes/T7/athalia-dev-setup/modules/auto_correction_avancee.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_project_importer.py\nwould reformat /Volumes/T7/athalia-dev-setup/tests/test_profils_utilisateur_avances.py\nwould reformat /Volumes/T7/athalia-dev-setup/athalia_core/generation.py\n\nOh no! 💥 💔 💥\n88 files would be reformatted, 2 files would be left unchanged.\n",
      "isort": "Skipped 2 files\nERROR: /Volumes/T7/athalia-dev-setup/athalia.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/setup.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_new.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_unified.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/test_unified.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/test_final.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/demo_athalia.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_quick_start.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/plugins/export_docker_plugin.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ath_context_prompt_semantic.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ath_dev_boost.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ath_dev_boost_menu.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_audit_intelligent.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ci.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ready_check.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_plugins.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_cleanup.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_continue_models.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_analytics.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_dashboard.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_generation.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ai_robust.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_onboarding.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_security.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_plugins_validator.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_ai_robust_integration.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_project_importer.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_auto_fixer.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_profiles.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_athalia_orchestrator.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_auto_correction_avancee.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_profils_utilisateur_avances.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_dashboard_unifie.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/test_dashboard_unifie_simple.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/integration/test_end_to_end.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/integration/test_cli_robustesse.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/tests/integration/test_yaml_validity.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/modules/auto_correction_avancee.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/modules/profils_utilisateur_avances.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/modules/dashboard_unifie.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/modules/dashboard_unifie_simple.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/modules/orchestrateur_principal.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/VioletTwistAI/tests/test_booster_ia_VioletTwistAI.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/VioletTwistAI/agents/ath_context_prompt.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/agents/ath_context_prompt.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/ci.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/cleanup.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/dashboard.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/generation.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/main.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/analytics.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/onboarding.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/audit.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/security.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/plugins_manager.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/plugins_validator.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/ai_robust.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/cli.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/ready_check.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/project_importer.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/auto_fixer.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/intelligent_auditor.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/auto_cleaner.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/auto_documenter.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/auto_tester.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/auto_cicd.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/athalia_orchestrator.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/code_linter.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/security_auditor.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/advanced_analytics.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/auto_documenter_fixed.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/classification/project_types.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/classification/project_classifier.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/templates/artistic_templates.py Imports are incorrectly sorted and/or formatted.\nERROR: /Volumes/T7/athalia-dev-setup/athalia_core/templates/base_templates.py Imports are incorrectly sorted and/or formatted.\n",
      "mypy": "VioletTwistAI/violette_game/main.py: error: Duplicate module named \"main\" (also at \"./VioletTwistAI/ai_player/main.py\")\nVioletTwistAI/violette_game/main.py: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#mapping-file-paths-to-modules for more info\nVioletTwistAI/violette_game/main.py: note: Common resolutions include: a) using `--exclude` to avoid checking one of them, b) adding `__init__.py` somewhere, c) using `--explicit-package-bases` or adjusting MYPYPATH\nFound 1 error in 1 file (errors prevented further checking)\n",
      "bandit": "usage: bandit [-h] [-r] [-a {file,vuln}] [-n CONTEXT_LINES] [-c CONFIG_FILE]\n              [-p PROFILE] [-t TESTS] [-s SKIPS]\n              [-l | --severity-level {all,low,medium,high}]\n              [-i | --confidence-level {all,low,medium,high}]\n              [-f {csv,custom,html,json,screen,txt,xml,yaml}]\n              [--msg-template MSG_TEMPLATE] [-o [OUTPUT_FILE]] [-v] [-d] [-q]\n              [--ignore-nosec] [-x EXCLUDED_PATHS] [-b BASELINE]\n              [--ini INI_PATH] [--exit-zero] [--version]\n              [targets ...]\nbandit: error: argument -f/--format: invalid choice: 'short' (choose from 'csv', 'custom', 'html', 'json', 'screen', 'txt', 'xml', 'yaml')\n",
      "auto_fix": false,
      "score": 60,
      "errors": [
        "Flake8: erreurs détectées",
        "Black: formatage non conforme",
        "isort: imports non triés"
      ],
      "warnings": [
        "Mypy: problèmes de typage détectés",
        "Bandit: vulnérabilités détectées"
      ],
      "fixes": [],
      "success": false
    },
    "security": {
      "bandit": "usage: bandit [-h] [-r] [-a {file,vuln}] [-n CONTEXT_LINES] [-c CONFIG_FILE]\n              [-p PROFILE] [-t TESTS] [-s SKIPS]\n              [-l | --severity-level {all,low,medium,high}]\n              [-i | --confidence-level {all,low,medium,high}]\n              [-f {csv,custom,html,json,screen,txt,xml,yaml}]\n              [--msg-template MSG_TEMPLATE] [-o [OUTPUT_FILE]] [-v] [-d] [-q]\n              [--ignore-nosec] [-x EXCLUDED_PATHS] [-b BASELINE]\n              [--ini INI_PATH] [--exit-zero] [--version]\n              [targets ...]\nbandit: error: argument -f/--format: invalid choice: 'short' (choose from 'csv', 'custom', 'html', 'json', 'screen', 'txt', 'xml', 'yaml')\n",
      "safety": "\n\n+===========================================================================================================================================================================================+\n\n\nDEPRECATED: this command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.\n\n\nWe highly encourage switching to the new `scan` command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.\n\n\n+===========================================================================================================================================================================================+\n\n\n+==============================================================================+\n\n                                   /$$$$$$            /$$\n                                  /$$__  $$          | $$\n               /$$$$$$$  /$$$$$$ | $$  \\__//$$$$$$  /$$$$$$   /$$   /$$\n              /$$_____/ |____  $$| $$$$   /$$__  $$|_  $$_/  | $$  | $$\n             |  $$$$$$   /$$$$$$$| $$_/  | $$$$$$$$  | $$    | $$  | $$\n              \\____  $$ /$$__  $$| $$    | $$_____/  | $$ /$$| $$  | $$\n              /$$$$$$$/|  $$$$$$$| $$    |  $$$$$$$  |  $$$$/|  $$$$$$$\n             |_______/  \\_______/|__/     \\_______/   \\___/   \\____  $$\n                                                              /$$  | $$\n                                                             |  $$$$$$/\n      by safetycli.com                                        \\______/\n\n+==============================================================================+\n\n ANNOUNCEMENTS\n\n  * Warning: pyyaml, requests, jinja2, click, rich, psutil, anthropic, openai, \n    pytest, pytest-cov, pytest-mock, mkdocs, mkdocs-material, streamlit, \n    plotly, matplotlib, python-dotenv, tqdm, colorama, black, flake8 and mypy \n    are unpinned. Safety by default does not report on potential \n    vulnerabilities in unpinned packages. It is recommended to pin your \n    dependencies unless this is a library meant for distribution. To learn more \n    about reporting these, specifier range handling, and options for scanning \n    unpinned packages visit https://docs.pyup.io/docs/safety-range-specs \n\n+==============================================================================+\n\n REPORT \n\n  Safety v3.5.2 is scanning for Vulnerabilities...\n  Scanning dependencies in your files:\n\n  -> requirements.txt\n\n  Using open-source vulnerability database\n  Found and scanned 22 packages\n  Timestamp 2025-07-17 07:18:02\n  0 vulnerabilities reported\n  13 vulnerabilities ignored\n\n+==============================================================================+\n VULNERABILITIES FOUND\n+==============================================================================+\n\n-> Vulnerability may be present given that your black install specifier is\n   >=23.0.0\n   Vulnerability ID: 66742\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/66742/97c\n\n\n-> Vulnerability may be present given that your tqdm install specifier is\n   >=4.65.0\n   Vulnerability ID: 70790\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/70790/97c\n\n\n-> Vulnerability may be present given that your streamlit install specifier is\n   >=1.28.0\n   Vulnerability ID: 50437\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/50437/97c\n\n\n-> Vulnerability may be present given that your mkdocs-material install\n   specifier is >=9.0.0\n   Vulnerability ID: 59587\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/59587/97c\n\n\n-> Vulnerability may be present given that your mkdocs-material install\n   specifier is >=9.0.0\n   Vulnerability ID: 72715\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/72715/97c\n\n\n-> Vulnerability may be present given that your mkdocs-material install\n   specifier is >=9.0.0\n   Vulnerability ID: 64496\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/64496/97c\n\n\n-> Vulnerability may be present given that your jinja2 install specifier is\n   >=3.1.0\n   Vulnerability ID: 64227\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/64227/97c\n\n\n-> Vulnerability may be present given that your jinja2 install specifier is\n   >=3.1.0\n   Vulnerability ID: 71591\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/71591/97c\n\n\n-> Vulnerability may be present given that your jinja2 install specifier is\n   >=3.1.0\n   Vulnerability ID: 75976\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/75976/97c\n\n\n-> Vulnerability may be present given that your jinja2 install specifier is\n   >=3.1.0\n   Vulnerability ID: 76378\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/76378/97c\n\n\n-> Vulnerability may be present given that your jinja2 install specifier is\n   >=3.1.0\n   Vulnerability ID: 74735\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/74735/97c\n\n\n-> Vulnerability may be present given that your requests install specifier is\n   >=2.28.0\n   Vulnerability ID: 58755\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/58755/97c\n\n\n-> Vulnerability may be present given that your requests install specifier is\n   >=2.28.0\n   Vulnerability ID: 71064\n   This vulnerability is being ignored.\n   Reason: This vulnerability is being ignored due to the 'ignore-\n   unpinned-requirements' flag (default True). To change this, set 'ignore-\n   unpinned-requirements' to False under 'security' in your policy file. See\n   https://docs.pyup.io/docs/safety-20-policy-file for more information.\n   For more information about this vulnerability, visit\n   https://data.safetycli.com/v/71064/97c\n\n\n+==============================================================================+\n\n Scan was completed. 0 vulnerabilities were reported. 13 vulnerabilities from 6 \n packages were ignored. \n\n+==============================================================================+\n\n\n+===========================================================================================================================================================================================+\n\n\nDEPRECATED: this command (`check`) has been DEPRECATED, and will be unsupported beyond 01 June 2024.\n\n\nWe highly encourage switching to the new `scan` command which is easier to use, more powerful, and can be set up to mimic the deprecated command if required.\n\n\n+===========================================================================================================================================================================================+\n\n\n",
      "secrets": [
        {
          "file": "athalia_core/security_auditor.py",
          "secret": "-----BEGIN PRIVATE KEY-----",
          "type": "Private Key"
        }
      ],
      "score": 30,
      "vulns": [
        "Bandit: vulnérabilités détectées",
        "Safety: dépendances à risque détectées",
        "Secrets détectés dans le code"
      ],
      "recommendations": [
        "Corrigez les vulnérabilités Bandit (voir rapport).",
        "Mettez à jour les dépendances à risque (voir rapport Safety).",
        "Retirez les secrets du code source et utilisez des variables d'environnement."
      ],
      "success": false
    },
    "analytics": {
      "metrics": {
        "complexity": {
          "files": {
            "athalia.py": 19,
            "setup.py": 3,
            "athalia_new.py": 13,
            "athalia_unified.py": 25,
            "test_unified.py": 14,
            "test_final.py": 16,
            "demo_athalia.py": 12,
            "athalia_quick_start.py": 43,
            "plugins/__init__.py": 1,
            "plugins/hello_plugin.py": 1,
            "plugins/export_docker_plugin.py": 4,
            "tests/test_ath_context_prompt_semantic.py": 2,
            "tests/test_ath_dev_boost.py": 4,
            "tests/test_ath_dev_boost_menu.py": 4,
            "tests/test_audit_intelligent.py": 3,
            "tests/test_ci.py": 1,
            "tests/test_ready_check.py": 2,
            "tests/test_plugins.py": 1,
            "tests/test_cleanup.py": 1,
            "tests/test_continue_models.py": 3,
            "tests/test_analytics.py": 6,
            "tests/test_dashboard.py": 1,
            "tests/test_i18n.py": 1,
            "tests/test_generation.py": 2,
            "tests/test_ai_robust.py": 4,
            "tests/test_onboarding.py": 1,
            "tests/test_security.py": 1,
            "tests/test_plugins_validator.py": 2,
            "tests/test_ai_robust_integration.py": 6,
            "tests/test_project_importer.py": 2,
            "tests/test_auto_fixer.py": 1,
            "tests/test_profiles.py": 1,
            "tests/test_athalia_orchestrator.py": 5,
            "tests/test_auto_correction_avancee.py": 2,
            "tests/test_profils_utilisateur_avances.py": 2,
            "tests/test_dashboard_unifie.py": 2,
            "tests/test_dashboard_unifie_simple.py": 2,
            "tests/integration/test_end_to_end.py": 4,
            "tests/integration/test_cli_robustesse.py": 1,
            "tests/integration/test_yaml_validity.py": 6,
            "modules/auto_correction_avancee.py": 86,
            "modules/profils_utilisateur_avances.py": 35,
            "modules/dashboard_unifie.py": 28,
            "modules/dashboard_unifie_simple.py": 22,
            "modules/orchestrateur_principal.py": 21,
            "VioletTwistAI/main.py": 1,
            "VioletTwistAI/tests/test_booster_ia_VioletTwistAI.py": 5,
            "VioletTwistAI/violette_game/main.py": 2,
            "VioletTwistAI/ai_player/main.py": 2,
            "VioletTwistAI/agents/ath_context_prompt.py": 28,
            "agents/ath_context_prompt.py": 28,
            "athalia_core/__init__.py": 1,
            "athalia_core/ci.py": 5,
            "athalia_core/cleanup.py": 21,
            "athalia_core/dashboard.py": 7,
            "athalia_core/generation.py": 118,
            "athalia_core/main.py": 45,
            "athalia_core/analytics.py": 17,
            "athalia_core/onboarding.py": 1,
            "athalia_core/audit.py": 91,
            "athalia_core/security.py": 8,
            "athalia_core/plugins_manager.py": 9,
            "athalia_core/plugins_validator.py": 12,
            "athalia_core/ai_robust.py": 33,
            "athalia_core/cli.py": 15,
            "athalia_core/ready_check.py": 5,
            "athalia_core/project_importer.py": 39,
            "athalia_core/auto_fixer.py": 12,
            "athalia_core/profiles.py": 1,
            "athalia_core/intelligent_auditor.py": 122,
            "athalia_core/auto_cleaner.py": 68,
            "athalia_core/auto_documenter.py": 78,
            "athalia_core/auto_tester.py": 42,
            "athalia_core/auto_cicd.py": 37,
            "athalia_core/athalia_orchestrator.py": 62,
            "athalia_core/code_linter.py": 22,
            "athalia_core/security_auditor.py": 23,
            "athalia_core/advanced_analytics.py": 31,
            "athalia_core/auto_documenter_fixed.py": 30,
            "athalia_core/classification/__init__.py": 1,
            "athalia_core/classification/project_types.py": 1,
            "athalia_core/classification/project_classifier.py": 20,
            "athalia_core/templates/__init__.py": 1,
            "athalia_core/templates/artistic_templates.py": 1,
            "athalia_core/templates/base_templates.py": 1,
            "athalia_core/templates/api_templates.py": 1,
            "athalia_core/i18n/fr.py": 1,
            "athalia_core/i18n/en.py": 1,
            "athalia_core/i18n/__init__.py": 2,
            "athalia_core/plugins/__init__.py": 1
          },
          "total": 1468,
          "average": 16.31111111111111
        },
        "coverage": {
          "lines": 15150,
          "functions": 499,
          "classes": 33,
          "files": 90,
          "test_files": 33
        },
        "performance": {
          "file_sizes": {
            "athalia.py": 7298,
            "._athalia.py": 4096,
            "setup.py": 2865,
            "athalia_new.py": 4987,
            "._athalia_new.py": 4096,
            "athalia_unified.py": 10945,
            "test_unified.py": 6176,
            "._athalia_unified.py": 4096,
            "._test_unified.py": 4096,
            "test_final.py": 7108,
            "._test_final.py": 4096,
            "demo_athalia.py": 5624,
            "._demo_athalia.py": 4096,
            "athalia_quick_start.py": 8987,
            "._athalia_quick_start.py": 4096,
            "plugins/__init__.py": 46,
            "plugins/hello_plugin.py": 82,
            "plugins/._export_docker_plugin.py": 4096,
            "plugins/export_docker_plugin.py": 1763,
            "tests/test_ath_context_prompt_semantic.py": 943,
            "tests/test_ath_dev_boost.py": 1297,
            "tests/test_ath_dev_boost_menu.py": 1421,
            "tests/test_audit_intelligent.py": 7181,
            "tests/test_ci.py": 446,
            "tests/test_ready_check.py": 663,
            "tests/test_plugins.py": 1652,
            "tests/test_cleanup.py": 589,
            "tests/._test_ready_check.py": 4096,
            "tests/test_continue_models.py": 1195,
            "tests/test_analytics.py": 3980,
            "tests/test_dashboard.py": 737,
            "tests/test_i18n.py": 415,
            "tests/test_generation.py": 4014,
            "tests/test_ai_robust.py": 5233,
            "tests/test_onboarding.py": 536,
            "tests/._test_i18n.py": 4096,
            "tests/test_security.py": 502,
            "tests/test_plugins_validator.py": 1012,
            "tests/test_ai_robust_integration.py": 7270,
            "tests/._test_plugins_validator.py": 4096,
            "tests/test_project_importer.py": 1481,
            "tests/._test_project_importer.py": 4096,
            "tests/test_auto_fixer.py": 676,
            "tests/._test_auto_fixer.py": 4096,
            "tests/test_profiles.py": 471,
            "tests/._test_profiles.py": 4096,
            "tests/._test_analytics.py": 4096,
            "tests/test_athalia_orchestrator.py": 5886,
            "tests/._test_athalia_orchestrator.py": 4096,
            "tests/test_auto_correction_avancee.py": 2164,
            "tests/._test_auto_correction_avancee.py": 4096,
            "tests/test_profils_utilisateur_avances.py": 2687,
            "tests/._test_profils_utilisateur_avances.py": 4096,
            "tests/test_dashboard_unifie.py": 2743,
            "tests/._test_dashboard_unifie.py": 4096,
            "tests/test_dashboard_unifie_simple.py": 2809,
            "tests/._test_dashboard_unifie_simple.py": 4096,
            "tests/integration/test_end_to_end.py": 1751,
            "tests/integration/test_cli_robustesse.py": 421,
            "tests/integration/test_yaml_validity.py": 641,
            "modules/auto_correction_avancee.py": 23399,
            "modules/._auto_correction_avancee.py": 4096,
            "modules/profils_utilisateur_avances.py": 16424,
            "modules/._profils_utilisateur_avances.py": 4096,
            "modules/dashboard_unifie.py": 19930,
            "modules/._dashboard_unifie.py": 4096,
            "modules/dashboard_unifie_simple.py": 15863,
            "modules/._dashboard_unifie_simple.py": 4096,
            "modules/orchestrateur_principal.py": 15304,
            "modules/._orchestrateur_principal.py": 4096,
            "VioletTwistAI/main.py": 85,
            "VioletTwistAI/tests/test_booster_ia_VioletTwistAI.py": 1672,
            "VioletTwistAI/violette_game/main.py": 763,
            "VioletTwistAI/ai_player/main.py": 719,
            "VioletTwistAI/agents/ath_context_prompt.py": 7148,
            "agents/ath_context_prompt.py": 7148,
            "athalia_core/__init__.py": 508,
            "athalia_core/ci.py": 1584,
            "athalia_core/cleanup.py": 2495,
            "athalia_core/dashboard.py": 6323,
            "athalia_core/._generation.py": 4096,
            "athalia_core/generation.py": 48384,
            "athalia_core/main.py": 9285,
            "athalia_core/analytics.py": 10265,
            "athalia_core/onboarding.py": 2739,
            "athalia_core/audit.py": 21028,
            "athalia_core/security.py": 1652,
            "athalia_core/plugins_manager.py": 1250,
            "athalia_core/plugins_validator.py": 1691,
            "athalia_core/ai_robust.py": 12787,
            "athalia_core/._plugins_validator.py": 4096,
            "athalia_core/cli.py": 6322,
            "athalia_core/ready_check.py": 618,
            "athalia_core/._ready_check.py": 4096,
            "athalia_core/project_importer.py": 11517,
            "athalia_core/._project_importer.py": 4096,
            "athalia_core/auto_fixer.py": 1724,
            "athalia_core/._auto_fixer.py": 4096,
            "athalia_core/profiles.py": 571,
            "athalia_core/._profiles.py": 4096,
            "athalia_core/._analytics.py": 4096,
            "athalia_core/intelligent_auditor.py": 28629,
            "athalia_core/._intelligent_auditor.py": 4096,
            "athalia_core/auto_cleaner.py": 15927,
            "athalia_core/._auto_cleaner.py": 4096,
            "athalia_core/auto_documenter.py": 24234,
            "athalia_core/._auto_documenter.py": 4096,
            "athalia_core/auto_tester.py": 21420,
            "athalia_core/._auto_tester.py": 4096,
            "athalia_core/auto_cicd.py": 19668,
            "athalia_core/._auto_cicd.py": 4096,
            "athalia_core/athalia_orchestrator.py": 21802,
            "athalia_core/._athalia_orchestrator.py": 4096,
            "athalia_core/code_linter.py": 5772,
            "athalia_core/._code_linter.py": 4096,
            "athalia_core/security_auditor.py": 5243,
            "athalia_core/._security_auditor.py": 4096,
            "athalia_core/advanced_analytics.py": 10350,
            "athalia_core/._advanced_analytics.py": 4096,
            "athalia_core/auto_documenter_fixed.py": 12716,
            "athalia_core/._auto_documenter_fixed.py": 4096,
            "athalia_core/classification/__init__.py": 375,
            "athalia_core/classification/project_types.py": 4506,
            "athalia_core/classification/._project_classifier.py": 4096,
            "athalia_core/classification/project_classifier.py": 4625,
            "athalia_core/classification/._project_types.py": 4096,
            "athalia_core/templates/__init__.py": 155,
            "athalia_core/templates/artistic_templates.py": 8819,
            "athalia_core/templates/base_templates.py": 9944,
            "athalia_core/templates/._base_templates.py": 4096,
            "athalia_core/templates/.___init__.py": 4096,
            "athalia_core/templates/api_templates.py": 1965,
            "athalia_core/templates/._api_templates.py": 4096,
            "athalia_core/i18n/fr.py": 264,
            "athalia_core/i18n/._fr.py": 4096,
            "athalia_core/i18n/en.py": 251,
            "athalia_core/i18n/._en.py": 4096,
            "athalia_core/i18n/__init__.py": 255,
            "athalia_core/i18n/.___init__.py": 4096,
            "athalia_core/plugins/__init__.py": 66
          },
          "dependencies": 22
        },
        "quality": {
          "docstrings": 716,
          "comments": 788,
          "empty_lines": 2367,
          "total_lines": 15136
        },
        "evolution": {
          "last_modified": 1752729434.93,
          "file_count": 140
        }
      },
      "dashboard": "analytics_dashboard.html",
      "summary": "\n📊 ANALYTICS AVANCÉE - \n\n🎯 MÉTRIQUES PRINCIPALES:\n• Complexité moyenne: 16.31\n• Fichiers analysés: 90\n• Lignes de code: 15150\n• Fonctions: 499\n• Classes: 33\n• Fichiers de test: 33\n\n📈 QUALITÉ:\n• Docstrings: 716\n• Commentaires: 788\n• Ratio commentaires: 5.2%\n\n⚡ PERFORMANCE:\n• Dépendances: 22\n• Fichiers Python: 140\n\n📊 FICHIERS GÉNÉRÉS:\n• Dashboard HTML: analytics_dashboard.html\n",
      "success": true
    },
    "documentation": {
      "success": false,
      "error": "name 'e' is not defined"
    },
    "testing": {
      "success": true,
      "data": {
        "unit_tests": [
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour setup\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from setup import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer setup\")\n    pass\n\nclass TestSetup(unittest.TestCase):\n    \"\"\"Tests unitaires pour setup\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_read_readme(self):\n        \"\"\"Test de la fonction read_readme\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = read_readme()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester read_readme: {e}\")\n    \n    def test_read_requirements(self):\n        \"\"\"Test de la fonction read_requirements\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = read_requirements()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester read_requirements: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour athalia_new\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from athalia_new import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer athalia_new\")\n    pass\n\nclass TestAthalia_New(unittest.TestCase):\n    \"\"\"Tests unitaires pour athalia_new\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour athalia_unified\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from athalia_unified import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer athalia_unified\")\n    pass\n\nclass TestAthalia_Unified(unittest.TestCase):\n    \"\"\"Tests unitaires pour athalia_unified\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AthaliaOrchestrator_creation(self):\n        \"\"\"Test de création de AthaliaOrchestrator\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AthaliaOrchestrator: {e}\")\n    \n    def test_AthaliaOrchestrator_industrialize_project(self):\n        \"\"\"Test de la méthode industrialize_project\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.industrialize_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester industrialize_project: {e}\")\n    \n    def test_AthaliaOrchestrator_audit_project(self):\n        \"\"\"Test de la méthode audit_project\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.audit_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester audit_project: {e}\")\n    \n    def test_AthaliaOrchestrator_scan_projects(self):\n        \"\"\"Test de la méthode scan_projects\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.scan_projects()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester scan_projects: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour demo_athalia\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from demo_athalia import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer demo_athalia\")\n    pass\n\nclass TestDemo_Athalia(unittest.TestCase):\n    \"\"\"Tests unitaires pour demo_athalia\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_demo_project(self):\n        \"\"\"Test de la fonction demo_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = demo_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester demo_project: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour athalia_quick_start\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from athalia_quick_start import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer athalia_quick_start\")\n    pass\n\nclass TestAthalia_Quick_Start(unittest.TestCase):\n    \"\"\"Tests unitaires pour athalia_quick_start\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_print_header(self):\n        \"\"\"Test de la fonction print_header\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = print_header()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester print_header: {e}\")\n    \n    def test_show_menu(self):\n        \"\"\"Test de la fonction show_menu\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = show_menu()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester show_menu: {e}\")\n    \n    def test_create_new_project(self):\n        \"\"\"Test de la fonction create_new_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = create_new_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester create_new_project: {e}\")\n    \n    def test_correct_existing_project(self):\n        \"\"\"Test de la fonction correct_existing_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = correct_existing_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester correct_existing_project: {e}\")\n    \n    def test_audit_existing_project(self):\n        \"\"\"Test de la fonction audit_existing_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = audit_existing_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester audit_existing_project: {e}\")\n    \n    def test_show_dashboard(self):\n        \"\"\"Test de la fonction show_dashboard\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = show_dashboard()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester show_dashboard: {e}\")\n    \n    def test_manage_user_profile(self):\n        \"\"\"Test de la fonction manage_user_profile\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = manage_user_profile()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester manage_user_profile: {e}\")\n    \n    def test_scan_projects(self):\n        \"\"\"Test de la fonction scan_projects\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = scan_projects()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester scan_projects: {e}\")\n    \n    def test_check_ai_status(self):\n        \"\"\"Test de la fonction check_ai_status\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = check_ai_status()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester check_ai_status: {e}\")\n    \n    def test_show_inventory(self):\n        \"\"\"Test de la fonction show_inventory\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = show_inventory()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester show_inventory: {e}\")\n    \n    def test_industrialize_project(self):\n        \"\"\"Test de la fonction industrialize_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = industrialize_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester industrialize_project: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour hello_plugin\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from hello_plugin import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer hello_plugin\")\n    pass\n\nclass TestHello_Plugin(unittest.TestCase):\n    \"\"\"Tests unitaires pour hello_plugin\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_run(self):\n        \"\"\"Test de la fonction run\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = run()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester run: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour export_docker_plugin\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from export_docker_plugin import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer export_docker_plugin\")\n    pass\n\nclass TestExport_Docker_Plugin(unittest.TestCase):\n    \"\"\"Tests unitaires pour export_docker_plugin\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_export_docker(self):\n        \"\"\"Test de la fonction export_docker\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = export_docker()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester export_docker: {e}\")\n    \n    def test_analyze_dependencies(self):\n        \"\"\"Test de la fonction analyze_dependencies\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = analyze_dependencies()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester analyze_dependencies: {e}\")\n    \n    def test_run(self):\n        \"\"\"Test de la fonction run\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = run()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester run: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour auto_correction_avancee\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from auto_correction_avancee import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer auto_correction_avancee\")\n    pass\n\nclass TestAuto_Correction_Avancee(unittest.TestCase):\n    \"\"\"Tests unitaires pour auto_correction_avancee\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AutoCorrectionAvancee_creation(self):\n        \"\"\"Test de création de AutoCorrectionAvancee\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AutoCorrectionAvancee: {e}\")\n    \n    def test_AutoCorrectionAvancee_analyser_et_corriger(self):\n        \"\"\"Test de la méthode analyser_et_corriger\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.analyser_et_corriger()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester analyser_et_corriger: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_syntaxe_avancee(self):\n        \"\"\"Test de la méthode _corriger_syntaxe_avancee\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_syntaxe_avancee()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_syntaxe_avancee: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_erreur_syntaxe(self):\n        \"\"\"Test de la méthode _corriger_erreur_syntaxe\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_erreur_syntaxe()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_erreur_syntaxe: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_indentation(self):\n        \"\"\"Test de la méthode _corriger_indentation\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_indentation()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_indentation: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_parentheses(self):\n        \"\"\"Test de la méthode _corriger_parentheses\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_parentheses()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_parentheses: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_guillemets(self):\n        \"\"\"Test de la méthode _corriger_guillemets\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_guillemets()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_guillemets: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_virgules(self):\n        \"\"\"Test de la méthode _corriger_virgules\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_virgules()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_virgules: {e}\")\n    \n    def test_AutoCorrectionAvancee__optimiser_code(self):\n        \"\"\"Test de la méthode _optimiser_code\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._optimiser_code()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _optimiser_code: {e}\")\n    \n    def test_AutoCorrectionAvancee__optimiser_list_comprehensions(self):\n        \"\"\"Test de la méthode _optimiser_list_comprehensions\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._optimiser_list_comprehensions()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _optimiser_list_comprehensions: {e}\")\n    \n    def test_AutoCorrectionAvancee__optimiser_imports(self):\n        \"\"\"Test de la méthode _optimiser_imports\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._optimiser_imports()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _optimiser_imports: {e}\")\n    \n    def test_AutoCorrectionAvancee__optimiser_boucles(self):\n        \"\"\"Test de la méthode _optimiser_boucles\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._optimiser_boucles()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _optimiser_boucles: {e}\")\n    \n    def test_AutoCorrectionAvancee__refactoring_automatique(self):\n        \"\"\"Test de la méthode _refactoring_automatique\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._refactoring_automatique()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _refactoring_automatique: {e}\")\n    \n    def test_AutoCorrectionAvancee__extraire_methodes(self):\n        \"\"\"Test de la méthode _extraire_methodes\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extraire_methodes()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extraire_methodes: {e}\")\n    \n    def test_AutoCorrectionAvancee__renommer_variables(self):\n        \"\"\"Test de la méthode _renommer_variables\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._renommer_variables()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _renommer_variables: {e}\")\n    \n    def test_AutoCorrectionAvancee__simplifier_conditions(self):\n        \"\"\"Test de la méthode _simplifier_conditions\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._simplifier_conditions()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _simplifier_conditions: {e}\")\n    \n    def test_AutoCorrectionAvancee__corriger_anti_patterns(self):\n        \"\"\"Test de la méthode _corriger_anti_patterns\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._corriger_anti_patterns()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _corriger_anti_patterns: {e}\")\n    \n    def test_AutoCorrectionAvancee__ameliorer_lisibilite(self):\n        \"\"\"Test de la méthode _ameliorer_lisibilite\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._ameliorer_lisibilite()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _ameliorer_lisibilite: {e}\")\n    \n    def test_AutoCorrectionAvancee_generer_rapport(self):\n        \"\"\"Test de la méthode generer_rapport\"\"\"\n        try:\n            instance = AutoCorrectionAvancee()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.generer_rapport()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generer_rapport: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour main\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from main import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer main\")\n    pass\n\nclass TestMain(unittest.TestCase):\n    \"\"\"Tests unitaires pour main\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour main\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from main import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer main\")\n    pass\n\nclass TestMain(unittest.TestCase):\n    \"\"\"Tests unitaires pour main\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_Violette_gameManager_creation(self):\n        \"\"\"Test de création de Violette_gameManager\"\"\"\n        try:\n            instance = Violette_gameManager()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer Violette_gameManager: {e}\")\n    \n    def test_Violette_gameManager_process(self):\n        \"\"\"Test de la méthode process\"\"\"\n        try:\n            instance = Violette_gameManager()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.process()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester process: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour main\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from main import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer main\")\n    pass\n\nclass TestMain(unittest.TestCase):\n    \"\"\"Tests unitaires pour main\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_Ai_playerManager_creation(self):\n        \"\"\"Test de création de Ai_playerManager\"\"\"\n        try:\n            instance = Ai_playerManager()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer Ai_playerManager: {e}\")\n    \n    def test_Ai_playerManager_process(self):\n        \"\"\"Test de la méthode process\"\"\"\n        try:\n            instance = Ai_playerManager()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.process()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester process: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour ci\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from ci import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer ci\")\n    pass\n\nclass TestCi(unittest.TestCase):\n    \"\"\"Tests unitaires pour ci\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_generate_github_ci_yaml(self):\n        \"\"\"Test de la fonction generate_github_ci_yaml\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = generate_github_ci_yaml()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_github_ci_yaml: {e}\")\n    \n    def test_add_coverage_badge(self):\n        \"\"\"Test de la fonction add_coverage_badge\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = add_coverage_badge()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester add_coverage_badge: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour cleanup\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from cleanup import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer cleanup\")\n    pass\n\nclass TestCleanup(unittest.TestCase):\n    \"\"\"Tests unitaires pour cleanup\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_clean_old_tests_and_caches(self):\n        \"\"\"Test de la fonction clean_old_tests_and_caches\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = clean_old_tests_and_caches()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester clean_old_tests_and_caches: {e}\")\n    \n    def test_clean_macos_files(self):\n        \"\"\"Test de la fonction clean_macos_files\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = clean_macos_files()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester clean_macos_files: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour main\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from main import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer main\")\n    pass\n\nclass TestMain(unittest.TestCase):\n    \"\"\"Tests unitaires pour main\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_menu(self):\n        \"\"\"Test de la fonction menu\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = menu()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester menu: {e}\")\n    \n    def test_safe_input(self):\n        \"\"\"Test de la fonction safe_input\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = safe_input()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester safe_input: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour onboarding\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from onboarding import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer onboarding\")\n    pass\n\nclass TestOnboarding(unittest.TestCase):\n    \"\"\"Tests unitaires pour onboarding\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_generate_onboarding_md(self):\n        \"\"\"Test de la fonction generate_onboarding_md\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = generate_onboarding_md()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_onboarding_md: {e}\")\n    \n    def test_generate_onboard_cli(self):\n        \"\"\"Test de la fonction generate_onboard_cli\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = generate_onboard_cli()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_onboard_cli: {e}\")\n    \n    def test_generate_onboarding_html_advanced(self):\n        \"\"\"Test de la fonction generate_onboarding_html_advanced\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = generate_onboarding_html_advanced()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_onboarding_html_advanced: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour audit\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from audit import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer audit\")\n    pass\n\nclass TestAudit(unittest.TestCase):\n    \"\"\"Tests unitaires pour audit\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_ProjectAuditor_creation(self):\n        \"\"\"Test de création de ProjectAuditor\"\"\"\n        try:\n            instance = ProjectAuditor()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer ProjectAuditor: {e}\")\n    \n    def test_ProjectAuditor_audit_project(self):\n        \"\"\"Test de la méthode audit_project\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.audit_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester audit_project: {e}\")\n    \n    def test_ProjectAuditor__analyze_structure(self):\n        \"\"\"Test de la méthode _analyze_structure\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_structure()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_structure: {e}\")\n    \n    def test_ProjectAuditor__analyze_code_quality(self):\n        \"\"\"Test de la méthode _analyze_code_quality\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_code_quality()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_code_quality: {e}\")\n    \n    def test_ProjectAuditor__analyze_python_file(self):\n        \"\"\"Test de la méthode _analyze_python_file\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_python_file()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_python_file: {e}\")\n    \n    def test_ProjectAuditor__analyze_tests(self):\n        \"\"\"Test de la méthode _analyze_tests\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_tests()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_tests: {e}\")\n    \n    def test_ProjectAuditor__analyze_documentation(self):\n        \"\"\"Test de la méthode _analyze_documentation\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_documentation()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_documentation: {e}\")\n    \n    def test_ProjectAuditor__analyze_security(self):\n        \"\"\"Test de la méthode _analyze_security\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_security()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_security: {e}\")\n    \n    def test_ProjectAuditor__analyze_performance(self):\n        \"\"\"Test de la méthode _analyze_performance\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_performance()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_performance: {e}\")\n    \n    def test_ProjectAuditor__calculate_score(self):\n        \"\"\"Test de la méthode _calculate_score\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._calculate_score()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _calculate_score: {e}\")\n    \n    def test_ProjectAuditor__generate_report(self):\n        \"\"\"Test de la méthode _generate_report\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_report: {e}\")\n    \n    def test_ProjectAuditor__generate_summary(self):\n        \"\"\"Test de la méthode _generate_summary\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_summary()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_summary: {e}\")\n    \n    def test_ProjectAuditor__find_modules(self):\n        \"\"\"Test de la méthode _find_modules\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._find_modules()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _find_modules: {e}\")\n    \n    def test_ProjectAuditor__find_python_files(self):\n        \"\"\"Test de la méthode _find_python_files\"\"\"\n        try:\n            instance = ProjectAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._find_python_files()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _find_python_files: {e}\")\n    \n    def test_calculate_base_score(self):\n        \"\"\"Test de la fonction calculate_base_score\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = calculate_base_score()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester calculate_base_score: {e}\")\n    \n    def test_analyze_code_issues(self):\n        \"\"\"Test de la fonction analyze_code_issues\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = analyze_code_issues()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester analyze_code_issues: {e}\")\n    \n    def test_generate_basic_suggestions(self):\n        \"\"\"Test de la fonction generate_basic_suggestions\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = generate_basic_suggestions()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_basic_suggestions: {e}\")\n    \n    def test_audit_code_quality(self):\n        \"\"\"Test de la fonction audit_code_quality\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = audit_code_quality()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester audit_code_quality: {e}\")\n    \n    def test_audit_project_intelligent(self):\n        \"\"\"Test de la fonction audit_project_intelligent\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = audit_project_intelligent()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester audit_project_intelligent: {e}\")\n    \n    def test_generate_audit_report(self):\n        \"\"\"Test de la fonction generate_audit_report\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = generate_audit_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_audit_report: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour security\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from security import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer security\")\n    pass\n\nclass TestSecurity(unittest.TestCase):\n    \"\"\"Tests unitaires pour security\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_security_audit_project(self):\n        \"\"\"Test de la fonction security_audit_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = security_audit_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester security_audit_project: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour plugins_manager\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from plugins_manager import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer plugins_manager\")\n    pass\n\nclass TestPlugins_Manager(unittest.TestCase):\n    \"\"\"Tests unitaires pour plugins_manager\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_list_plugins(self):\n        \"\"\"Test de la fonction list_plugins\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = list_plugins()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester list_plugins: {e}\")\n    \n    def test_load_plugin(self):\n        \"\"\"Test de la fonction load_plugin\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = load_plugin()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester load_plugin: {e}\")\n    \n    def test_run_all_plugins(self):\n        \"\"\"Test de la fonction run_all_plugins\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = run_all_plugins()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester run_all_plugins: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour plugins_validator\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from plugins_validator import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer plugins_validator\")\n    pass\n\nclass TestPlugins_Validator(unittest.TestCase):\n    \"\"\"Tests unitaires pour plugins_validator\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_validate_plugin(self):\n        \"\"\"Test de la fonction validate_plugin\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = validate_plugin()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester validate_plugin: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour ai_robust\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from ai_robust import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer ai_robust\")\n    pass\n\nclass TestAi_Robust(unittest.TestCase):\n    \"\"\"Tests unitaires pour ai_robust\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AIModel_creation(self):\n        \"\"\"Test de création de AIModel\"\"\"\n        try:\n            instance = AIModel()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AIModel: {e}\")\n    \n\n    def test_PromptContext_creation(self):\n        \"\"\"Test de création de PromptContext\"\"\"\n        try:\n            instance = PromptContext()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer PromptContext: {e}\")\n    \n\n    def test_RobustAI_creation(self):\n        \"\"\"Test de création de RobustAI\"\"\"\n        try:\n            instance = RobustAI()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer RobustAI: {e}\")\n    \n    def test_RobustAI__detect_available_models(self):\n        \"\"\"Test de la méthode _detect_available_models\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._detect_available_models()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _detect_available_models: {e}\")\n    \n    def test_RobustAI__build_fallback_chain(self):\n        \"\"\"Test de la méthode _build_fallback_chain\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._build_fallback_chain()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _build_fallback_chain: {e}\")\n    \n    def test_RobustAI__load_prompt_templates(self):\n        \"\"\"Test de la méthode _load_prompt_templates\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._load_prompt_templates()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _load_prompt_templates: {e}\")\n    \n    def test_RobustAI__get_dynamic_prompt(self):\n        \"\"\"Test de la méthode _get_dynamic_prompt\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._get_dynamic_prompt()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _get_dynamic_prompt: {e}\")\n    \n    def test_RobustAI__classify_project_complexity(self):\n        \"\"\"Test de la méthode _classify_project_complexity\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._classify_project_complexity()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _classify_project_complexity: {e}\")\n    \n    def test_RobustAI__call_ollama(self):\n        \"\"\"Test de la méthode _call_ollama\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._call_ollama()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _call_ollama: {e}\")\n    \n    def test_RobustAI_generate_blueprint(self):\n        \"\"\"Test de la méthode generate_blueprint\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.generate_blueprint()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_blueprint: {e}\")\n    \n    def test_RobustAI_review_code(self):\n        \"\"\"Test de la méthode review_code\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.review_code()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester review_code: {e}\")\n    \n    def test_RobustAI_generate_documentation(self):\n        \"\"\"Test de la méthode generate_documentation\"\"\"\n        try:\n            instance = RobustAI()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.generate_documentation()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester generate_documentation: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour ready_check\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from ready_check import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer ready_check\")\n    pass\n\nclass TestReady_Check(unittest.TestCase):\n    \"\"\"Tests unitaires pour ready_check\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_check_ready(self):\n        \"\"\"Test de la fonction check_ready\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = check_ready()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester check_ready: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour project_importer\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from project_importer import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer project_importer\")\n    pass\n\nclass TestProject_Importer(unittest.TestCase):\n    \"\"\"Tests unitaires pour project_importer\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_ProjectImporter_creation(self):\n        \"\"\"Test de création de ProjectImporter\"\"\"\n        try:\n            instance = ProjectImporter()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer ProjectImporter: {e}\")\n    \n    def test_ProjectImporter_import_project(self):\n        \"\"\"Test de la méthode import_project\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.import_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester import_project: {e}\")\n    \n    def test_ProjectImporter__scan_structure(self):\n        \"\"\"Test de la méthode _scan_structure\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._scan_structure()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _scan_structure: {e}\")\n    \n    def test_ProjectImporter__detect_project_type(self):\n        \"\"\"Test de la méthode _detect_project_type\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._detect_project_type()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _detect_project_type: {e}\")\n    \n    def test_ProjectImporter__analyze_code_quality(self):\n        \"\"\"Test de la méthode _analyze_code_quality\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_code_quality()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_code_quality: {e}\")\n    \n    def test_ProjectImporter__generate_correction_blueprint(self):\n        \"\"\"Test de la méthode _generate_correction_blueprint\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_correction_blueprint()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_correction_blueprint: {e}\")\n    \n    def test_ProjectImporter__suggest_modules(self):\n        \"\"\"Test de la méthode _suggest_modules\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._suggest_modules()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _suggest_modules: {e}\")\n    \n    def test_ProjectImporter__suggest_structure(self):\n        \"\"\"Test de la méthode _suggest_structure\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._suggest_structure()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _suggest_structure: {e}\")\n    \n    def test_ProjectImporter__suggest_dependencies(self):\n        \"\"\"Test de la méthode _suggest_dependencies\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._suggest_dependencies()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _suggest_dependencies: {e}\")\n    \n    def test_ProjectImporter__suggest_prompts(self):\n        \"\"\"Test de la méthode _suggest_prompts\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._suggest_prompts()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _suggest_prompts: {e}\")\n    \n    def test_ProjectImporter__suggest_enhancements(self):\n        \"\"\"Test de la méthode _suggest_enhancements\"\"\"\n        try:\n            instance = ProjectImporter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._suggest_enhancements()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _suggest_enhancements: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour profiles\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from profiles import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer profiles\")\n    pass\n\nclass TestProfiles(unittest.TestCase):\n    \"\"\"Tests unitaires pour profiles\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_get_user_profile(self):\n        \"\"\"Test de la fonction get_user_profile\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = get_user_profile()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester get_user_profile: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour auto_documenter\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from auto_documenter import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer auto_documenter\")\n    pass\n\nclass TestAuto_Documenter(unittest.TestCase):\n    \"\"\"Tests unitaires pour auto_documenter\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AutoDocumenter_creation(self):\n        \"\"\"Test de création de AutoDocumenter\"\"\"\n        try:\n            instance = AutoDocumenter()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AutoDocumenter: {e}\")\n    \n    def test_AutoDocumenter__load_translations(self):\n        \"\"\"Test de la méthode _load_translations\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._load_translations()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _load_translations: {e}\")\n    \n    def test_AutoDocumenter_document_project(self):\n        \"\"\"Test de la méthode document_project\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.document_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester document_project: {e}\")\n    \n    def test_AutoDocumenter__analyze_project(self):\n        \"\"\"Test de la méthode _analyze_project\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_project: {e}\")\n    \n    def test_AutoDocumenter__extract_description(self):\n        \"\"\"Test de la méthode _extract_description\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extract_description()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extract_description: {e}\")\n    \n    def test_AutoDocumenter__extract_version(self):\n        \"\"\"Test de la méthode _extract_version\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extract_version()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extract_version: {e}\")\n    \n    def test_AutoDocumenter__extract_author(self):\n        \"\"\"Test de la méthode _extract_author\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extract_author()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extract_author: {e}\")\n    \n    def test_AutoDocumenter__extract_license(self):\n        \"\"\"Test de la méthode _extract_license\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extract_license()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extract_license: {e}\")\n    \n    def test_AutoDocumenter__extract_dependencies(self):\n        \"\"\"Test de la méthode _extract_dependencies\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extract_dependencies()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extract_dependencies: {e}\")\n    \n    def test_AutoDocumenter__find_entry_points(self):\n        \"\"\"Test de la méthode _find_entry_points\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._find_entry_points()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _find_entry_points: {e}\")\n    \n    def test_AutoDocumenter__analyze_modules(self):\n        \"\"\"Test de la méthode _analyze_modules\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_modules()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_modules: {e}\")\n    \n    def test_AutoDocumenter__analyze_classes(self):\n        \"\"\"Test de la méthode _analyze_classes\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_classes()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_classes: {e}\")\n    \n    def test_AutoDocumenter__analyze_functions(self):\n        \"\"\"Test de la méthode _analyze_functions\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_functions()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_functions: {e}\")\n    \n    def test_AutoDocumenter__generate_readme(self):\n        \"\"\"Test de la méthode _generate_readme\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_readme()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_readme: {e}\")\n    \n    def test_AutoDocumenter__generate_api_documentation(self):\n        \"\"\"Test de la méthode _generate_api_documentation\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_api_documentation()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_api_documentation: {e}\")\n    \n    def test_AutoDocumenter__generate_setup_guide(self):\n        \"\"\"Test de la méthode _generate_setup_guide\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_setup_guide()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_setup_guide: {e}\")\n    \n    def test_AutoDocumenter__generate_usage_guide(self):\n        \"\"\"Test de la méthode _generate_usage_guide\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_usage_guide()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_usage_guide: {e}\")\n    \n    def test_AutoDocumenter__save_documents(self):\n        \"\"\"Test de la méthode _save_documents\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._save_documents()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _save_documents: {e}\")\n    \n    def test_AutoDocumenter__get_created_files(self):\n        \"\"\"Test de la méthode _get_created_files\"\"\"\n        try:\n            instance = AutoDocumenter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._get_created_files()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _get_created_files: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour athalia_orchestrator\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from athalia_orchestrator import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer athalia_orchestrator\")\n    pass\n\nclass TestAthalia_Orchestrator(unittest.TestCase):\n    \"\"\"Tests unitaires pour athalia_orchestrator\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AthaliaOrchestrator_creation(self):\n        \"\"\"Test de création de AthaliaOrchestrator\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AthaliaOrchestrator: {e}\")\n    \n    def test_AthaliaOrchestrator_industrialize_project(self):\n        \"\"\"Test de la méthode industrialize_project\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.industrialize_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester industrialize_project: {e}\")\n    \n    def test_AthaliaOrchestrator__run_audit(self):\n        \"\"\"Test de la méthode _run_audit\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_audit()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_audit: {e}\")\n    \n    def test_AthaliaOrchestrator__run_cleanup(self):\n        \"\"\"Test de la méthode _run_cleanup\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_cleanup()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_cleanup: {e}\")\n    \n    def test_AthaliaOrchestrator__run_documentation(self):\n        \"\"\"Test de la méthode _run_documentation\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_documentation()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_documentation: {e}\")\n    \n    def test_AthaliaOrchestrator__run_testing(self):\n        \"\"\"Test de la méthode _run_testing\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_testing()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_testing: {e}\")\n    \n    def test_AthaliaOrchestrator__run_cicd(self):\n        \"\"\"Test de la méthode _run_cicd\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_cicd()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_cicd: {e}\")\n    \n    def test_AthaliaOrchestrator__generate_final_report(self):\n        \"\"\"Test de la méthode _generate_final_report\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_final_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_final_report: {e}\")\n    \n    def test_AthaliaOrchestrator__save_report(self):\n        \"\"\"Test de la méthode _save_report\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._save_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _save_report: {e}\")\n    \n    def test_AthaliaOrchestrator_scan_projects(self):\n        \"\"\"Test de la méthode scan_projects\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.scan_projects()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester scan_projects: {e}\")\n    \n    def test_AthaliaOrchestrator__is_project(self):\n        \"\"\"Test de la méthode _is_project\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._is_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _is_project: {e}\")\n    \n    def test_AthaliaOrchestrator__detect_project_type(self):\n        \"\"\"Test de la méthode _detect_project_type\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._detect_project_type()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _detect_project_type: {e}\")\n    \n    def test_AthaliaOrchestrator__get_project_size(self):\n        \"\"\"Test de la méthode _get_project_size\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._get_project_size()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _get_project_size: {e}\")\n    \n    def test_AthaliaOrchestrator__add_quality_badge(self):\n        \"\"\"Test de la méthode _add_quality_badge\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._add_quality_badge()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _add_quality_badge: {e}\")\n    \n    def test_AthaliaOrchestrator__add_security_badge(self):\n        \"\"\"Test de la méthode _add_security_badge\"\"\"\n        try:\n            instance = AthaliaOrchestrator()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._add_security_badge()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _add_security_badge: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour code_linter\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from code_linter import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer code_linter\")\n    pass\n\nclass TestCode_Linter(unittest.TestCase):\n    \"\"\"Tests unitaires pour code_linter\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_CodeLinter_creation(self):\n        \"\"\"Test de création de CodeLinter\"\"\"\n        try:\n            instance = CodeLinter()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer CodeLinter: {e}\")\n    \n    def test_CodeLinter_run(self):\n        \"\"\"Test de la méthode run\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.run()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester run: {e}\")\n    \n    def test_CodeLinter__run_flake8(self):\n        \"\"\"Test de la méthode _run_flake8\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_flake8()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_flake8: {e}\")\n    \n    def test_CodeLinter__run_black(self):\n        \"\"\"Test de la méthode _run_black\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_black()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_black: {e}\")\n    \n    def test_CodeLinter__run_isort(self):\n        \"\"\"Test de la méthode _run_isort\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_isort()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_isort: {e}\")\n    \n    def test_CodeLinter__run_mypy(self):\n        \"\"\"Test de la méthode _run_mypy\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_mypy()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_mypy: {e}\")\n    \n    def test_CodeLinter__run_bandit(self):\n        \"\"\"Test de la méthode _run_bandit\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_bandit()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_bandit: {e}\")\n    \n    def test_CodeLinter__compute_score(self):\n        \"\"\"Test de la méthode _compute_score\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._compute_score()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _compute_score: {e}\")\n    \n    def test_CodeLinter_print_report(self):\n        \"\"\"Test de la méthode print_report\"\"\"\n        try:\n            instance = CodeLinter()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.print_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester print_report: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour security_auditor\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from security_auditor import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer security_auditor\")\n    pass\n\nclass TestSecurity_Auditor(unittest.TestCase):\n    \"\"\"Tests unitaires pour security_auditor\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_SecurityAuditor_creation(self):\n        \"\"\"Test de création de SecurityAuditor\"\"\"\n        try:\n            instance = SecurityAuditor()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer SecurityAuditor: {e}\")\n    \n    def test_SecurityAuditor_run(self):\n        \"\"\"Test de la méthode run\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.run()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester run: {e}\")\n    \n    def test_SecurityAuditor__run_bandit(self):\n        \"\"\"Test de la méthode _run_bandit\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_bandit()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_bandit: {e}\")\n    \n    def test_SecurityAuditor__run_safety(self):\n        \"\"\"Test de la méthode _run_safety\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._run_safety()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _run_safety: {e}\")\n    \n    def test_SecurityAuditor__detect_secrets(self):\n        \"\"\"Test de la méthode _detect_secrets\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._detect_secrets()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _detect_secrets: {e}\")\n    \n    def test_SecurityAuditor__compute_score(self):\n        \"\"\"Test de la méthode _compute_score\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._compute_score()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _compute_score: {e}\")\n    \n    def test_SecurityAuditor__generate_recommendations(self):\n        \"\"\"Test de la méthode _generate_recommendations\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_recommendations()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_recommendations: {e}\")\n    \n    def test_SecurityAuditor_print_report(self):\n        \"\"\"Test de la méthode print_report\"\"\"\n        try:\n            instance = SecurityAuditor()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.print_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester print_report: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour advanced_analytics\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from advanced_analytics import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer advanced_analytics\")\n    pass\n\nclass TestAdvanced_Analytics(unittest.TestCase):\n    \"\"\"Tests unitaires pour advanced_analytics\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AdvancedAnalytics_creation(self):\n        \"\"\"Test de création de AdvancedAnalytics\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AdvancedAnalytics: {e}\")\n    \n    def test_AdvancedAnalytics_run(self):\n        \"\"\"Test de la méthode run\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.run()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester run: {e}\")\n    \n    def test_AdvancedAnalytics__analyze_complexity(self):\n        \"\"\"Test de la méthode _analyze_complexity\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_complexity()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_complexity: {e}\")\n    \n    def test_AdvancedAnalytics__calculate_complexity(self):\n        \"\"\"Test de la méthode _calculate_complexity\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._calculate_complexity()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _calculate_complexity: {e}\")\n    \n    def test_AdvancedAnalytics__analyze_coverage(self):\n        \"\"\"Test de la méthode _analyze_coverage\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_coverage()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_coverage: {e}\")\n    \n    def test_AdvancedAnalytics__analyze_performance(self):\n        \"\"\"Test de la méthode _analyze_performance\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_performance()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_performance: {e}\")\n    \n    def test_AdvancedAnalytics__analyze_quality(self):\n        \"\"\"Test de la méthode _analyze_quality\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_quality()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_quality: {e}\")\n    \n    def test_AdvancedAnalytics__analyze_evolution(self):\n        \"\"\"Test de la méthode _analyze_evolution\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_evolution()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_evolution: {e}\")\n    \n    def test_AdvancedAnalytics__generate_dashboard(self):\n        \"\"\"Test de la méthode _generate_dashboard\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_dashboard()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_dashboard: {e}\")\n    \n    def test_AdvancedAnalytics__generate_summary(self):\n        \"\"\"Test de la méthode _generate_summary\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_summary()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_summary: {e}\")\n    \n    def test_AdvancedAnalytics_print_report(self):\n        \"\"\"Test de la méthode print_report\"\"\"\n        try:\n            instance = AdvancedAnalytics()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.print_report()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester print_report: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour auto_documenter_fixed\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from auto_documenter_fixed import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer auto_documenter_fixed\")\n    pass\n\nclass TestAuto_Documenter_Fixed(unittest.TestCase):\n    \"\"\"Tests unitaires pour auto_documenter_fixed\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_AutoDocumenterFixed_creation(self):\n        \"\"\"Test de création de AutoDocumenterFixed\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer AutoDocumenterFixed: {e}\")\n    \n    def test_AutoDocumenterFixed__load_translations(self):\n        \"\"\"Test de la méthode _load_translations\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._load_translations()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _load_translations: {e}\")\n    \n    def test_AutoDocumenterFixed_document_project(self):\n        \"\"\"Test de la méthode document_project\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance.document_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester document_project: {e}\")\n    \n    def test_AutoDocumenterFixed__analyze_project(self):\n        \"\"\"Test de la méthode _analyze_project\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_project: {e}\")\n    \n    def test_AutoDocumenterFixed__extract_basic_info(self):\n        \"\"\"Test de la méthode _extract_basic_info\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._extract_basic_info()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _extract_basic_info: {e}\")\n    \n    def test_AutoDocumenterFixed__analyze_python_files(self):\n        \"\"\"Test de la méthode _analyze_python_files\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._analyze_python_files()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _analyze_python_files: {e}\")\n    \n    def test_AutoDocumenterFixed__generate_readme(self):\n        \"\"\"Test de la méthode _generate_readme\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_readme()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_readme: {e}\")\n    \n    def test_AutoDocumenterFixed__generate_api_documentation(self):\n        \"\"\"Test de la méthode _generate_api_documentation\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_api_documentation()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_api_documentation: {e}\")\n    \n    def test_AutoDocumenterFixed__generate_setup_guide(self):\n        \"\"\"Test de la méthode _generate_setup_guide\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_setup_guide()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_setup_guide: {e}\")\n    \n    def test_AutoDocumenterFixed__generate_usage_guide(self):\n        \"\"\"Test de la méthode _generate_usage_guide\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._generate_usage_guide()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _generate_usage_guide: {e}\")\n    \n    def test_AutoDocumenterFixed__save_documents(self):\n        \"\"\"Test de la méthode _save_documents\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._save_documents()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _save_documents: {e}\")\n    \n    def test_AutoDocumenterFixed__get_created_files(self):\n        \"\"\"Test de la méthode _get_created_files\"\"\"\n        try:\n            instance = AutoDocumenterFixed()\n            # TODO: Ajouter des paramètres de test appropriés\n            result = instance._get_created_files()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester _get_created_files: {e}\")\n    \n    def test_main(self):\n        \"\"\"Test de la fonction main\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = main()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester main: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour project_types\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from project_types import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer project_types\")\n    pass\n\nclass TestProject_Types(unittest.TestCase):\n    \"\"\"Tests unitaires pour project_types\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\n    def test_ProjectType_creation(self):\n        \"\"\"Test de création de ProjectType\"\"\"\n        try:\n            instance = ProjectType()\n            self.assertIsNotNone(instance)\n        except Exception as e:\n            self.skipTest(f\"Impossible de créer ProjectType: {e}\")\n    \n    def test_get_project_config(self):\n        \"\"\"Test de la fonction get_project_config\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = get_project_config()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester get_project_config: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour project_classifier\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from project_classifier import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer project_classifier\")\n    pass\n\nclass TestProject_Classifier(unittest.TestCase):\n    \"\"\"Tests unitaires pour project_classifier\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_classify_project(self):\n        \"\"\"Test de la fonction classify_project\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = classify_project()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester classify_project: {e}\")\n    \n    def test_get_project_name(self):\n        \"\"\"Test de la fonction get_project_name\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = get_project_name()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester get_project_name: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour artistic_templates\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from artistic_templates import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer artistic_templates\")\n    pass\n\nclass TestArtistic_Templates(unittest.TestCase):\n    \"\"\"Tests unitaires pour artistic_templates\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_get_artistic_templates(self):\n        \"\"\"Test de la fonction get_artistic_templates\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = get_artistic_templates()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester get_artistic_templates: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour base_templates\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from base_templates import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer base_templates\")\n    pass\n\nclass TestBase_Templates(unittest.TestCase):\n    \"\"\"Tests unitaires pour base_templates\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_get_base_templates(self):\n        \"\"\"Test de la fonction get_base_templates\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = get_base_templates()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester get_base_templates: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour api_templates\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from api_templates import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer api_templates\")\n    pass\n\nclass TestApi_Templates(unittest.TestCase):\n    \"\"\"Tests unitaires pour api_templates\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n    def test_get_api_templates(self):\n        \"\"\"Test de la fonction get_api_templates\"\"\"\n        try:\n            # TODO: Ajouter des paramètres de test appropriés\n            result = get_api_templates()\n            # TODO: Ajouter des assertions appropriées\n            self.assertIsNotNone(result)\n        except Exception as e:\n            self.skipTest(f\"Impossible de tester get_api_templates: {e}\")\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour fr\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from fr import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer fr\")\n    pass\n\nclass TestFr(unittest.TestCase):\n    \"\"\"Tests unitaires pour fr\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\nif __name__ == '__main__':\n    unittest.main()\n",
          "#!/usr/bin/env python3\n\"\"\"\nTests unitaires pour en\nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\ntry:\n    from en import *\nexcept ImportError:\n    print(f\"⚠️ Impossible d'importer en\")\n    pass\n\nclass TestEn(unittest.TestCase):\n    \"\"\"Tests unitaires pour en\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        pass\n    \n\nif __name__ == '__main__':\n    unittest.main()\n"
        ],
        "integration_tests": [
          "#!/usr/bin/env python3\n\"\"\"\nTests d'intégration pour \nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nimport tempfile\nimport shutil\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\nclass TestIntegration(unittest.TestCase):\n    \"\"\"Tests d'intégration\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        self.temp_dir = tempfile.mkdtemp()\n    \n    def tearDown(self):\n        \"\"\"Nettoyage après chaque test\"\"\"\n        shutil.rmtree(self.temp_dir, ignore_errors=True)\n    \n    def test_project_import(self):\n        \"\"\"Test d'import du projet\"\"\"\n        try:\n            # Tester l'import des modules principaux\n            for module in ['setup', 'athalia_new', 'athalia_unified', 'demo_athalia', 'athalia_quick_start', 'hello_plugin', 'export_docker_plugin', 'auto_correction_avancee', 'main', 'main', 'main', 'ci', 'cleanup', 'main', 'onboarding', 'audit', 'security', 'plugins_manager', 'plugins_validator', 'ai_robust', 'ready_check', 'project_importer', 'profiles', 'auto_documenter', 'athalia_orchestrator', 'code_linter', 'security_auditor', 'advanced_analytics', 'auto_documenter_fixed', 'project_types', 'project_classifier', 'artistic_templates', 'base_templates', 'api_templates', 'fr', 'en']:\n                try:\n                    __import__(module)\n                except ImportError:\n                    pass  # Module optionnel\n            self.assertTrue(True)\n        except Exception as e:\n            self.fail(f\"Erreur d'import: {e}\")\n    \n    def test_basic_functionality(self):\n        \"\"\"Test de fonctionnalité de base\"\"\"\n        try:\n            # TODO: Ajouter des tests de fonctionnalité de base\n            self.assertTrue(True)\n        except Exception as e:\n            self.skipTest(f\"Fonctionnalité de base non disponible: {e}\")\n    \n    def test_error_handling(self):\n        \"\"\"Test de gestion d'erreurs\"\"\"\n        try:\n            # TODO: Ajouter des tests de gestion d'erreurs\n            self.assertTrue(True)\n        except Exception as e:\n            self.skipTest(f\"Gestion d'erreurs non testable: {e}\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
        ],
        "performance_tests": [
          "#!/usr/bin/env python3\n\"\"\"\nTests de performance pour \nGénéré automatiquement par Athalia\n\"\"\"\n\nimport unittest\nimport sys\nimport os\nimport time\nimport cProfile\nimport pstats\nfrom unittest.mock import Mock, patch, MagicMock\n\n# Ajouter le chemin du projet\nsys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))\n\nclass TestPerformance(unittest.TestCase):\n    \"\"\"Tests de performance\"\"\"\n    \n    def setUp(self):\n        \"\"\"Configuration avant chaque test\"\"\"\n        pass\n    \n    def test_import_performance(self):\n        \"\"\"Test de performance des imports\"\"\"\n        start_time = time.time()\n        try:\n            # Tester l'import des modules principaux\n            for module in ['setup', 'athalia_new', 'athalia_unified', 'demo_athalia', 'athalia_quick_start', 'hello_plugin', 'export_docker_plugin', 'auto_correction_avancee', 'main', 'main', 'main', 'ci', 'cleanup', 'main', 'onboarding', 'audit', 'security', 'plugins_manager', 'plugins_validator', 'ai_robust', 'ready_check', 'project_importer', 'profiles', 'auto_documenter', 'athalia_orchestrator', 'code_linter', 'security_auditor', 'advanced_analytics', 'auto_documenter_fixed', 'project_types', 'project_classifier', 'artistic_templates', 'base_templates', 'api_templates', 'fr', 'en']:\n                try:\n                    __import__(module)\n                except ImportError:\n                    pass\n            end_time = time.time()\n            import_time = end_time - start_time\n            self.assertLess(import_time, 5.0, f\"Import trop lent: {import_time:.2f}s\")\n        except Exception as e:\n            self.skipTest(f\"Test d'import impossible: {e}\")\n    \n    def test_memory_usage(self):\n        \"\"\"Test d'usage mémoire\"\"\"\n        import psutil\n        import os\n        \n        process = psutil.Process(os.getpid())\n        initial_memory = process.memory_info().rss / 1024 / 1024  # MB\n        \n        try:\n            # TODO: Ajouter des opérations qui utilisent de la mémoire\n            pass\n        except Exception as e:\n            self.skipTest(f\"Test mémoire impossible: {e}\")\n        \n        final_memory = process.memory_info().rss / 1024 / 1024  # MB\n        memory_increase = final_memory - initial_memory\n        \n        self.assertLess(memory_increase, 100, f\"Usage mémoire excessif: {memory_increase:.1f}MB\")\n    \n    def test_execution_time(self):\n        \"\"\"Test de temps d'exécution\"\"\"\n        start_time = time.time()\n        try:\n            # TODO: Ajouter des opérations à mesurer\n            time.sleep(0.1)  # Simulation\n            end_time = time.time()\n            execution_time = end_time - start_time\n            self.assertLess(execution_time, 1.0, f\"Exécution trop lente: {execution_time:.2f}s\")\n        except Exception as e:\n            self.skipTest(f\"Test d'exécution impossible: {e}\")\n\nif __name__ == '__main__':\n    unittest.main()\n"
        ],
        "test_results": {
          "unit_tests": {
            "passed": 0,
            "failed": 0,
            "errors": [
              "ERROR: /Volumes/T7/athalia-dev-setup/pytest.ini:11: unexpected line: ']'\n\n"
            ]
          },
          "integration_tests": {
            "passed": 0,
            "failed": 0,
            "errors": [
              "ERROR: /Volumes/T7/athalia-dev-setup/pytest.ini:11: unexpected line: ']'\n\n"
            ]
          },
          "performance_tests": {
            "passed": 0,
            "failed": 0,
            "errors": []
          },
          "coverage": 0.0
        },
        "files_created": [
          "pytest.ini",
          "run_tests.sh",
          "tests/test_unit_1.py",
          "tests/test_unit_2.py",
          "tests/test_unit_3.py",
          "tests/test_unit_4.py",
          "tests/test_unit_5.py",
          "tests/test_unit_6.py",
          "tests/test_unit_7.py",
          "tests/test_unit_8.py",
          "tests/test_unit_9.py",
          "tests/test_unit_10.py",
          "tests/test_unit_11.py",
          "tests/test_unit_12.py",
          "tests/test_unit_13.py",
          "tests/test_unit_14.py",
          "tests/test_unit_15.py",
          "tests/test_unit_16.py",
          "tests/test_unit_17.py",
          "tests/test_unit_18.py",
          "tests/test_unit_19.py",
          "tests/test_unit_20.py",
          "tests/test_unit_21.py",
          "tests/test_unit_22.py",
          "tests/test_unit_23.py",
          "tests/test_unit_24.py",
          "tests/test_unit_25.py",
          "tests/test_unit_26.py",
          "tests/test_unit_27.py",
          "tests/test_unit_28.py",
          "tests/test_unit_29.py",
          "tests/test_unit_30.py",
          "tests/test_unit_31.py",
          "tests/test_unit_32.py",
          "tests/test_unit_33.py",
          "tests/test_unit_34.py",
          "tests/test_unit_35.py",
          "tests/test_unit_36.py",
          "tests/test_integration_1.py",
          "tests/test_performance_1.py"
        ]
      },
      "files_created": [
        "pytest.ini",
        "run_tests.sh",
        "tests/test_unit_1.py",
        "tests/test_unit_2.py",
        "tests/test_unit_3.py",
        "tests/test_unit_4.py",
        "tests/test_unit_5.py",
        "tests/test_unit_6.py",
        "tests/test_unit_7.py",
        "tests/test_unit_8.py",
        "tests/test_unit_9.py",
        "tests/test_unit_10.py",
        "tests/test_unit_11.py",
        "tests/test_unit_12.py",
        "tests/test_unit_13.py",
        "tests/test_unit_14.py",
        "tests/test_unit_15.py",
        "tests/test_unit_16.py",
        "tests/test_unit_17.py",
        "tests/test_unit_18.py",
        "tests/test_unit_19.py",
        "tests/test_unit_20.py",
        "tests/test_unit_21.py",
        "tests/test_unit_22.py",
        "tests/test_unit_23.py",
        "tests/test_unit_24.py",
        "tests/test_unit_25.py",
        "tests/test_unit_26.py",
        "tests/test_unit_27.py",
        "tests/test_unit_28.py",
        "tests/test_unit_29.py",
        "tests/test_unit_30.py",
        "tests/test_unit_31.py",
        "tests/test_unit_32.py",
        "tests/test_unit_33.py",
        "tests/test_unit_34.py",
        "tests/test_unit_35.py",
        "tests/test_unit_36.py",
        "tests/test_integration_1.py",
        "tests/test_performance_1.py"
      ]
    }
  },
  "final_report": "\n================================================================================\n🚀 RAPPORT FINAL ATHALIA - \n================================================================================\n\n📅 Date: 2025-07-17 07:18:04\n📁 Projet: .\n⚙️ Configuration: {\n  \"audit\": true,\n  \"clean\": false,\n  \"document\": true,\n  \"test\": true,\n  \"cicd\": false,\n  \"dry_run\": true,\n  \"auto_fix\": false,\n  \"lang\": \"fr\"\n}\n\n📊 RÉSUMÉ DES ÉTAPES:\n\n🔍 Audit intelligent: ✅ Réussi (Score: 45/100)\n🧹 Linting avancé: ❌ Échoué\n  Erreurs: Flake8: erreurs détectées, Black: formatage non conforme, isort: imports non triés\n  Warnings: Mypy: problèmes de typage détectés, Bandit: vulnérabilités détectées\n🔒 Audit sécurité: ❌ Échoué\n  Vulnérabilités: Bandit: vulnérabilités détectées, Safety: dépendances à risque détectées, Secrets détectés dans le code\n  Secrets: 1\n📊 Analytics avancée: ✅ Réussi\n  Fichiers: 90, Lignes: 15150, Fonctions: 499\n📚 Documentation automatique: ❌ Échoué (name 'e' is not defined)\n🧪 Tests automatiques: ✅ Réussi (40 fichiers)\n\n📄 FICHIERS CRÉÉS:\n\nTesting:\n   • pytest.ini\n   • run_tests.sh\n   • test_unit_1.py\n   • test_unit_2.py\n   • test_unit_3.py\n   • ... et 35 autres\n\n\n📈 STATISTIQUES FINALES:\n\n   • Total fichiers créés: 40\n   • Étapes réussies: 3/6\n   • Temps total: 07:18:04\n\n🎯 PROCHAINES ÉTAPES:\n\n1. Vérifier les fichiers générés\n2. Commiter les changements\n3. Configurer les secrets CI/CD\n4. Lancer les premiers tests\n5. Déployer en production\n\n💡 CONSEILS:\n\n• Les tests générés nécessitent souvent des ajustements manuels\n• Vérifiez la configuration CI/CD avant le premier déploiement\n• Adaptez la documentation selon vos besoins spécifiques\n• Surveillez les métriques de performance\n\n================================================================================\n🌟 ATHALIA - Industrialisation IA complète terminée !\n================================================================================\n"
}